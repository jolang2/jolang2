program org
	block_comment 
	package_declaration org.jbox2d.dynamics.joints
		package 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	class_declaration ConstantVolumeJoint
		modifiers 
			public 
		class 
		identifier 
		superclass 
			extends 
			type_identifier 
		class_body bodies
			{ 
			field_declaration bodies
				modifiers 
					private 
					final 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
				variable_declarator bodies
					identifier 
				; 
			field_declaration targetLengths
				modifiers 
					private 
				array_type 
					floating_point_type 
						float 
					dimensions 
						[ 
						] 
				variable_declarator targetLengths
					identifier 
				; 
			field_declaration targetVolume
				modifiers 
					private 
				floating_point_type 
					float 
				variable_declarator targetVolume
					identifier 
				; 
			field_declaration normals
				modifiers 
					private 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
				variable_declarator normals
					identifier 
				; 
			field_declaration m_impulse
				modifiers 
					private 
				floating_point_type 
					float 
				variable_declarator m_impulse
					identifier 
					= 
					decimal_floating_point_literal 
				; 
			field_declaration world
				modifiers 
					private 
				type_identifier 
				variable_declarator world
					identifier 
				; 
			field_declaration distanceJoints
				modifiers 
					private 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
				variable_declarator distanceJoints
					identifier 
				; 
			method_declaration getBodies
				modifiers 
					public 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
				identifier 
				formal_parameters 
					( 
					) 
				block bodies
					{ 
					return_statement bodies
						return 
						identifier 
						; 
					} 
			method_declaration getJoints
				modifiers 
					public 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
				identifier 
				formal_parameters 
					( 
					) 
				block distanceJoints
					{ 
					return_statement distanceJoints
						return 
						identifier 
						; 
					} 
			method_declaration inflate
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters factor
					( 
					formal_parameter factor
						floating_point_type 
							float 
						identifier 
					) 
				block targetVolume
					{ 
					expression_statement targetVolume
						assignment_expression targetVolume
							identifier 
							*= 
							identifier 
						; 
					} 
			constructor_declaration ConstantVolumeJoint
				modifiers 
					public 
				identifier 
				formal_parameters argWorld
					( 
					formal_parameter argWorld
						type_identifier 
						identifier 
					, 
					formal_parameter def
						type_identifier 
						identifier 
					) 
				constructor_body argWorld
					{ 
					explicit_constructor_invocation argWorld
						super 
						argument_list argWorld
							( 
							method_invocation argWorld
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
							, 
							identifier 
							) 
						; 
					expression_statement world
						assignment_expression world
							identifier 
							= 
							identifier 
						; 
					if_statement def
						if 
						parenthesized_expression def
							( 
							binary_expression def
								method_invocation def
									field_access def
										identifier 
										. 
										identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								<= 
								decimal_integer_literal 
							) 
						block 
							{ 
							throw_statement 
								throw 
								object_creation_expression 
									new 
									type_identifier 
									argument_list 
										( 
										string_literal 
											" 
											string_fragment 
											" 
										) 
								; 
							} 
					expression_statement bodies
						assignment_expression bodies
							identifier 
							= 
							method_invocation def
								field_access def
									identifier 
									. 
									identifier 
								. 
								identifier 
								argument_list 
									( 
									array_creation_expression 
										new 
										type_identifier 
										dimensions_expr 
											[ 
											decimal_integer_literal 
											] 
									) 
						; 
					expression_statement targetLengths
						assignment_expression targetLengths
							identifier 
							= 
							array_creation_expression bodies
								new 
								floating_point_type 
									float 
								dimensions_expr bodies
									[ 
									field_access bodies
										identifier 
										. 
										identifier 
									] 
						; 
					for_statement i
						for 
						( 
						local_variable_declaration i
							integral_type 
								int 
							variable_declarator i
								identifier 
								= 
								decimal_integer_literal 
							; 
						binary_expression i
							identifier 
							< 
							field_access targetLengths
								identifier 
								. 
								identifier 
						; 
						update_expression i
							++ 
							identifier 
						) 
						block next
							{ 
							local_variable_declaration next
								modifiers 
									final 
								integral_type 
									int 
								variable_declarator next
									identifier 
									= 
									ternary_expression i
										parenthesized_expression i
											( 
											binary_expression i
												identifier 
												== 
												binary_expression targetLengths
													field_access targetLengths
														identifier 
														. 
														identifier 
													- 
													decimal_integer_literal 
											) 
										? 
										decimal_integer_literal 
										: 
										binary_expression i
											identifier 
											+ 
											decimal_integer_literal 
								; 
							local_variable_declaration dist
								floating_point_type 
									float 
								variable_declarator dist
									identifier 
									= 
									method_invocation bodies
										method_invocation bodies
											method_invocation bodies
												array_access bodies
													identifier 
													[ 
													identifier 
													] 
												. 
												identifier 
												argument_list 
													( 
													) 
											. 
											identifier 
											argument_list bodies
												( 
												method_invocation bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
													argument_list 
														( 
														) 
												) 
										. 
										identifier 
										argument_list 
											( 
											) 
								; 
							expression_statement targetLengths
								assignment_expression targetLengths
									array_access targetLengths
										identifier 
										[ 
										identifier 
										] 
									= 
									identifier 
								; 
							} 
					expression_statement targetVolume
						assignment_expression targetVolume
							identifier 
							= 
							method_invocation getBodyArea
								identifier 
								argument_list 
									( 
									) 
						; 
					if_statement def
						if 
						parenthesized_expression def
							( 
							binary_expression def
								binary_expression def
									field_access def
										identifier 
										. 
										identifier 
									!= 
									null_literal 
								&& 
								binary_expression def
									method_invocation def
										field_access def
											identifier 
											. 
											identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
									!= 
									method_invocation def
										field_access def
											identifier 
											. 
											identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
							) 
						block 
							{ 
							throw_statement 
								throw 
								object_creation_expression 
									new 
									type_identifier 
									argument_list 
										( 
										string_literal 
											" 
											string_fragment 
											" 
										) 
								; 
							} 
					if_statement def
						if 
						parenthesized_expression def
							( 
							binary_expression def
								field_access def
									identifier 
									. 
									identifier 
								== 
								null_literal 
							) 
						block djd
							{ 
							local_variable_declaration djd
								modifiers 
									final 
								type_identifier 
								variable_declarator djd
									identifier 
									= 
									object_creation_expression 
										new 
										type_identifier 
										argument_list 
											( 
											) 
								; 
							expression_statement distanceJoints
								assignment_expression distanceJoints
									identifier 
									= 
									array_creation_expression bodies
										new 
										type_identifier 
										dimensions_expr bodies
											[ 
											field_access bodies
												identifier 
												. 
												identifier 
											] 
								; 
							for_statement i
								for 
								( 
								local_variable_declaration i
									integral_type 
										int 
									variable_declarator i
										identifier 
										= 
										decimal_integer_literal 
									; 
								binary_expression i
									identifier 
									< 
									field_access targetLengths
										identifier 
										. 
										identifier 
								; 
								update_expression i
									++ 
									identifier 
								) 
								block next
									{ 
									local_variable_declaration next
										modifiers 
											final 
										integral_type 
											int 
										variable_declarator next
											identifier 
											= 
											ternary_expression i
												parenthesized_expression i
													( 
													binary_expression i
														identifier 
														== 
														binary_expression targetLengths
															field_access targetLengths
																identifier 
																. 
																identifier 
															- 
															decimal_integer_literal 
													) 
												? 
												decimal_integer_literal 
												: 
												binary_expression i
													identifier 
													+ 
													decimal_integer_literal 
										; 
									expression_statement djd
										assignment_expression djd
											field_access djd
												identifier 
												. 
												identifier 
											= 
											field_access def
												identifier 
												. 
												identifier 
										; 
									line_comment 
									expression_statement djd
										assignment_expression djd
											field_access djd
												identifier 
												. 
												identifier 
											= 
											field_access def
												identifier 
												. 
												identifier 
										; 
									line_comment 
									expression_statement djd
										assignment_expression djd
											field_access djd
												identifier 
												. 
												identifier 
											= 
											field_access def
												identifier 
												. 
												identifier 
										; 
									expression_statement djd
										method_invocation djd
											identifier 
											. 
											identifier 
											argument_list bodies
												( 
												array_access bodies
													identifier 
													[ 
													identifier 
													] 
												, 
												array_access bodies
													identifier 
													[ 
													identifier 
													] 
												, 
												method_invocation bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
													argument_list 
														( 
														) 
												, 
												method_invocation bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
													argument_list 
														( 
														) 
												) 
										; 
									expression_statement distanceJoints
										assignment_expression distanceJoints
											array_access distanceJoints
												identifier 
												[ 
												identifier 
												] 
											= 
											cast_expression world
												( 
												type_identifier 
												) 
												method_invocation world
													identifier 
													. 
													identifier 
													argument_list djd
														( 
														identifier 
														) 
										; 
									} 
							} 
						else 
						block distanceJoints
							{ 
							expression_statement distanceJoints
								assignment_expression distanceJoints
									identifier 
									= 
									method_invocation def
										field_access def
											identifier 
											. 
											identifier 
										. 
										identifier 
										argument_list 
											( 
											array_creation_expression 
												new 
												type_identifier 
												dimensions_expr 
													[ 
													decimal_integer_literal 
													] 
											) 
								; 
							} 
					expression_statement normals
						assignment_expression normals
							identifier 
							= 
							array_creation_expression bodies
								new 
								type_identifier 
								dimensions_expr bodies
									[ 
									field_access bodies
										identifier 
										. 
										identifier 
									] 
						; 
					for_statement i
						for 
						( 
						local_variable_declaration i
							integral_type 
								int 
							variable_declarator i
								identifier 
								= 
								decimal_integer_literal 
							; 
						binary_expression i
							identifier 
							< 
							field_access normals
								identifier 
								. 
								identifier 
						; 
						update_expression i
							++ 
							identifier 
						) 
						block normals
							{ 
							expression_statement normals
								assignment_expression normals
									array_access normals
										identifier 
										[ 
										identifier 
										] 
									= 
									object_creation_expression 
										new 
										type_identifier 
										argument_list 
											( 
											) 
								; 
							} 
					} 
			method_declaration destructor
				modifiers Override
					marker_annotation Override
						@ 
						identifier 
					public 
				void_type 
				identifier 
				formal_parameters 
					( 
					) 
				block i
					{ 
					for_statement i
						for 
						( 
						local_variable_declaration i
							integral_type 
								int 
							variable_declarator i
								identifier 
								= 
								decimal_integer_literal 
							; 
						binary_expression i
							identifier 
							< 
							field_access distanceJoints
								identifier 
								. 
								identifier 
						; 
						update_expression i
							++ 
							identifier 
						) 
						block world
							{ 
							expression_statement world
								method_invocation world
									identifier 
									. 
									identifier 
									argument_list distanceJoints
										( 
										array_access distanceJoints
											identifier 
											[ 
											identifier 
											] 
										) 
								; 
							} 
					} 
			method_declaration getBodyArea
				modifiers 
					private 
				floating_point_type 
					float 
				identifier 
				formal_parameters 
					( 
					) 
				block area
					{ 
					local_variable_declaration area
						floating_point_type 
							float 
						variable_declarator area
							identifier 
							= 
							decimal_floating_point_literal 
						; 
					for_statement i
						for 
						( 
						local_variable_declaration i
							integral_type 
								int 
							variable_declarator i
								identifier 
								= 
								decimal_integer_literal 
							; 
						binary_expression i
							identifier 
							< 
							field_access bodies
								identifier 
								. 
								identifier 
						; 
						update_expression i
							++ 
							identifier 
						) 
						block next
							{ 
							local_variable_declaration next
								modifiers 
									final 
								integral_type 
									int 
								variable_declarator next
									identifier 
									= 
									ternary_expression i
										parenthesized_expression i
											( 
											binary_expression i
												identifier 
												== 
												binary_expression bodies
													field_access bodies
														identifier 
														. 
														identifier 
													- 
													decimal_integer_literal 
											) 
										? 
										decimal_integer_literal 
										: 
										binary_expression i
											identifier 
											+ 
											decimal_integer_literal 
								; 
							expression_statement area
								assignment_expression area
									identifier 
									+= 
									binary_expression bodies
										binary_expression bodies
											field_access bodies
												method_invocation bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
													argument_list 
														( 
														) 
												. 
												identifier 
											* 
											field_access bodies
												method_invocation bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
													argument_list 
														( 
														) 
												. 
												identifier 
										- 
										binary_expression bodies
											field_access bodies
												method_invocation bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
													argument_list 
														( 
														) 
												. 
												identifier 
											* 
											field_access bodies
												method_invocation bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
													argument_list 
														( 
														) 
												. 
												identifier 
								; 
							} 
					expression_statement area
						assignment_expression area
							identifier 
							*= 
							decimal_floating_point_literal 
						; 
					return_statement area
						return 
						identifier 
						; 
					} 
			method_declaration getSolverArea
				modifiers 
					private 
				floating_point_type 
					float 
				identifier 
				formal_parameters positions
					( 
					formal_parameter positions
						array_type 
							type_identifier 
							dimensions 
								[ 
								] 
						identifier 
					) 
				block area
					{ 
					local_variable_declaration area
						floating_point_type 
							float 
						variable_declarator area
							identifier 
							= 
							decimal_floating_point_literal 
						; 
					for_statement i
						for 
						( 
						local_variable_declaration i
							integral_type 
								int 
							variable_declarator i
								identifier 
								= 
								decimal_integer_literal 
							; 
						binary_expression i
							identifier 
							< 
							field_access bodies
								identifier 
								. 
								identifier 
						; 
						update_expression i
							++ 
							identifier 
						) 
						block next
							{ 
							local_variable_declaration next
								modifiers 
									final 
								integral_type 
									int 
								variable_declarator next
									identifier 
									= 
									ternary_expression i
										parenthesized_expression i
											( 
											binary_expression i
												identifier 
												== 
												binary_expression bodies
													field_access bodies
														identifier 
														. 
														identifier 
													- 
													decimal_integer_literal 
											) 
										? 
										decimal_integer_literal 
										: 
										binary_expression i
											identifier 
											+ 
											decimal_integer_literal 
								; 
							expression_statement area
								assignment_expression area
									identifier 
									+= 
									binary_expression positions
										binary_expression positions
											field_access positions
												field_access positions
													array_access positions
														identifier 
														[ 
														field_access bodies
															array_access bodies
																identifier 
																[ 
																identifier 
																] 
															. 
															identifier 
														] 
													. 
													identifier 
												. 
												identifier 
											* 
											field_access positions
												field_access positions
													array_access positions
														identifier 
														[ 
														field_access bodies
															array_access bodies
																identifier 
																[ 
																identifier 
																] 
															. 
															identifier 
														] 
													. 
													identifier 
												. 
												identifier 
										- 
										binary_expression positions
											field_access positions
												field_access positions
													array_access positions
														identifier 
														[ 
														field_access bodies
															array_access bodies
																identifier 
																[ 
																identifier 
																] 
															. 
															identifier 
														] 
													. 
													identifier 
												. 
												identifier 
											* 
											field_access positions
												field_access positions
													array_access positions
														identifier 
														[ 
														field_access bodies
															array_access bodies
																identifier 
																[ 
																identifier 
																] 
															. 
															identifier 
														] 
													. 
													identifier 
												. 
												identifier 
								; 
							} 
					expression_statement area
						assignment_expression area
							identifier 
							*= 
							decimal_floating_point_literal 
						; 
					return_statement area
						return 
						identifier 
						; 
					} 
			method_declaration constrainEdges
				modifiers 
					private 
				boolean_type 
				identifier 
				formal_parameters positions
					( 
					formal_parameter positions
						array_type 
							type_identifier 
							dimensions 
								[ 
								] 
						identifier 
					) 
				block perimeter
					{ 
					local_variable_declaration perimeter
						floating_point_type 
							float 
						variable_declarator perimeter
							identifier 
							= 
							decimal_floating_point_literal 
						; 
					for_statement i
						for 
						( 
						local_variable_declaration i
							integral_type 
								int 
							variable_declarator i
								identifier 
								= 
								decimal_integer_literal 
							; 
						binary_expression i
							identifier 
							< 
							field_access bodies
								identifier 
								. 
								identifier 
						; 
						update_expression i
							++ 
							identifier 
						) 
						block next
							{ 
							local_variable_declaration next
								modifiers 
									final 
								integral_type 
									int 
								variable_declarator next
									identifier 
									= 
									ternary_expression i
										parenthesized_expression i
											( 
											binary_expression i
												identifier 
												== 
												binary_expression bodies
													field_access bodies
														identifier 
														. 
														identifier 
													- 
													decimal_integer_literal 
											) 
										? 
										decimal_integer_literal 
										: 
										binary_expression i
											identifier 
											+ 
											decimal_integer_literal 
								; 
							local_variable_declaration dx
								floating_point_type 
									float 
								variable_declarator dx
									identifier 
									= 
									binary_expression positions
										field_access positions
											field_access positions
												array_access positions
													identifier 
													[ 
													field_access bodies
														array_access bodies
															identifier 
															[ 
															identifier 
															] 
														. 
														identifier 
													] 
												. 
												identifier 
											. 
											identifier 
										- 
										field_access positions
											field_access positions
												array_access positions
													identifier 
													[ 
													field_access bodies
														array_access bodies
															identifier 
															[ 
															identifier 
															] 
														. 
														identifier 
													] 
												. 
												identifier 
											. 
											identifier 
								; 
							local_variable_declaration dy
								floating_point_type 
									float 
								variable_declarator dy
									identifier 
									= 
									binary_expression positions
										field_access positions
											field_access positions
												array_access positions
													identifier 
													[ 
													field_access bodies
														array_access bodies
															identifier 
															[ 
															identifier 
															] 
														. 
														identifier 
													] 
												. 
												identifier 
											. 
											identifier 
										- 
										field_access positions
											field_access positions
												array_access positions
													identifier 
													[ 
													field_access bodies
														array_access bodies
															identifier 
															[ 
															identifier 
															] 
														. 
														identifier 
													] 
												. 
												identifier 
											. 
											identifier 
								; 
							local_variable_declaration dist
								floating_point_type 
									float 
								variable_declarator dist
									identifier 
									= 
									method_invocation MathUtils
										identifier 
										. 
										identifier 
										argument_list dx
											( 
											binary_expression dx
												binary_expression dx
													identifier 
													* 
													identifier 
												+ 
												binary_expression dy
													identifier 
													* 
													identifier 
											) 
								; 
							if_statement dist
								if 
								parenthesized_expression dist
									( 
									binary_expression dist
										identifier 
										< 
										field_access Settings
											identifier 
											. 
											identifier 
									) 
								block dist
									{ 
									expression_statement dist
										assignment_expression dist
											identifier 
											= 
											decimal_floating_point_literal 
										; 
									} 
							expression_statement normals
								assignment_expression normals
									field_access normals
										array_access normals
											identifier 
											[ 
											identifier 
											] 
										. 
										identifier 
									= 
									binary_expression dy
										identifier 
										/ 
										identifier 
								; 
							expression_statement normals
								assignment_expression normals
									field_access normals
										array_access normals
											identifier 
											[ 
											identifier 
											] 
										. 
										identifier 
									= 
									binary_expression dx
										unary_expression dx
											- 
											identifier 
										/ 
										identifier 
								; 
							expression_statement perimeter
								assignment_expression perimeter
									identifier 
									+= 
									identifier 
								; 
							} 
					local_variable_declaration delta
						modifiers 
							final 
						type_identifier 
						variable_declarator delta
							identifier 
							= 
							method_invocation pool
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					local_variable_declaration deltaArea
						floating_point_type 
							float 
						variable_declarator deltaArea
							identifier 
							= 
							binary_expression targetVolume
								identifier 
								- 
								method_invocation getSolverArea
									identifier 
									argument_list positions
										( 
										identifier 
										) 
						; 
					local_variable_declaration toExtrude
						floating_point_type 
							float 
						variable_declarator toExtrude
							identifier 
							= 
							binary_expression deltaArea
								binary_expression deltaArea
									decimal_floating_point_literal 
									* 
									identifier 
								/ 
								identifier 
						; 
					line_comment 
					line_comment 
					local_variable_declaration done
						boolean_type 
						variable_declarator done
							identifier 
							= 
							true 
						; 
					for_statement i
						for 
						( 
						local_variable_declaration i
							integral_type 
								int 
							variable_declarator i
								identifier 
								= 
								decimal_integer_literal 
							; 
						binary_expression i
							identifier 
							< 
							field_access bodies
								identifier 
								. 
								identifier 
						; 
						update_expression i
							++ 
							identifier 
						) 
						block next
							{ 
							local_variable_declaration next
								modifiers 
									final 
								integral_type 
									int 
								variable_declarator next
									identifier 
									= 
									ternary_expression i
										parenthesized_expression i
											( 
											binary_expression i
												identifier 
												== 
												binary_expression bodies
													field_access bodies
														identifier 
														. 
														identifier 
													- 
													decimal_integer_literal 
											) 
										? 
										decimal_integer_literal 
										: 
										binary_expression i
											identifier 
											+ 
											decimal_integer_literal 
								; 
							expression_statement delta
								method_invocation delta
									identifier 
									. 
									identifier 
									argument_list toExtrude
										( 
										binary_expression toExtrude
											identifier 
											* 
											parenthesized_expression normals
												( 
												binary_expression normals
													field_access normals
														array_access normals
															identifier 
															[ 
															identifier 
															] 
														. 
														identifier 
													+ 
													field_access normals
														array_access normals
															identifier 
															[ 
															identifier 
															] 
														. 
														identifier 
												) 
										, 
										binary_expression toExtrude
											identifier 
											* 
											parenthesized_expression normals
												( 
												binary_expression normals
													field_access normals
														array_access normals
															identifier 
															[ 
															identifier 
															] 
														. 
														identifier 
													+ 
													field_access normals
														array_access normals
															identifier 
															[ 
															identifier 
															] 
														. 
														identifier 
												) 
										) 
								; 
							line_comment 
							local_variable_declaration normSqrd
								floating_point_type 
									float 
								variable_declarator normSqrd
									identifier 
									= 
									method_invocation delta
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
								; 
							if_statement normSqrd
								if 
								parenthesized_expression normSqrd
									( 
									binary_expression normSqrd
										identifier 
										> 
										binary_expression Settings
											field_access Settings
												identifier 
												. 
												identifier 
											* 
											field_access Settings
												identifier 
												. 
												identifier 
									) 
								block delta
									{ 
									expression_statement delta
										method_invocation delta
											identifier 
											. 
											identifier 
											argument_list Settings
												( 
												binary_expression Settings
													field_access Settings
														identifier 
														. 
														identifier 
													/ 
													method_invocation MathUtils
														identifier 
														. 
														identifier 
														argument_list normSqrd
															( 
															identifier 
															) 
												) 
										; 
									} 
							if_statement normSqrd
								if 
								parenthesized_expression normSqrd
									( 
									binary_expression normSqrd
										identifier 
										> 
										binary_expression Settings
											field_access Settings
												identifier 
												. 
												identifier 
											* 
											field_access Settings
												identifier 
												. 
												identifier 
									) 
								block done
									{ 
									expression_statement done
										assignment_expression done
											identifier 
											= 
											false 
										; 
									} 
							expression_statement positions
								assignment_expression positions
									field_access positions
										field_access positions
											array_access positions
												identifier 
												[ 
												field_access bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
												] 
											. 
											identifier 
										. 
										identifier 
									+= 
									field_access delta
										identifier 
										. 
										identifier 
								; 
							expression_statement positions
								assignment_expression positions
									field_access positions
										field_access positions
											array_access positions
												identifier 
												[ 
												field_access bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
												] 
											. 
											identifier 
										. 
										identifier 
									+= 
									field_access delta
										identifier 
										. 
										identifier 
								; 
							line_comment 
							line_comment 
							} 
					expression_statement pool
						method_invocation pool
							identifier 
							. 
							identifier 
							argument_list 
								( 
								decimal_integer_literal 
								) 
						; 
					line_comment 
					return_statement done
						return 
						identifier 
						; 
					} 
			method_declaration initVelocityConstraints
				modifiers Override
					marker_annotation Override
						@ 
						identifier 
					public 
				void_type 
				identifier 
				formal_parameters step
					( 
					formal_parameter step
						modifiers 
							final 
						type_identifier 
						identifier 
					) 
				block velocities
					{ 
					local_variable_declaration velocities
						array_type 
							type_identifier 
							dimensions 
								[ 
								] 
						variable_declarator velocities
							identifier 
							= 
							field_access step
								identifier 
								. 
								identifier 
						; 
					local_variable_declaration positions
						array_type 
							type_identifier 
							dimensions 
								[ 
								] 
						variable_declarator positions
							identifier 
							= 
							field_access step
								identifier 
								. 
								identifier 
						; 
					local_variable_declaration d
						modifiers 
							final 
						array_type 
							type_identifier 
							dimensions 
								[ 
								] 
						variable_declarator d
							identifier 
							= 
							method_invocation pool
								identifier 
								. 
								identifier 
								argument_list bodies
									( 
									field_access bodies
										identifier 
										. 
										identifier 
									) 
						; 
					for_statement i
						for 
						( 
						local_variable_declaration i
							integral_type 
								int 
							variable_declarator i
								identifier 
								= 
								decimal_integer_literal 
							; 
						binary_expression i
							identifier 
							< 
							field_access bodies
								identifier 
								. 
								identifier 
						; 
						update_expression i
							++ 
							identifier 
						) 
						block prev
							{ 
							local_variable_declaration prev
								modifiers 
									final 
								integral_type 
									int 
								variable_declarator prev
									identifier 
									= 
									ternary_expression i
										parenthesized_expression i
											( 
											binary_expression i
												identifier 
												== 
												decimal_integer_literal 
											) 
										? 
										binary_expression bodies
											field_access bodies
												identifier 
												. 
												identifier 
											- 
											decimal_integer_literal 
										: 
										binary_expression i
											identifier 
											- 
											decimal_integer_literal 
								; 
							local_variable_declaration next
								modifiers 
									final 
								integral_type 
									int 
								variable_declarator next
									identifier 
									= 
									ternary_expression i
										parenthesized_expression i
											( 
											binary_expression i
												identifier 
												== 
												binary_expression bodies
													field_access bodies
														identifier 
														. 
														identifier 
													- 
													decimal_integer_literal 
											) 
										? 
										decimal_integer_literal 
										: 
										binary_expression i
											identifier 
											+ 
											decimal_integer_literal 
								; 
							expression_statement d
								method_invocation d
									array_access d
										identifier 
										[ 
										identifier 
										] 
									. 
									identifier 
									argument_list positions
										( 
										field_access positions
											array_access positions
												identifier 
												[ 
												field_access bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
												] 
											. 
											identifier 
										) 
								; 
							expression_statement d
								method_invocation d
									array_access d
										identifier 
										[ 
										identifier 
										] 
									. 
									identifier 
									argument_list positions
										( 
										field_access positions
											array_access positions
												identifier 
												[ 
												field_access bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
												] 
											. 
											identifier 
										) 
								; 
							} 
					if_statement step
						if 
						parenthesized_expression step
							( 
							field_access step
								field_access step
									identifier 
									. 
									identifier 
								. 
								identifier 
							) 
						block m_impulse
							{ 
							expression_statement m_impulse
								assignment_expression m_impulse
									identifier 
									*= 
									field_access step
										field_access step
											identifier 
											. 
											identifier 
										. 
										identifier 
								; 
							line_comment 
							line_comment 
							line_comment 
							line_comment 
							line_comment 
							for_statement i
								for 
								( 
								local_variable_declaration i
									integral_type 
										int 
									variable_declarator i
										identifier 
										= 
										decimal_integer_literal 
									; 
								binary_expression i
									identifier 
									< 
									field_access bodies
										identifier 
										. 
										identifier 
								; 
								update_expression i
									++ 
									identifier 
								) 
								block velocities
									{ 
									expression_statement velocities
										assignment_expression velocities
											field_access velocities
												field_access velocities
													array_access velocities
														identifier 
														[ 
														field_access bodies
															array_access bodies
																identifier 
																[ 
																identifier 
																] 
															. 
															identifier 
														] 
													. 
													identifier 
												. 
												identifier 
											+= 
											binary_expression bodies
												binary_expression bodies
													binary_expression bodies
														field_access bodies
															array_access bodies
																identifier 
																[ 
																identifier 
																] 
															. 
															identifier 
														* 
														field_access d
															array_access d
																identifier 
																[ 
																identifier 
																] 
															. 
															identifier 
													* 
													decimal_floating_point_literal 
												* 
												identifier 
										; 
									expression_statement velocities
										assignment_expression velocities
											field_access velocities
												field_access velocities
													array_access velocities
														identifier 
														[ 
														field_access bodies
															array_access bodies
																identifier 
																[ 
																identifier 
																] 
															. 
															identifier 
														] 
													. 
													identifier 
												. 
												identifier 
											+= 
											binary_expression bodies
												binary_expression bodies
													binary_expression bodies
														field_access bodies
															array_access bodies
																identifier 
																[ 
																identifier 
																] 
															. 
															identifier 
														* 
														unary_expression d
															- 
															field_access d
																array_access d
																	identifier 
																	[ 
																	identifier 
																	] 
																. 
																identifier 
													* 
													decimal_floating_point_literal 
												* 
												identifier 
										; 
									} 
							} 
						else 
						block m_impulse
							{ 
							expression_statement m_impulse
								assignment_expression m_impulse
									identifier 
									= 
									decimal_floating_point_literal 
								; 
							} 
					} 
			method_declaration solvePositionConstraints
				modifiers Override
					marker_annotation Override
						@ 
						identifier 
					public 
				boolean_type 
				identifier 
				formal_parameters step
					( 
					formal_parameter step
						type_identifier 
						identifier 
					) 
				block constrainEdges
					{ 
					return_statement constrainEdges
						return 
						method_invocation constrainEdges
							identifier 
							argument_list step
								( 
								field_access step
									identifier 
									. 
									identifier 
								) 
						; 
					} 
			method_declaration solveVelocityConstraints
				modifiers Override
					marker_annotation Override
						@ 
						identifier 
					public 
				void_type 
				identifier 
				formal_parameters step
					( 
					formal_parameter step
						modifiers 
							final 
						type_identifier 
						identifier 
					) 
				block crossMassSum
					{ 
					local_variable_declaration crossMassSum
						floating_point_type 
							float 
						variable_declarator crossMassSum
							identifier 
							= 
							decimal_floating_point_literal 
						; 
					local_variable_declaration dotMassSum
						floating_point_type 
							float 
						variable_declarator dotMassSum
							identifier 
							= 
							decimal_floating_point_literal 
						; 
					local_variable_declaration velocities
						array_type 
							type_identifier 
							dimensions 
								[ 
								] 
						variable_declarator velocities
							identifier 
							= 
							field_access step
								identifier 
								. 
								identifier 
						; 
					local_variable_declaration positions
						array_type 
							type_identifier 
							dimensions 
								[ 
								] 
						variable_declarator positions
							identifier 
							= 
							field_access step
								identifier 
								. 
								identifier 
						; 
					local_variable_declaration d
						modifiers 
							final 
						type_identifier 
						variable_declarator d
							identifier 
							dimensions 
								[ 
								] 
							= 
							method_invocation pool
								identifier 
								. 
								identifier 
								argument_list bodies
									( 
									field_access bodies
										identifier 
										. 
										identifier 
									) 
						; 
					for_statement i
						for 
						( 
						local_variable_declaration i
							integral_type 
								int 
							variable_declarator i
								identifier 
								= 
								decimal_integer_literal 
							; 
						binary_expression i
							identifier 
							< 
							field_access bodies
								identifier 
								. 
								identifier 
						; 
						update_expression i
							++ 
							identifier 
						) 
						block prev
							{ 
							local_variable_declaration prev
								modifiers 
									final 
								integral_type 
									int 
								variable_declarator prev
									identifier 
									= 
									ternary_expression i
										parenthesized_expression i
											( 
											binary_expression i
												identifier 
												== 
												decimal_integer_literal 
											) 
										? 
										binary_expression bodies
											field_access bodies
												identifier 
												. 
												identifier 
											- 
											decimal_integer_literal 
										: 
										binary_expression i
											identifier 
											- 
											decimal_integer_literal 
								; 
							local_variable_declaration next
								modifiers 
									final 
								integral_type 
									int 
								variable_declarator next
									identifier 
									= 
									ternary_expression i
										parenthesized_expression i
											( 
											binary_expression i
												identifier 
												== 
												binary_expression bodies
													field_access bodies
														identifier 
														. 
														identifier 
													- 
													decimal_integer_literal 
											) 
										? 
										decimal_integer_literal 
										: 
										binary_expression i
											identifier 
											+ 
											decimal_integer_literal 
								; 
							expression_statement d
								method_invocation d
									array_access d
										identifier 
										[ 
										identifier 
										] 
									. 
									identifier 
									argument_list positions
										( 
										field_access positions
											array_access positions
												identifier 
												[ 
												field_access bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
												] 
											. 
											identifier 
										) 
								; 
							expression_statement d
								method_invocation d
									array_access d
										identifier 
										[ 
										identifier 
										] 
									. 
									identifier 
									argument_list positions
										( 
										field_access positions
											array_access positions
												identifier 
												[ 
												field_access bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
												] 
											. 
											identifier 
										) 
								; 
							expression_statement dotMassSum
								assignment_expression dotMassSum
									identifier 
									+= 
									binary_expression d
										parenthesized_expression d
											( 
											method_invocation d
												array_access d
													identifier 
													[ 
													identifier 
													] 
												. 
												identifier 
												argument_list 
													( 
													) 
											) 
										/ 
										method_invocation bodies
											array_access bodies
												identifier 
												[ 
												identifier 
												] 
											. 
											identifier 
											argument_list 
												( 
												) 
								; 
							expression_statement crossMassSum
								assignment_expression crossMassSum
									identifier 
									+= 
									method_invocation Vec2
										identifier 
										. 
										identifier 
										argument_list velocities
											( 
											field_access velocities
												array_access velocities
													identifier 
													[ 
													field_access bodies
														array_access bodies
															identifier 
															[ 
															identifier 
															] 
														. 
														identifier 
													] 
												. 
												identifier 
											, 
											array_access d
												identifier 
												[ 
												identifier 
												] 
											) 
								; 
							} 
					local_variable_declaration lambda
						floating_point_type 
							float 
						variable_declarator lambda
							identifier 
							= 
							binary_expression crossMassSum
								binary_expression crossMassSum
									unary_expression 
										- 
										decimal_floating_point_literal 
									* 
									identifier 
								/ 
								identifier 
						; 
					line_comment 
					line_comment 
					line_comment 
					expression_statement m_impulse
						assignment_expression m_impulse
							identifier 
							+= 
							identifier 
						; 
					line_comment 
					for_statement i
						for 
						( 
						local_variable_declaration i
							integral_type 
								int 
							variable_declarator i
								identifier 
								= 
								decimal_integer_literal 
							; 
						binary_expression i
							identifier 
							< 
							field_access bodies
								identifier 
								. 
								identifier 
						; 
						update_expression i
							++ 
							identifier 
						) 
						block velocities
							{ 
							expression_statement velocities
								assignment_expression velocities
									field_access velocities
										field_access velocities
											array_access velocities
												identifier 
												[ 
												field_access bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
												] 
											. 
											identifier 
										. 
										identifier 
									+= 
									binary_expression bodies
										binary_expression bodies
											binary_expression bodies
												field_access bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
												* 
												field_access d
													array_access d
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
											* 
											decimal_floating_point_literal 
										* 
										identifier 
								; 
							expression_statement velocities
								assignment_expression velocities
									field_access velocities
										field_access velocities
											array_access velocities
												identifier 
												[ 
												field_access bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
												] 
											. 
											identifier 
										. 
										identifier 
									+= 
									binary_expression bodies
										binary_expression bodies
											binary_expression bodies
												field_access bodies
													array_access bodies
														identifier 
														[ 
														identifier 
														] 
													. 
													identifier 
												* 
												unary_expression d
													- 
													field_access d
														array_access d
															identifier 
															[ 
															identifier 
															] 
														. 
														identifier 
											* 
											decimal_floating_point_literal 
										* 
										identifier 
								; 
							} 
					} 
			block_comment 
			method_declaration getAnchorA
				modifiers Override
					marker_annotation Override
						@ 
						identifier 
					public 
				void_type 
				identifier 
				formal_parameters argOut
					( 
					formal_parameter argOut
						type_identifier 
						identifier 
					) 
				block 
					{ 
					} 
			block_comment 
			method_declaration getAnchorB
				modifiers Override
					marker_annotation Override
						@ 
						identifier 
					public 
				void_type 
				identifier 
				formal_parameters argOut
					( 
					formal_parameter argOut
						type_identifier 
						identifier 
					) 
				block 
					{ 
					} 
			block_comment 
			method_declaration getReactionForce
				modifiers Override
					marker_annotation Override
						@ 
						identifier 
					public 
				void_type 
				identifier 
				formal_parameters inv_dt
					( 
					formal_parameter inv_dt
						floating_point_type 
							float 
						identifier 
					, 
					formal_parameter argOut
						type_identifier 
						identifier 
					) 
				block 
					{ 
					} 
			block_comment 
			method_declaration getReactionTorque
				modifiers Override
					marker_annotation Override
						@ 
						identifier 
					public 
				floating_point_type 
					float 
				identifier 
				formal_parameters inv_dt
					( 
					formal_parameter inv_dt
						floating_point_type 
							float 
						identifier 
					) 
				block 
					{ 
					return_statement 
						return 
						decimal_integer_literal 
						; 
					} 
			} 

program org
	block_comment 
	package_declaration org
		package 
		scoped_identifier org
			scoped_identifier org
				identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		. 
		asterisk 
			* 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	block_comment 
	class_declaration World
		modifiers 
			public 
		class 
		identifier 
		class_body WORLD_POOL_SIZE
			{ 
			field_declaration WORLD_POOL_SIZE
				modifiers 
					public 
					static 
					final 
				integral_type 
					int 
				variable_declarator WORLD_POOL_SIZE
					identifier 
					= 
					decimal_integer_literal 
				; 
			field_declaration WORLD_POOL_CONTAINER_SIZE
				modifiers 
					public 
					static 
					final 
				integral_type 
					int 
				variable_declarator WORLD_POOL_CONTAINER_SIZE
					identifier 
					= 
					decimal_integer_literal 
				; 
			field_declaration NEW_FIXTURE
				modifiers 
					public 
					static 
					final 
				integral_type 
					int 
				variable_declarator NEW_FIXTURE
					identifier 
					= 
					hex_integer_literal 
				; 
			field_declaration LOCKED
				modifiers 
					public 
					static 
					final 
				integral_type 
					int 
				variable_declarator LOCKED
					identifier 
					= 
					hex_integer_literal 
				; 
			field_declaration CLEAR_FORCES
				modifiers 
					public 
					static 
					final 
				integral_type 
					int 
				variable_declarator CLEAR_FORCES
					identifier 
					= 
					hex_integer_literal 
				; 
			line_comment 
			field_declaration activeContacts
				modifiers 
					public 
				integral_type 
					int 
				variable_declarator activeContacts
					identifier 
					= 
					decimal_integer_literal 
				; 
			field_declaration contactPoolCount
				modifiers 
					public 
				integral_type 
					int 
				variable_declarator contactPoolCount
					identifier 
					= 
					decimal_integer_literal 
				; 
			field_declaration m_flags
				modifiers 
					protected 
				integral_type 
					int 
				variable_declarator m_flags
					identifier 
				; 
			field_declaration m_contactManager
				modifiers 
					protected 
				type_identifier 
				variable_declarator m_contactManager
					identifier 
				; 
			field_declaration m_bodyList
				modifiers 
					private 
				type_identifier 
				variable_declarator m_bodyList
					identifier 
				; 
			field_declaration m_jointList
				modifiers 
					private 
				type_identifier 
				variable_declarator m_jointList
					identifier 
				; 
			field_declaration m_bodyCount
				modifiers 
					private 
				integral_type 
					int 
				variable_declarator m_bodyCount
					identifier 
				; 
			field_declaration m_jointCount
				modifiers 
					private 
				integral_type 
					int 
				variable_declarator m_jointCount
					identifier 
				; 
			field_declaration m_gravity
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator m_gravity
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration m_allowSleep
				modifiers 
					private 
				boolean_type 
				variable_declarator m_allowSleep
					identifier 
				; 
			line_comment 
			field_declaration m_destructionListener
				modifiers 
					private 
				type_identifier 
				variable_declarator m_destructionListener
					identifier 
				; 
			field_declaration m_particleDestructionListener
				modifiers 
					private 
				type_identifier 
				variable_declarator m_particleDestructionListener
					identifier 
				; 
			field_declaration m_debugDraw
				modifiers 
					private 
				type_identifier 
				variable_declarator m_debugDraw
					identifier 
				; 
			field_declaration pool
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator pool
					identifier 
				; 
			block_comment 
			field_declaration m_inv_dt0
				modifiers 
					private 
				floating_point_type 
					float 
				variable_declarator m_inv_dt0
					identifier 
				; 
			line_comment 
			field_declaration m_warmStarting
				modifiers 
					private 
				boolean_type 
				variable_declarator m_warmStarting
					identifier 
				; 
			field_declaration m_continuousPhysics
				modifiers 
					private 
				boolean_type 
				variable_declarator m_continuousPhysics
					identifier 
				; 
			field_declaration m_subStepping
				modifiers 
					private 
				boolean_type 
				variable_declarator m_subStepping
					identifier 
				; 
			field_declaration m_stepComplete
				modifiers 
					private 
				boolean_type 
				variable_declarator m_stepComplete
					identifier 
				; 
			field_declaration m_profile
				modifiers 
					private 
				type_identifier 
				variable_declarator m_profile
					identifier 
				; 
			field_declaration m_particleSystem
				modifiers 
					private 
				type_identifier 
				variable_declarator m_particleSystem
					identifier 
				; 
			field_declaration contactStacks
				modifiers 
					private 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
						[ 
						] 
				variable_declarator contactStacks
					identifier 
					= 
					array_creation_expression ShapeType
						new 
						type_identifier 
						dimensions_expr ShapeType
							[ 
							field_access ShapeType
								method_invocation ShapeType
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								. 
								identifier 
							] 
						dimensions_expr ShapeType
							[ 
							field_access ShapeType
								method_invocation ShapeType
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								. 
								identifier 
							] 
				; 
			block_comment 
			constructor_declaration World
				modifiers 
					public 
				identifier 
				formal_parameters gravity
					( 
					formal_parameter gravity
						type_identifier 
						identifier 
					) 
				constructor_body gravity
					{ 
					explicit_constructor_invocation gravity
						this 
						argument_list gravity
							( 
							identifier 
							, 
							object_creation_expression WORLD_POOL_SIZE
								new 
								type_identifier 
								argument_list WORLD_POOL_SIZE
									( 
									identifier 
									, 
									identifier 
									) 
							) 
						; 
					} 
			block_comment 
			constructor_declaration World
				modifiers 
					public 
				identifier 
				formal_parameters gravity
					( 
					formal_parameter gravity
						type_identifier 
						identifier 
					, 
					formal_parameter pool
						type_identifier 
						identifier 
					) 
				constructor_body gravity
					{ 
					explicit_constructor_invocation gravity
						this 
						argument_list gravity
							( 
							identifier 
							, 
							identifier 
							, 
							object_creation_expression 
								new 
								type_identifier 
								argument_list 
									( 
									) 
							) 
						; 
					} 
			constructor_declaration World
				modifiers 
					public 
				identifier 
				formal_parameters gravity
					( 
					formal_parameter gravity
						type_identifier 
						identifier 
					, 
					formal_parameter pool
						type_identifier 
						identifier 
					, 
					formal_parameter strategy
						type_identifier 
						identifier 
					) 
				constructor_body gravity
					{ 
					explicit_constructor_invocation gravity
						this 
						argument_list gravity
							( 
							identifier 
							, 
							identifier 
							, 
							object_creation_expression strategy
								new 
								type_identifier 
								argument_list strategy
									( 
									identifier 
									) 
							) 
						; 
					} 
			constructor_declaration World
				modifiers 
					public 
				identifier 
				formal_parameters gravity
					( 
					formal_parameter gravity
						type_identifier 
						identifier 
					, 
					formal_parameter pool
						type_identifier 
						identifier 
					, 
					formal_parameter broadPhase
						type_identifier 
						identifier 
					) 
				constructor_body pool
					{ 
					expression_statement pool
						assignment_expression pool
							field_access pool
								this 
								. 
								identifier 
							= 
							identifier 
						; 
					expression_statement m_destructionListener
						assignment_expression m_destructionListener
							identifier 
							= 
							null_literal 
						; 
					expression_statement m_debugDraw
						assignment_expression m_debugDraw
							identifier 
							= 
							null_literal 
						; 
					expression_statement m_bodyList
						assignment_expression m_bodyList
							identifier 
							= 
							null_literal 
						; 
					expression_statement m_jointList
						assignment_expression m_jointList
							identifier 
							= 
							null_literal 
						; 
					expression_statement m_bodyCount
						assignment_expression m_bodyCount
							identifier 
							= 
							decimal_integer_literal 
						; 
					expression_statement m_jointCount
						assignment_expression m_jointCount
							identifier 
							= 
							decimal_integer_literal 
						; 
					expression_statement m_warmStarting
						assignment_expression m_warmStarting
							identifier 
							= 
							true 
						; 
					expression_statement m_continuousPhysics
						assignment_expression m_continuousPhysics
							identifier 
							= 
							true 
						; 
					expression_statement m_subStepping
						assignment_expression m_subStepping
							identifier 
							= 
							false 
						; 
					expression_statement m_stepComplete
						assignment_expression m_stepComplete
							identifier 
							= 
							true 
						; 
					expression_statement m_allowSleep
						assignment_expression m_allowSleep
							identifier 
							= 
							true 
						; 
					expression_statement m_gravity
						method_invocation m_gravity
							identifier 
							. 
							identifier 
							argument_list gravity
								( 
								identifier 
								) 
						; 
					expression_statement m_flags
						assignment_expression m_flags
							identifier 
							= 
							identifier 
						; 
					expression_statement m_inv_dt0
						assignment_expression m_inv_dt0
							identifier 
							= 
							decimal_floating_point_literal 
						; 
					expression_statement m_contactManager
						assignment_expression m_contactManager
							identifier 
							= 
							object_creation_expression broadPhase
								new 
								type_identifier 
								argument_list broadPhase
									( 
									this 
									, 
									identifier 
									) 
						; 
					expression_statement m_profile
						assignment_expression m_profile
							identifier 
							= 
							object_creation_expression 
								new 
								type_identifier 
								argument_list 
									( 
									) 
						; 
					expression_statement m_particleSystem
						assignment_expression m_particleSystem
							identifier 
							= 
							object_creation_expression 
								new 
								type_identifier 
								argument_list 
									( 
									this 
									) 
						; 
					expression_statement initializeRegisters
						method_invocation initializeRegisters
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			method_declaration setAllowSleep
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters flag
					( 
					formal_parameter flag
						boolean_type 
						identifier 
					) 
				block flag
					{ 
					if_statement flag
						if 
						parenthesized_expression flag
							( 
							binary_expression flag
								identifier 
								== 
								identifier 
							) 
						block 
							{ 
							return_statement 
								return 
								; 
							} 
					expression_statement m_allowSleep
						assignment_expression m_allowSleep
							identifier 
							= 
							identifier 
						; 
					if_statement m_allowSleep
						if 
						parenthesized_expression m_allowSleep
							( 
							binary_expression m_allowSleep
								identifier 
								== 
								false 
							) 
						block b
							{ 
							for_statement b
								for 
								( 
								local_variable_declaration b
									type_identifier 
									variable_declarator b
										identifier 
										= 
										identifier 
									; 
								binary_expression b
									identifier 
									!= 
									null_literal 
								; 
								assignment_expression b
									identifier 
									= 
									field_access b
										identifier 
										. 
										identifier 
								) 
								block b
									{ 
									expression_statement b
										method_invocation b
											identifier 
											. 
											identifier 
											argument_list 
												( 
												true 
												) 
										; 
									} 
							} 
					} 
			method_declaration setSubStepping
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters subStepping
					( 
					formal_parameter subStepping
						boolean_type 
						identifier 
					) 
				block m_subStepping
					{ 
					expression_statement m_subStepping
						assignment_expression m_subStepping
							field_access m_subStepping
								this 
								. 
								identifier 
							= 
							identifier 
						; 
					} 
			method_declaration isSubStepping
				modifiers 
					public 
				boolean_type 
				identifier 
				formal_parameters 
					( 
					) 
				block m_subStepping
					{ 
					return_statement m_subStepping
						return 
						identifier 
						; 
					} 
			method_declaration isAllowSleep
				modifiers 
					public 
				boolean_type 
				identifier 
				formal_parameters 
					( 
					) 
				block m_allowSleep
					{ 
					return_statement m_allowSleep
						return 
						identifier 
						; 
					} 
			method_declaration addType
				modifiers 
					private 
				void_type 
				identifier 
				formal_parameters creator
					( 
					formal_parameter creator
						generic_type 
							type_identifier 
							type_arguments 
								< 
								type_identifier 
								> 
						identifier 
					, 
					formal_parameter type1
						type_identifier 
						identifier 
					, 
					formal_parameter type2
						type_identifier 
						identifier 
					) 
				block register
					{ 
					local_variable_declaration register
						type_identifier 
						variable_declarator register
							identifier 
							= 
							object_creation_expression 
								new 
								type_identifier 
								argument_list 
									( 
									) 
						; 
					expression_statement register
						assignment_expression register
							field_access register
								identifier 
								. 
								identifier 
							= 
							identifier 
						; 
					expression_statement register
						assignment_expression register
							field_access register
								identifier 
								. 
								identifier 
							= 
							true 
						; 
					expression_statement contactStacks
						assignment_expression contactStacks
							array_access contactStacks
								array_access contactStacks
									identifier 
									[ 
									method_invocation type1
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
									] 
								[ 
								method_invocation type2
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								] 
							= 
							identifier 
						; 
					if_statement type1
						if 
						parenthesized_expression type1
							( 
							binary_expression type1
								identifier 
								!= 
								identifier 
							) 
						block register2
							{ 
							local_variable_declaration register2
								type_identifier 
								variable_declarator register2
									identifier 
									= 
									object_creation_expression 
										new 
										type_identifier 
										argument_list 
											( 
											) 
								; 
							expression_statement register2
								assignment_expression register2
									field_access register2
										identifier 
										. 
										identifier 
									= 
									identifier 
								; 
							expression_statement register2
								assignment_expression register2
									field_access register2
										identifier 
										. 
										identifier 
									= 
									false 
								; 
							expression_statement contactStacks
								assignment_expression contactStacks
									array_access contactStacks
										array_access contactStacks
											identifier 
											[ 
											method_invocation type2
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
											] 
										[ 
										method_invocation type1
											identifier 
											. 
											identifier 
											argument_list 
												( 
												) 
										] 
									= 
									identifier 
								; 
							} 
					} 
			method_declaration initializeRegisters
				modifiers 
					private 
				void_type 
				identifier 
				formal_parameters 
					( 
					) 
				block addType
					{ 
					expression_statement addType
						method_invocation addType
							identifier 
							argument_list pool
								( 
								method_invocation pool
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								, 
								field_access ShapeType
									identifier 
									. 
									identifier 
								, 
								field_access ShapeType
									identifier 
									. 
									identifier 
								) 
						; 
					expression_statement addType
						method_invocation addType
							identifier 
							argument_list pool
								( 
								method_invocation pool
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								, 
								field_access ShapeType
									identifier 
									. 
									identifier 
								, 
								field_access ShapeType
									identifier 
									. 
									identifier 
								) 
						; 
					expression_statement addType
						method_invocation addType
							identifier 
							argument_list pool
								( 
								method_invocation pool
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								, 
								field_access ShapeType
									identifier 
									. 
									identifier 
								, 
								field_access ShapeType
									identifier 
									. 
									identifier 
								) 
						; 
					expression_statement addType
						method_invocation addType
							identifier 
							argument_list pool
								( 
								method_invocation pool
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								, 
								field_access ShapeType
									identifier 
									. 
									identifier 
								, 
								field_access ShapeType
									identifier 
									. 
									identifier 
								) 
						; 
					expression_statement addType
						method_invocation addType
							identifier 
							argument_list pool
								( 
								method_invocation pool
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								, 
								field_access ShapeType
									identifier 
									. 
									identifier 
								, 
								field_access ShapeType
									identifier 
									. 
									identifier 
								) 
						; 
					expression_statement addType
						method_invocation addType
							identifier 
							argument_list pool
								( 
								method_invocation pool
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								, 
								field_access ShapeType
									identifier 
									. 
									identifier 
								, 
								field_access ShapeType
									identifier 
									. 
									identifier 
								) 
						; 
					expression_statement addType
						method_invocation addType
							identifier 
							argument_list pool
								( 
								method_invocation pool
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								, 
								field_access ShapeType
									identifier 
									. 
									identifier 
								, 
								field_access ShapeType
									identifier 
									. 
									identifier 
								) 
						; 
					} 
			method_declaration getDestructionListener
				modifiers 
					public 
				type_identifier 
				identifier 
				formal_parameters 
					( 
					) 
				block m_destructionListener
					{ 
					return_statement m_destructionListener
						return 
						identifier 
						; 
					} 
			method_declaration getParticleDestructionListener
				modifiers 
					public 
				type_identifier 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleDestructionListener
					{ 
					return_statement m_particleDestructionListener
						return 
						identifier 
						; 
					} 
			method_declaration setParticleDestructionListener
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters listener
					( 
					formal_parameter listener
						type_identifier 
						identifier 
					) 
				block m_particleDestructionListener
					{ 
					expression_statement m_particleDestructionListener
						assignment_expression m_particleDestructionListener
							identifier 
							= 
							identifier 
						; 
					} 
			method_declaration popContact
				modifiers 
					public 
				type_identifier 
				identifier 
				formal_parameters fixtureA
					( 
					formal_parameter fixtureA
						type_identifier 
						identifier 
					, 
					formal_parameter indexA
						integral_type 
							int 
						identifier 
					, 
					formal_parameter fixtureB
						type_identifier 
						identifier 
					, 
					formal_parameter indexB
						integral_type 
							int 
						identifier 
					) 
				block type1
					{ 
					local_variable_declaration type1
						modifiers 
							final 
						type_identifier 
						variable_declarator type1
							identifier 
							= 
							method_invocation fixtureA
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					local_variable_declaration type2
						modifiers 
							final 
						type_identifier 
						variable_declarator type2
							identifier 
							= 
							method_invocation fixtureB
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					local_variable_declaration reg
						modifiers 
							final 
						type_identifier 
						variable_declarator reg
							identifier 
							= 
							array_access contactStacks
								array_access contactStacks
									identifier 
									[ 
									method_invocation type1
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
									] 
								[ 
								method_invocation type2
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								] 
						; 
					if_statement reg
						if 
						parenthesized_expression reg
							( 
							binary_expression reg
								identifier 
								!= 
								null_literal 
							) 
						block reg
							{ 
							if_statement reg
								if 
								parenthesized_expression reg
									( 
									field_access reg
										identifier 
										. 
										identifier 
									) 
								block c
									{ 
									local_variable_declaration c
										type_identifier 
										variable_declarator c
											identifier 
											= 
											method_invocation reg
												field_access reg
													identifier 
													. 
													identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
										; 
									expression_statement c
										method_invocation c
											identifier 
											. 
											identifier 
											argument_list fixtureA
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									return_statement c
										return 
										identifier 
										; 
									} 
								else 
								block c
									{ 
									local_variable_declaration c
										type_identifier 
										variable_declarator c
											identifier 
											= 
											method_invocation reg
												field_access reg
													identifier 
													. 
													identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
										; 
									expression_statement c
										method_invocation c
											identifier 
											. 
											identifier 
											argument_list fixtureB
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									return_statement c
										return 
										identifier 
										; 
									} 
							} 
						else 
						block 
							{ 
							return_statement 
								return 
								null_literal 
								; 
							} 
					} 
			method_declaration pushContact
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters contact
					( 
					formal_parameter contact
						type_identifier 
						identifier 
					) 
				block fixtureA
					{ 
					local_variable_declaration fixtureA
						type_identifier 
						variable_declarator fixtureA
							identifier 
							= 
							method_invocation contact
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					local_variable_declaration fixtureB
						type_identifier 
						variable_declarator fixtureB
							identifier 
							= 
							method_invocation contact
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					if_statement contact
						if 
						parenthesized_expression contact
							( 
							binary_expression contact
								binary_expression contact
									binary_expression contact
										field_access contact
											field_access contact
												identifier 
												. 
												identifier 
											. 
											identifier 
										> 
										decimal_integer_literal 
									&& 
									unary_expression fixtureA
										! 
										method_invocation fixtureA
											identifier 
											. 
											identifier 
											argument_list 
												( 
												) 
								&& 
								unary_expression fixtureB
									! 
									method_invocation fixtureB
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
							) 
						block fixtureA
							{ 
							expression_statement fixtureA
								method_invocation fixtureA
									method_invocation fixtureA
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
									. 
									identifier 
									argument_list 
										( 
										true 
										) 
								; 
							expression_statement fixtureB
								method_invocation fixtureB
									method_invocation fixtureB
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
									. 
									identifier 
									argument_list 
										( 
										true 
										) 
								; 
							} 
					local_variable_declaration type1
						type_identifier 
						variable_declarator type1
							identifier 
							= 
							method_invocation fixtureA
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					local_variable_declaration type2
						type_identifier 
						variable_declarator type2
							identifier 
							= 
							method_invocation fixtureB
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					local_variable_declaration creator
						generic_type 
							type_identifier 
							type_arguments 
								< 
								type_identifier 
								> 
						variable_declarator creator
							identifier 
							= 
							field_access contactStacks
								array_access contactStacks
									array_access contactStacks
										identifier 
										[ 
										method_invocation type1
											identifier 
											. 
											identifier 
											argument_list 
												( 
												) 
										] 
									[ 
									method_invocation type2
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
									] 
								. 
								identifier 
						; 
					expression_statement creator
						method_invocation creator
							identifier 
							. 
							identifier 
							argument_list contact
								( 
								identifier 
								) 
						; 
					} 
			method_declaration getPool
				modifiers 
					public 
				type_identifier 
				identifier 
				formal_parameters 
					( 
					) 
				block pool
					{ 
					return_statement pool
						return 
						identifier 
						; 
					} 
			block_comment 
			method_declaration setDestructionListener
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters listener
					( 
					formal_parameter listener
						type_identifier 
						identifier 
					) 
				block m_destructionListener
					{ 
					expression_statement m_destructionListener
						assignment_expression m_destructionListener
							identifier 
							= 
							identifier 
						; 
					} 
			block_comment 
			method_declaration setContactFilter
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters filter
					( 
					formal_parameter filter
						type_identifier 
						identifier 
					) 
				block m_contactManager
					{ 
					expression_statement m_contactManager
						assignment_expression m_contactManager
							field_access m_contactManager
								identifier 
								. 
								identifier 
							= 
							identifier 
						; 
					} 
			block_comment 
			method_declaration setContactListener
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters listener
					( 
					formal_parameter listener
						type_identifier 
						identifier 
					) 
				block m_contactManager
					{ 
					expression_statement m_contactManager
						assignment_expression m_contactManager
							field_access m_contactManager
								identifier 
								. 
								identifier 
							= 
							identifier 
						; 
					} 
			block_comment 
			method_declaration setDebugDraw
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters debugDraw
					( 
					formal_parameter debugDraw
						type_identifier 
						identifier 
					) 
				block m_debugDraw
					{ 
					expression_statement m_debugDraw
						assignment_expression m_debugDraw
							identifier 
							= 
							identifier 
						; 
					} 
			block_comment 
			method_declaration createBody
				modifiers 
					public 
				type_identifier 
				identifier 
				formal_parameters def
					( 
					formal_parameter def
						type_identifier 
						identifier 
					) 
				block isLocked
					{ 
					assert_statement isLocked
						assert 
						parenthesized_expression isLocked
							( 
							binary_expression isLocked
								method_invocation isLocked
									identifier 
									argument_list 
										( 
										) 
								== 
								false 
							) 
						; 
					if_statement isLocked
						if 
						parenthesized_expression isLocked
							( 
							method_invocation isLocked
								identifier 
								argument_list 
									( 
									) 
							) 
						block 
							{ 
							return_statement 
								return 
								null_literal 
								; 
							} 
					line_comment 
					local_variable_declaration b
						type_identifier 
						variable_declarator b
							identifier 
							= 
							object_creation_expression def
								new 
								type_identifier 
								argument_list def
									( 
									identifier 
									, 
									this 
									) 
						; 
					line_comment 
					expression_statement b
						assignment_expression b
							field_access b
								identifier 
								. 
								identifier 
							= 
							null_literal 
						; 
					expression_statement b
						assignment_expression b
							field_access b
								identifier 
								. 
								identifier 
							= 
							identifier 
						; 
					if_statement m_bodyList
						if 
						parenthesized_expression m_bodyList
							( 
							binary_expression m_bodyList
								identifier 
								!= 
								null_literal 
							) 
						block m_bodyList
							{ 
							expression_statement m_bodyList
								assignment_expression m_bodyList
									field_access m_bodyList
										identifier 
										. 
										identifier 
									= 
									identifier 
								; 
							} 
					expression_statement m_bodyList
						assignment_expression m_bodyList
							identifier 
							= 
							identifier 
						; 
					expression_statement m_bodyCount
						update_expression m_bodyCount
							++ 
							identifier 
						; 
					return_statement b
						return 
						identifier 
						; 
					} 
			block_comment 
			method_declaration destroyBody
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters body
					( 
					formal_parameter body
						type_identifier 
						identifier 
					) 
				block m_bodyCount
					{ 
					assert_statement m_bodyCount
						assert 
						parenthesized_expression m_bodyCount
							( 
							binary_expression m_bodyCount
								identifier 
								> 
								decimal_integer_literal 
							) 
						; 
					assert_statement isLocked
						assert 
						parenthesized_expression isLocked
							( 
							binary_expression isLocked
								method_invocation isLocked
									identifier 
									argument_list 
										( 
										) 
								== 
								false 
							) 
						; 
					if_statement isLocked
						if 
						parenthesized_expression isLocked
							( 
							method_invocation isLocked
								identifier 
								argument_list 
									( 
									) 
							) 
						block 
							{ 
							return_statement 
								return 
								; 
							} 
					line_comment 
					local_variable_declaration je
						type_identifier 
						variable_declarator je
							identifier 
							= 
							field_access body
								identifier 
								. 
								identifier 
						; 
					while_statement je
						while 
						parenthesized_expression je
							( 
							binary_expression je
								identifier 
								!= 
								null_literal 
							) 
						block je0
							{ 
							local_variable_declaration je0
								type_identifier 
								variable_declarator je0
									identifier 
									= 
									identifier 
								; 
							expression_statement je
								assignment_expression je
									identifier 
									= 
									field_access je
										identifier 
										. 
										identifier 
								; 
							if_statement m_destructionListener
								if 
								parenthesized_expression m_destructionListener
									( 
									binary_expression m_destructionListener
										identifier 
										!= 
										null_literal 
									) 
								block m_destructionListener
									{ 
									expression_statement m_destructionListener
										method_invocation m_destructionListener
											identifier 
											. 
											identifier 
											argument_list je0
												( 
												field_access je0
													identifier 
													. 
													identifier 
												) 
										; 
									} 
							expression_statement destroyJoint
								method_invocation destroyJoint
									identifier 
									argument_list je0
										( 
										field_access je0
											identifier 
											. 
											identifier 
										) 
								; 
							expression_statement body
								assignment_expression body
									field_access body
										identifier 
										. 
										identifier 
									= 
									identifier 
								; 
							} 
					expression_statement body
						assignment_expression body
							field_access body
								identifier 
								. 
								identifier 
							= 
							null_literal 
						; 
					line_comment 
					local_variable_declaration ce
						type_identifier 
						variable_declarator ce
							identifier 
							= 
							field_access body
								identifier 
								. 
								identifier 
						; 
					while_statement ce
						while 
						parenthesized_expression ce
							( 
							binary_expression ce
								identifier 
								!= 
								null_literal 
							) 
						block ce0
							{ 
							local_variable_declaration ce0
								type_identifier 
								variable_declarator ce0
									identifier 
									= 
									identifier 
								; 
							expression_statement ce
								assignment_expression ce
									identifier 
									= 
									field_access ce
										identifier 
										. 
										identifier 
								; 
							expression_statement m_contactManager
								method_invocation m_contactManager
									identifier 
									. 
									identifier 
									argument_list ce0
										( 
										field_access ce0
											identifier 
											. 
											identifier 
										) 
								; 
							} 
					expression_statement body
						assignment_expression body
							field_access body
								identifier 
								. 
								identifier 
							= 
							null_literal 
						; 
					local_variable_declaration f
						type_identifier 
						variable_declarator f
							identifier 
							= 
							field_access body
								identifier 
								. 
								identifier 
						; 
					while_statement f
						while 
						parenthesized_expression f
							( 
							binary_expression f
								identifier 
								!= 
								null_literal 
							) 
						block f0
							{ 
							local_variable_declaration f0
								type_identifier 
								variable_declarator f0
									identifier 
									= 
									identifier 
								; 
							expression_statement f
								assignment_expression f
									identifier 
									= 
									field_access f
										identifier 
										. 
										identifier 
								; 
							if_statement m_destructionListener
								if 
								parenthesized_expression m_destructionListener
									( 
									binary_expression m_destructionListener
										identifier 
										!= 
										null_literal 
									) 
								block m_destructionListener
									{ 
									expression_statement m_destructionListener
										method_invocation m_destructionListener
											identifier 
											. 
											identifier 
											argument_list f0
												( 
												identifier 
												) 
										; 
									} 
							expression_statement f0
								method_invocation f0
									identifier 
									. 
									identifier 
									argument_list m_contactManager
										( 
										field_access m_contactManager
											identifier 
											. 
											identifier 
										) 
								; 
							expression_statement f0
								method_invocation f0
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								; 
							line_comment 
							expression_statement body
								assignment_expression body
									field_access body
										identifier 
										. 
										identifier 
									= 
									identifier 
								; 
							expression_statement body
								assignment_expression body
									field_access body
										identifier 
										. 
										identifier 
									-= 
									decimal_integer_literal 
								; 
							} 
					expression_statement body
						assignment_expression body
							field_access body
								identifier 
								. 
								identifier 
							= 
							null_literal 
						; 
					expression_statement body
						assignment_expression body
							field_access body
								identifier 
								. 
								identifier 
							= 
							decimal_integer_literal 
						; 
					line_comment 
					if_statement body
						if 
						parenthesized_expression body
							( 
							binary_expression body
								field_access body
									identifier 
									. 
									identifier 
								!= 
								null_literal 
							) 
						block body
							{ 
							expression_statement body
								assignment_expression body
									field_access body
										field_access body
											identifier 
											. 
											identifier 
										. 
										identifier 
									= 
									field_access body
										identifier 
										. 
										identifier 
								; 
							} 
					if_statement body
						if 
						parenthesized_expression body
							( 
							binary_expression body
								field_access body
									identifier 
									. 
									identifier 
								!= 
								null_literal 
							) 
						block body
							{ 
							expression_statement body
								assignment_expression body
									field_access body
										field_access body
											identifier 
											. 
											identifier 
										. 
										identifier 
									= 
									field_access body
										identifier 
										. 
										identifier 
								; 
							} 
					if_statement body
						if 
						parenthesized_expression body
							( 
							binary_expression body
								identifier 
								== 
								identifier 
							) 
						block m_bodyList
							{ 
							expression_statement m_bodyList
								assignment_expression m_bodyList
									identifier 
									= 
									field_access body
										identifier 
										. 
										identifier 
								; 
							} 
					expression_statement m_bodyCount
						update_expression m_bodyCount
							-- 
							identifier 
						; 
					line_comment 
					} 
			block_comment 
			method_declaration createJoint
				modifiers 
					public 
				type_identifier 
				identifier 
				formal_parameters def
					( 
					formal_parameter def
						type_identifier 
						identifier 
					) 
				block isLocked
					{ 
					assert_statement isLocked
						assert 
						parenthesized_expression isLocked
							( 
							binary_expression isLocked
								method_invocation isLocked
									identifier 
									argument_list 
										( 
										) 
								== 
								false 
							) 
						; 
					if_statement isLocked
						if 
						parenthesized_expression isLocked
							( 
							method_invocation isLocked
								identifier 
								argument_list 
									( 
									) 
							) 
						block 
							{ 
							return_statement 
								return 
								null_literal 
								; 
							} 
					local_variable_declaration j
						type_identifier 
						variable_declarator j
							identifier 
							= 
							method_invocation Joint
								identifier 
								. 
								identifier 
								argument_list def
									( 
									this 
									, 
									identifier 
									) 
						; 
					line_comment 
					expression_statement j
						assignment_expression j
							field_access j
								identifier 
								. 
								identifier 
							= 
							null_literal 
						; 
					expression_statement j
						assignment_expression j
							field_access j
								identifier 
								. 
								identifier 
							= 
							identifier 
						; 
					if_statement m_jointList
						if 
						parenthesized_expression m_jointList
							( 
							binary_expression m_jointList
								identifier 
								!= 
								null_literal 
							) 
						block m_jointList
							{ 
							expression_statement m_jointList
								assignment_expression m_jointList
									field_access m_jointList
										identifier 
										. 
										identifier 
									= 
									identifier 
								; 
							} 
					expression_statement m_jointList
						assignment_expression m_jointList
							identifier 
							= 
							identifier 
						; 
					expression_statement m_jointCount
						update_expression m_jointCount
							++ 
							identifier 
						; 
					line_comment 
					expression_statement j
						assignment_expression j
							field_access j
								field_access j
									identifier 
									. 
									identifier 
								. 
								identifier 
							= 
							identifier 
						; 
					expression_statement j
						assignment_expression j
							field_access j
								field_access j
									identifier 
									. 
									identifier 
								. 
								identifier 
							= 
							method_invocation j
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					expression_statement j
						assignment_expression j
							field_access j
								field_access j
									identifier 
									. 
									identifier 
								. 
								identifier 
							= 
							null_literal 
						; 
					expression_statement j
						assignment_expression j
							field_access j
								field_access j
									identifier 
									. 
									identifier 
								. 
								identifier 
							= 
							field_access j
								method_invocation j
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								. 
								identifier 
						; 
					if_statement j
						if 
						parenthesized_expression j
							( 
							binary_expression j
								field_access j
									method_invocation j
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
									. 
									identifier 
								!= 
								null_literal 
							) 
						block j
							{ 
							expression_statement j
								assignment_expression j
									field_access j
										field_access j
											method_invocation j
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
											. 
											identifier 
										. 
										identifier 
									= 
									field_access j
										identifier 
										. 
										identifier 
								; 
							} 
					expression_statement j
						assignment_expression j
							field_access j
								method_invocation j
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								. 
								identifier 
							= 
							field_access j
								identifier 
								. 
								identifier 
						; 
					expression_statement j
						assignment_expression j
							field_access j
								field_access j
									identifier 
									. 
									identifier 
								. 
								identifier 
							= 
							identifier 
						; 
					expression_statement j
						assignment_expression j
							field_access j
								field_access j
									identifier 
									. 
									identifier 
								. 
								identifier 
							= 
							method_invocation j
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					expression_statement j
						assignment_expression j
							field_access j
								field_access j
									identifier 
									. 
									identifier 
								. 
								identifier 
							= 
							null_literal 
						; 
					expression_statement j
						assignment_expression j
							field_access j
								field_access j
									identifier 
									. 
									identifier 
								. 
								identifier 
							= 
							field_access j
								method_invocation j
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								. 
								identifier 
						; 
					if_statement j
						if 
						parenthesized_expression j
							( 
							binary_expression j
								field_access j
									method_invocation j
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
									. 
									identifier 
								!= 
								null_literal 
							) 
						block j
							{ 
							expression_statement j
								assignment_expression j
									field_access j
										field_access j
											method_invocation j
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
											. 
											identifier 
										. 
										identifier 
									= 
									field_access j
										identifier 
										. 
										identifier 
								; 
							} 
					expression_statement j
						assignment_expression j
							field_access j
								method_invocation j
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								. 
								identifier 
							= 
							field_access j
								identifier 
								. 
								identifier 
						; 
					local_variable_declaration bodyA
						type_identifier 
						variable_declarator bodyA
							identifier 
							= 
							field_access def
								identifier 
								. 
								identifier 
						; 
					local_variable_declaration bodyB
						type_identifier 
						variable_declarator bodyB
							identifier 
							= 
							field_access def
								identifier 
								. 
								identifier 
						; 
					line_comment 
					if_statement def
						if 
						parenthesized_expression def
							( 
							binary_expression def
								field_access def
									identifier 
									. 
									identifier 
								== 
								false 
							) 
						block edge
							{ 
							local_variable_declaration edge
								type_identifier 
								variable_declarator edge
									identifier 
									= 
									method_invocation bodyB
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
								; 
							while_statement edge
								while 
								parenthesized_expression edge
									( 
									binary_expression edge
										identifier 
										!= 
										null_literal 
									) 
								block edge
									{ 
									if_statement edge
										if 
										parenthesized_expression edge
											( 
											binary_expression edge
												field_access edge
													identifier 
													. 
													identifier 
												== 
												identifier 
											) 
										block edge
											{ 
											line_comment 
											line_comment 
											expression_statement edge
												method_invocation edge
													field_access edge
														identifier 
														. 
														identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
												; 
											} 
									expression_statement edge
										assignment_expression edge
											identifier 
											= 
											field_access edge
												identifier 
												. 
												identifier 
										; 
									} 
							} 
					line_comment 
					return_statement j
						return 
						identifier 
						; 
					} 
			block_comment 
			method_declaration destroyJoint
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters j
					( 
					formal_parameter j
						type_identifier 
						identifier 
					) 
				block isLocked
					{ 
					assert_statement isLocked
						assert 
						parenthesized_expression isLocked
							( 
							binary_expression isLocked
								method_invocation isLocked
									identifier 
									argument_list 
										( 
										) 
								== 
								false 
							) 
						; 
					if_statement isLocked
						if 
						parenthesized_expression isLocked
							( 
							method_invocation isLocked
								identifier 
								argument_list 
									( 
									) 
							) 
						block 
							{ 
							return_statement 
								return 
								; 
							} 
					local_variable_declaration collideConnected
						boolean_type 
						variable_declarator collideConnected
							identifier 
							= 
							method_invocation j
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					line_comment 
					if_statement j
						if 
						parenthesized_expression j
							( 
							binary_expression j
								field_access j
									identifier 
									. 
									identifier 
								!= 
								null_literal 
							) 
						block j
							{ 
							expression_statement j
								assignment_expression j
									field_access j
										field_access j
											identifier 
											. 
											identifier 
										. 
										identifier 
									= 
									field_access j
										identifier 
										. 
										identifier 
								; 
							} 
					if_statement j
						if 
						parenthesized_expression j
							( 
							binary_expression j
								field_access j
									identifier 
									. 
									identifier 
								!= 
								null_literal 
							) 
						block j
							{ 
							expression_statement j
								assignment_expression j
									field_access j
										field_access j
											identifier 
											. 
											identifier 
										. 
										identifier 
									= 
									field_access j
										identifier 
										. 
										identifier 
								; 
							} 
					if_statement j
						if 
						parenthesized_expression j
							( 
							binary_expression j
								identifier 
								== 
								identifier 
							) 
						block m_jointList
							{ 
							expression_statement m_jointList
								assignment_expression m_jointList
									identifier 
									= 
									field_access j
										identifier 
										. 
										identifier 
								; 
							} 
					line_comment 
					local_variable_declaration bodyA
						type_identifier 
						variable_declarator bodyA
							identifier 
							= 
							method_invocation j
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					local_variable_declaration bodyB
						type_identifier 
						variable_declarator bodyB
							identifier 
							= 
							method_invocation j
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					line_comment 
					expression_statement bodyA
						method_invocation bodyA
							identifier 
							. 
							identifier 
							argument_list 
								( 
								true 
								) 
						; 
					expression_statement bodyB
						method_invocation bodyB
							identifier 
							. 
							identifier 
							argument_list 
								( 
								true 
								) 
						; 
					line_comment 
					if_statement j
						if 
						parenthesized_expression j
							( 
							binary_expression j
								field_access j
									field_access j
										identifier 
										. 
										identifier 
									. 
									identifier 
								!= 
								null_literal 
							) 
						block j
							{ 
							expression_statement j
								assignment_expression j
									field_access j
										field_access j
											field_access j
												identifier 
												. 
												identifier 
											. 
											identifier 
										. 
										identifier 
									= 
									field_access j
										field_access j
											identifier 
											. 
											identifier 
										. 
										identifier 
								; 
							} 
					if_statement j
						if 
						parenthesized_expression j
							( 
							binary_expression j
								field_access j
									field_access j
										identifier 
										. 
										identifier 
									. 
									identifier 
								!= 
								null_literal 
							) 
						block j
							{ 
							expression_statement j
								assignment_expression j
									field_access j
										field_access j
											field_access j
												identifier 
												. 
												identifier 
											. 
											identifier 
										. 
										identifier 
									= 
									field_access j
										field_access j
											identifier 
											. 
											identifier 
										. 
										identifier 
								; 
							} 
					if_statement j
						if 
						parenthesized_expression j
							( 
							binary_expression j
								field_access j
									identifier 
									. 
									identifier 
								== 
								field_access bodyA
									identifier 
									. 
									identifier 
							) 
						block bodyA
							{ 
							expression_statement bodyA
								assignment_expression bodyA
									field_access bodyA
										identifier 
										. 
										identifier 
									= 
									field_access j
										field_access j
											identifier 
											. 
											identifier 
										. 
										identifier 
								; 
							} 
					expression_statement j
						assignment_expression j
							field_access j
								field_access j
									identifier 
									. 
									identifier 
								. 
								identifier 
							= 
							null_literal 
						; 
					expression_statement j
						assignment_expression j
							field_access j
								field_access j
									identifier 
									. 
									identifier 
								. 
								identifier 
							= 
							null_literal 
						; 
					line_comment 
					if_statement j
						if 
						parenthesized_expression j
							( 
							binary_expression j
								field_access j
									field_access j
										identifier 
										. 
										identifier 
									. 
									identifier 
								!= 
								null_literal 
							) 
						block j
							{ 
							expression_statement j
								assignment_expression j
									field_access j
										field_access j
											field_access j
												identifier 
												. 
												identifier 
											. 
											identifier 
										. 
										identifier 
									= 
									field_access j
										field_access j
											identifier 
											. 
											identifier 
										. 
										identifier 
								; 
							} 
					if_statement j
						if 
						parenthesized_expression j
							( 
							binary_expression j
								field_access j
									field_access j
										identifier 
										. 
										identifier 
									. 
									identifier 
								!= 
								null_literal 
							) 
						block j
							{ 
							expression_statement j
								assignment_expression j
									field_access j
										field_access j
											field_access j
												identifier 
												. 
												identifier 
											. 
											identifier 
										. 
										identifier 
									= 
									field_access j
										field_access j
											identifier 
											. 
											identifier 
										. 
										identifier 
								; 
							} 
					if_statement j
						if 
						parenthesized_expression j
							( 
							binary_expression j
								field_access j
									identifier 
									. 
									identifier 
								== 
								field_access bodyB
									identifier 
									. 
									identifier 
							) 
						block bodyB
							{ 
							expression_statement bodyB
								assignment_expression bodyB
									field_access bodyB
										identifier 
										. 
										identifier 
									= 
									field_access j
										field_access j
											identifier 
											. 
											identifier 
										. 
										identifier 
								; 
							} 
					expression_statement j
						assignment_expression j
							field_access j
								field_access j
									identifier 
									. 
									identifier 
								. 
								identifier 
							= 
							null_literal 
						; 
					expression_statement j
						assignment_expression j
							field_access j
								field_access j
									identifier 
									. 
									identifier 
								. 
								identifier 
							= 
							null_literal 
						; 
					expression_statement Joint
						method_invocation Joint
							identifier 
							. 
							identifier 
							argument_list j
								( 
								identifier 
								) 
						; 
					assert_statement m_jointCount
						assert 
						parenthesized_expression m_jointCount
							( 
							binary_expression m_jointCount
								identifier 
								> 
								decimal_integer_literal 
							) 
						; 
					expression_statement m_jointCount
						update_expression m_jointCount
							-- 
							identifier 
						; 
					line_comment 
					if_statement collideConnected
						if 
						parenthesized_expression collideConnected
							( 
							binary_expression collideConnected
								identifier 
								== 
								false 
							) 
						block edge
							{ 
							local_variable_declaration edge
								type_identifier 
								variable_declarator edge
									identifier 
									= 
									method_invocation bodyB
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
								; 
							while_statement edge
								while 
								parenthesized_expression edge
									( 
									binary_expression edge
										identifier 
										!= 
										null_literal 
									) 
								block edge
									{ 
									if_statement edge
										if 
										parenthesized_expression edge
											( 
											binary_expression edge
												field_access edge
													identifier 
													. 
													identifier 
												== 
												identifier 
											) 
										block edge
											{ 
											line_comment 
											line_comment 
											expression_statement edge
												method_invocation edge
													field_access edge
														identifier 
														. 
														identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
												; 
											} 
									expression_statement edge
										assignment_expression edge
											identifier 
											= 
											field_access edge
												identifier 
												. 
												identifier 
										; 
									} 
							} 
					} 
			line_comment 
			field_declaration step
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator step
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration stepTimer
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator stepTimer
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration tempTimer
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator tempTimer
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			block_comment 
			method_declaration step
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters dt
					( 
					formal_parameter dt
						floating_point_type 
							float 
						identifier 
					, 
					formal_parameter velocityIterations
						integral_type 
							int 
						identifier 
					, 
					formal_parameter positionIterations
						integral_type 
							int 
						identifier 
					) 
				block stepTimer
					{ 
					expression_statement stepTimer
						method_invocation stepTimer
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					expression_statement tempTimer
						method_invocation tempTimer
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					line_comment 
					line_comment 
					if_statement m_flags
						if 
						parenthesized_expression m_flags
							( 
							binary_expression m_flags
								parenthesized_expression m_flags
									( 
									binary_expression m_flags
										identifier 
										& 
										identifier 
									) 
								== 
								identifier 
							) 
						block m_contactManager
							{ 
							line_comment 
							expression_statement m_contactManager
								method_invocation m_contactManager
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								; 
							expression_statement m_flags
								assignment_expression m_flags
									identifier 
									&= 
									unary_expression NEW_FIXTURE
										~ 
										identifier 
								; 
							} 
					expression_statement m_flags
						assignment_expression m_flags
							identifier 
							|= 
							identifier 
						; 
					expression_statement step
						assignment_expression step
							field_access step
								identifier 
								. 
								identifier 
							= 
							identifier 
						; 
					expression_statement step
						assignment_expression step
							field_access step
								identifier 
								. 
								identifier 
							= 
							identifier 
						; 
					expression_statement step
						assignment_expression step
							field_access step
								identifier 
								. 
								identifier 
							= 
							identifier 
						; 
					if_statement dt
						if 
						parenthesized_expression dt
							( 
							binary_expression dt
								identifier 
								> 
								decimal_floating_point_literal 
							) 
						block step
							{ 
							expression_statement step
								assignment_expression step
									field_access step
										identifier 
										. 
										identifier 
									= 
									binary_expression dt
										decimal_floating_point_literal 
										/ 
										identifier 
								; 
							} 
						else 
						block step
							{ 
							expression_statement step
								assignment_expression step
									field_access step
										identifier 
										. 
										identifier 
									= 
									decimal_floating_point_literal 
								; 
							} 
					expression_statement step
						assignment_expression step
							field_access step
								identifier 
								. 
								identifier 
							= 
							binary_expression m_inv_dt0
								identifier 
								* 
								identifier 
						; 
					expression_statement step
						assignment_expression step
							field_access step
								identifier 
								. 
								identifier 
							= 
							identifier 
						; 
					expression_statement m_profile
						method_invocation m_profile
							field_access m_profile
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list tempTimer
								( 
								method_invocation tempTimer
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								) 
						; 
					line_comment 
					expression_statement tempTimer
						method_invocation tempTimer
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					expression_statement m_contactManager
						method_invocation m_contactManager
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					expression_statement m_profile
						method_invocation m_profile
							field_access m_profile
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list tempTimer
								( 
								method_invocation tempTimer
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								) 
						; 
					line_comment 
					if_statement m_stepComplete
						if 
						parenthesized_expression m_stepComplete
							( 
							binary_expression m_stepComplete
								identifier 
								&& 
								binary_expression step
									field_access step
										identifier 
										. 
										identifier 
									> 
									decimal_floating_point_literal 
							) 
						block tempTimer
							{ 
							expression_statement tempTimer
								method_invocation tempTimer
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								; 
							expression_statement m_particleSystem
								method_invocation m_particleSystem
									identifier 
									. 
									identifier 
									argument_list step
										( 
										identifier 
										) 
								; 
							line_comment 
							expression_statement m_profile
								method_invocation m_profile
									field_access m_profile
										identifier 
										. 
										identifier 
									. 
									identifier 
									argument_list tempTimer
										( 
										method_invocation tempTimer
											identifier 
											. 
											identifier 
											argument_list 
												( 
												) 
										) 
								; 
							expression_statement tempTimer
								method_invocation tempTimer
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								; 
							expression_statement solve
								method_invocation solve
									identifier 
									argument_list step
										( 
										identifier 
										) 
								; 
							expression_statement m_profile
								method_invocation m_profile
									field_access m_profile
										identifier 
										. 
										identifier 
									. 
									identifier 
									argument_list tempTimer
										( 
										method_invocation tempTimer
											identifier 
											. 
											identifier 
											argument_list 
												( 
												) 
										) 
								; 
							} 
					line_comment 
					if_statement m_continuousPhysics
						if 
						parenthesized_expression m_continuousPhysics
							( 
							binary_expression m_continuousPhysics
								identifier 
								&& 
								binary_expression step
									field_access step
										identifier 
										. 
										identifier 
									> 
									decimal_floating_point_literal 
							) 
						block tempTimer
							{ 
							expression_statement tempTimer
								method_invocation tempTimer
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								; 
							expression_statement solveTOI
								method_invocation solveTOI
									identifier 
									argument_list step
										( 
										identifier 
										) 
								; 
							expression_statement m_profile
								method_invocation m_profile
									field_access m_profile
										identifier 
										. 
										identifier 
									. 
									identifier 
									argument_list tempTimer
										( 
										method_invocation tempTimer
											identifier 
											. 
											identifier 
											argument_list 
												( 
												) 
										) 
								; 
							} 
					if_statement step
						if 
						parenthesized_expression step
							( 
							binary_expression step
								field_access step
									identifier 
									. 
									identifier 
								> 
								decimal_floating_point_literal 
							) 
						block m_inv_dt0
							{ 
							expression_statement m_inv_dt0
								assignment_expression m_inv_dt0
									identifier 
									= 
									field_access step
										identifier 
										. 
										identifier 
								; 
							} 
					if_statement m_flags
						if 
						parenthesized_expression m_flags
							( 
							binary_expression m_flags
								parenthesized_expression m_flags
									( 
									binary_expression m_flags
										identifier 
										& 
										identifier 
									) 
								== 
								identifier 
							) 
						block clearForces
							{ 
							expression_statement clearForces
								method_invocation clearForces
									identifier 
									argument_list 
										( 
										) 
								; 
							} 
					expression_statement m_flags
						assignment_expression m_flags
							identifier 
							&= 
							unary_expression LOCKED
								~ 
								identifier 
						; 
					line_comment 
					expression_statement m_profile
						method_invocation m_profile
							field_access m_profile
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list stepTimer
								( 
								method_invocation stepTimer
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								) 
						; 
					} 
			block_comment 
			method_declaration clearForces
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters 
					( 
					) 
				block body
					{ 
					for_statement body
						for 
						( 
						local_variable_declaration body
							type_identifier 
							variable_declarator body
								identifier 
								= 
								identifier 
							; 
						binary_expression body
							identifier 
							!= 
							null_literal 
						; 
						assignment_expression body
							identifier 
							= 
							method_invocation body
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						) 
						block body
							{ 
							expression_statement body
								method_invocation body
									field_access body
										identifier 
										. 
										identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								; 
							expression_statement body
								assignment_expression body
									field_access body
										identifier 
										. 
										identifier 
									= 
									decimal_floating_point_literal 
								; 
							} 
					} 
			field_declaration color
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator color
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration xf
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator xf
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration cA
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator cA
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration cB
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator cB
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration avs
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator avs
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			block_comment 
			method_declaration drawDebugData
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters 
					( 
					) 
				block m_debugDraw
					{ 
					if_statement m_debugDraw
						if 
						parenthesized_expression m_debugDraw
							( 
							binary_expression m_debugDraw
								identifier 
								== 
								null_literal 
							) 
						block 
							{ 
							return_statement 
								return 
								; 
							} 
					local_variable_declaration flags
						integral_type 
							int 
						variable_declarator flags
							identifier 
							= 
							method_invocation m_debugDraw
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					local_variable_declaration wireframe
						boolean_type 
						variable_declarator wireframe
							identifier 
							= 
							binary_expression flags
								parenthesized_expression flags
									( 
									binary_expression flags
										identifier 
										& 
										field_access DebugDraw
											identifier 
											. 
											identifier 
									) 
								!= 
								decimal_integer_literal 
						; 
					if_statement flags
						if 
						parenthesized_expression flags
							( 
							binary_expression flags
								parenthesized_expression flags
									( 
									binary_expression flags
										identifier 
										& 
										field_access DebugDraw
											identifier 
											. 
											identifier 
									) 
								!= 
								decimal_integer_literal 
							) 
						block b
							{ 
							for_statement b
								for 
								( 
								local_variable_declaration b
									type_identifier 
									variable_declarator b
										identifier 
										= 
										identifier 
									; 
								binary_expression b
									identifier 
									!= 
									null_literal 
								; 
								assignment_expression b
									identifier 
									= 
									method_invocation b
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
								) 
								block xf
									{ 
									expression_statement xf
										method_invocation xf
											identifier 
											. 
											identifier 
											argument_list b
												( 
												method_invocation b
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
												) 
										; 
									for_statement f
										for 
										( 
										local_variable_declaration f
											type_identifier 
											variable_declarator f
												identifier 
												= 
												method_invocation b
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
											; 
										binary_expression f
											identifier 
											!= 
											null_literal 
										; 
										assignment_expression f
											identifier 
											= 
											method_invocation f
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
										) 
										block b
											{ 
											if_statement b
												if 
												parenthesized_expression b
													( 
													binary_expression b
														method_invocation b
															identifier 
															. 
															identifier 
															argument_list 
																( 
																) 
														== 
														false 
													) 
												block color
													{ 
													expression_statement color
														method_invocation color
															identifier 
															. 
															identifier 
															argument_list 
																( 
																decimal_floating_point_literal 
																, 
																decimal_floating_point_literal 
																, 
																decimal_floating_point_literal 
																) 
														; 
													expression_statement drawShape
														method_invocation drawShape
															identifier 
															argument_list f
																( 
																identifier 
																, 
																identifier 
																, 
																identifier 
																, 
																identifier 
																) 
														; 
													} 
												else 
												if_statement b
													if 
													parenthesized_expression b
														( 
														binary_expression b
															method_invocation b
																identifier 
																. 
																identifier 
																argument_list 
																	( 
																	) 
															== 
															field_access BodyType
																identifier 
																. 
																identifier 
														) 
													block color
														{ 
														expression_statement color
															method_invocation color
																identifier 
																. 
																identifier 
																argument_list 
																	( 
																	decimal_floating_point_literal 
																	, 
																	decimal_floating_point_literal 
																	, 
																	decimal_floating_point_literal 
																	) 
															; 
														expression_statement drawShape
															method_invocation drawShape
																identifier 
																argument_list f
																	( 
																	identifier 
																	, 
																	identifier 
																	, 
																	identifier 
																	, 
																	identifier 
																	) 
															; 
														} 
													else 
													if_statement b
														if 
														parenthesized_expression b
															( 
															binary_expression b
																method_invocation b
																	identifier 
																	. 
																	identifier 
																	argument_list 
																		( 
																		) 
																== 
																field_access BodyType
																	identifier 
																	. 
																	identifier 
															) 
														block color
															{ 
															expression_statement color
																method_invocation color
																	identifier 
																	. 
																	identifier 
																	argument_list 
																		( 
																		decimal_floating_point_literal 
																		, 
																		decimal_floating_point_literal 
																		, 
																		decimal_floating_point_literal 
																		) 
																; 
															expression_statement drawShape
																method_invocation drawShape
																	identifier 
																	argument_list f
																		( 
																		identifier 
																		, 
																		identifier 
																		, 
																		identifier 
																		, 
																		identifier 
																		) 
																; 
															} 
														else 
														if_statement b
															if 
															parenthesized_expression b
																( 
																binary_expression b
																	method_invocation b
																		identifier 
																		. 
																		identifier 
																		argument_list 
																			( 
																			) 
																	== 
																	false 
																) 
															block color
																{ 
																expression_statement color
																	method_invocation color
																		identifier 
																		. 
																		identifier 
																		argument_list 
																			( 
																			decimal_floating_point_literal 
																			, 
																			decimal_floating_point_literal 
																			, 
																			decimal_floating_point_literal 
																			) 
																	; 
																expression_statement drawShape
																	method_invocation drawShape
																		identifier 
																		argument_list f
																			( 
																			identifier 
																			, 
																			identifier 
																			, 
																			identifier 
																			, 
																			identifier 
																			) 
																	; 
																} 
															else 
															block color
																{ 
																expression_statement color
																	method_invocation color
																		identifier 
																		. 
																		identifier 
																		argument_list 
																			( 
																			decimal_floating_point_literal 
																			, 
																			decimal_floating_point_literal 
																			, 
																			decimal_floating_point_literal 
																			) 
																	; 
																expression_statement drawShape
																	method_invocation drawShape
																		identifier 
																		argument_list f
																			( 
																			identifier 
																			, 
																			identifier 
																			, 
																			identifier 
																			, 
																			identifier 
																			) 
																	; 
																} 
											} 
									} 
							expression_statement drawParticleSystem
								method_invocation drawParticleSystem
									identifier 
									argument_list m_particleSystem
										( 
										identifier 
										) 
								; 
							} 
					if_statement flags
						if 
						parenthesized_expression flags
							( 
							binary_expression flags
								parenthesized_expression flags
									( 
									binary_expression flags
										identifier 
										& 
										field_access DebugDraw
											identifier 
											. 
											identifier 
									) 
								!= 
								decimal_integer_literal 
							) 
						block j
							{ 
							for_statement j
								for 
								( 
								local_variable_declaration j
									type_identifier 
									variable_declarator j
										identifier 
										= 
										identifier 
									; 
								binary_expression j
									identifier 
									!= 
									null_literal 
								; 
								assignment_expression j
									identifier 
									= 
									method_invocation j
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
								) 
								block drawJoint
									{ 
									expression_statement drawJoint
										method_invocation drawJoint
											identifier 
											argument_list j
												( 
												identifier 
												) 
										; 
									} 
							} 
					if_statement flags
						if 
						parenthesized_expression flags
							( 
							binary_expression flags
								parenthesized_expression flags
									( 
									binary_expression flags
										identifier 
										& 
										field_access DebugDraw
											identifier 
											. 
											identifier 
									) 
								!= 
								decimal_integer_literal 
							) 
						block color
							{ 
							expression_statement color
								method_invocation color
									identifier 
									. 
									identifier 
									argument_list 
										( 
										decimal_floating_point_literal 
										, 
										decimal_floating_point_literal 
										, 
										decimal_floating_point_literal 
										) 
								; 
							for_statement c
								for 
								( 
								local_variable_declaration c
									type_identifier 
									variable_declarator c
										identifier 
										= 
										field_access m_contactManager
											identifier 
											. 
											identifier 
									; 
								binary_expression c
									identifier 
									!= 
									null_literal 
								; 
								assignment_expression c
									identifier 
									= 
									method_invocation c
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
								) 
								block fixtureA
									{ 
									local_variable_declaration fixtureA
										type_identifier 
										variable_declarator fixtureA
											identifier 
											= 
											method_invocation c
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
										; 
									local_variable_declaration fixtureB
										type_identifier 
										variable_declarator fixtureB
											identifier 
											= 
											method_invocation c
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
										; 
									expression_statement fixtureA
										method_invocation fixtureA
											method_invocation fixtureA
												identifier 
												. 
												identifier 
												argument_list c
													( 
													method_invocation c
														identifier 
														. 
														identifier 
														argument_list 
															( 
															) 
													) 
											. 
											identifier 
											argument_list cA
												( 
												identifier 
												) 
										; 
									expression_statement fixtureB
										method_invocation fixtureB
											method_invocation fixtureB
												identifier 
												. 
												identifier 
												argument_list c
													( 
													method_invocation c
														identifier 
														. 
														identifier 
														argument_list 
															( 
															) 
													) 
											. 
											identifier 
											argument_list cB
												( 
												identifier 
												) 
										; 
									expression_statement m_debugDraw
										method_invocation m_debugDraw
											identifier 
											. 
											identifier 
											argument_list cA
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									} 
							} 
					if_statement flags
						if 
						parenthesized_expression flags
							( 
							binary_expression flags
								parenthesized_expression flags
									( 
									binary_expression flags
										identifier 
										& 
										field_access DebugDraw
											identifier 
											. 
											identifier 
									) 
								!= 
								decimal_integer_literal 
							) 
						block color
							{ 
							expression_statement color
								method_invocation color
									identifier 
									. 
									identifier 
									argument_list 
										( 
										decimal_floating_point_literal 
										, 
										decimal_floating_point_literal 
										, 
										decimal_floating_point_literal 
										) 
								; 
							for_statement b
								for 
								( 
								local_variable_declaration b
									type_identifier 
									variable_declarator b
										identifier 
										= 
										identifier 
									; 
								binary_expression b
									identifier 
									!= 
									null_literal 
								; 
								assignment_expression b
									identifier 
									= 
									method_invocation b
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
								) 
								block b
									{ 
									if_statement b
										if 
										parenthesized_expression b
											( 
											binary_expression b
												method_invocation b
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
												== 
												false 
											) 
										block 
											{ 
											continue_statement 
												continue 
												; 
											} 
									for_statement f
										for 
										( 
										local_variable_declaration f
											type_identifier 
											variable_declarator f
												identifier 
												= 
												method_invocation b
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
											; 
										binary_expression f
											identifier 
											!= 
											null_literal 
										; 
										assignment_expression f
											identifier 
											= 
											method_invocation f
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
										) 
										block i
											{ 
											for_statement i
												for 
												( 
												local_variable_declaration i
													integral_type 
														int 
													variable_declarator i
														identifier 
														= 
														decimal_integer_literal 
													; 
												binary_expression i
													identifier 
													< 
													field_access f
														identifier 
														. 
														identifier 
												; 
												update_expression i
													++ 
													identifier 
												) 
												block proxy
													{ 
													local_variable_declaration proxy
														type_identifier 
														variable_declarator proxy
															identifier 
															= 
															array_access f
																field_access f
																	identifier 
																	. 
																	identifier 
																[ 
																identifier 
																] 
														; 
													local_variable_declaration aabb
														type_identifier 
														variable_declarator aabb
															identifier 
															= 
															method_invocation m_contactManager
																field_access m_contactManager
																	identifier 
																	. 
																	identifier 
																. 
																identifier 
																argument_list proxy
																	( 
																	field_access proxy
																		identifier 
																		. 
																		identifier 
																	) 
														; 
													if_statement aabb
														if 
														parenthesized_expression aabb
															( 
															binary_expression aabb
																identifier 
																!= 
																null_literal 
															) 
														block vs
															{ 
															local_variable_declaration vs
																array_type 
																	type_identifier 
																	dimensions 
																		[ 
																		] 
																variable_declarator vs
																	identifier 
																	= 
																	method_invocation avs
																		identifier 
																		. 
																		identifier 
																		argument_list 
																			( 
																			decimal_integer_literal 
																			) 
																; 
															expression_statement vs
																method_invocation vs
																	array_access vs
																		identifier 
																		[ 
																		decimal_integer_literal 
																		] 
																	. 
																	identifier 
																	argument_list aabb
																		( 
																		field_access aabb
																			field_access aabb
																				identifier 
																				. 
																				identifier 
																			. 
																			identifier 
																		, 
																		field_access aabb
																			field_access aabb
																				identifier 
																				. 
																				identifier 
																			. 
																			identifier 
																		) 
																; 
															expression_statement vs
																method_invocation vs
																	array_access vs
																		identifier 
																		[ 
																		decimal_integer_literal 
																		] 
																	. 
																	identifier 
																	argument_list aabb
																		( 
																		field_access aabb
																			field_access aabb
																				identifier 
																				. 
																				identifier 
																			. 
																			identifier 
																		, 
																		field_access aabb
																			field_access aabb
																				identifier 
																				. 
																				identifier 
																			. 
																			identifier 
																		) 
																; 
															expression_statement vs
																method_invocation vs
																	array_access vs
																		identifier 
																		[ 
																		decimal_integer_literal 
																		] 
																	. 
																	identifier 
																	argument_list aabb
																		( 
																		field_access aabb
																			field_access aabb
																				identifier 
																				. 
																				identifier 
																			. 
																			identifier 
																		, 
																		field_access aabb
																			field_access aabb
																				identifier 
																				. 
																				identifier 
																			. 
																			identifier 
																		) 
																; 
															expression_statement vs
																method_invocation vs
																	array_access vs
																		identifier 
																		[ 
																		decimal_integer_literal 
																		] 
																	. 
																	identifier 
																	argument_list aabb
																		( 
																		field_access aabb
																			field_access aabb
																				identifier 
																				. 
																				identifier 
																			. 
																			identifier 
																		, 
																		field_access aabb
																			field_access aabb
																				identifier 
																				. 
																				identifier 
																			. 
																			identifier 
																		) 
																; 
															expression_statement m_debugDraw
																method_invocation m_debugDraw
																	identifier 
																	. 
																	identifier 
																	argument_list vs
																		( 
																		identifier 
																		, 
																		decimal_integer_literal 
																		, 
																		identifier 
																		) 
																; 
															} 
													} 
											} 
									} 
							} 
					if_statement flags
						if 
						parenthesized_expression flags
							( 
							binary_expression flags
								parenthesized_expression flags
									( 
									binary_expression flags
										identifier 
										& 
										field_access DebugDraw
											identifier 
											. 
											identifier 
									) 
								!= 
								decimal_integer_literal 
							) 
						block b
							{ 
							for_statement b
								for 
								( 
								local_variable_declaration b
									type_identifier 
									variable_declarator b
										identifier 
										= 
										identifier 
									; 
								binary_expression b
									identifier 
									!= 
									null_literal 
								; 
								assignment_expression b
									identifier 
									= 
									method_invocation b
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
								) 
								block xf
									{ 
									expression_statement xf
										method_invocation xf
											identifier 
											. 
											identifier 
											argument_list b
												( 
												method_invocation b
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
												) 
										; 
									expression_statement xf
										method_invocation xf
											field_access xf
												identifier 
												. 
												identifier 
											. 
											identifier 
											argument_list b
												( 
												method_invocation b
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
												) 
										; 
									expression_statement m_debugDraw
										method_invocation m_debugDraw
											identifier 
											. 
											identifier 
											argument_list xf
												( 
												identifier 
												) 
										; 
									} 
							} 
					if_statement flags
						if 
						parenthesized_expression flags
							( 
							binary_expression flags
								parenthesized_expression flags
									( 
									binary_expression flags
										identifier 
										& 
										field_access DebugDraw
											identifier 
											. 
											identifier 
									) 
								!= 
								decimal_integer_literal 
							) 
						block m_contactManager
							{ 
							expression_statement m_contactManager
								method_invocation m_contactManager
									field_access m_contactManager
										identifier 
										. 
										identifier 
									. 
									identifier 
									argument_list m_debugDraw
										( 
										identifier 
										) 
								; 
							} 
					expression_statement m_debugDraw
						method_invocation m_debugDraw
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			field_declaration wqwrapper
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator wqwrapper
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			block_comment 
			method_declaration queryAABB
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters callback
					( 
					formal_parameter callback
						type_identifier 
						identifier 
					, 
					formal_parameter aabb
						type_identifier 
						identifier 
					) 
				block wqwrapper
					{ 
					expression_statement wqwrapper
						assignment_expression wqwrapper
							field_access wqwrapper
								identifier 
								. 
								identifier 
							= 
							field_access m_contactManager
								identifier 
								. 
								identifier 
						; 
					expression_statement wqwrapper
						assignment_expression wqwrapper
							field_access wqwrapper
								identifier 
								. 
								identifier 
							= 
							identifier 
						; 
					expression_statement m_contactManager
						method_invocation m_contactManager
							field_access m_contactManager
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list wqwrapper
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration queryAABB
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters callback
					( 
					formal_parameter callback
						type_identifier 
						identifier 
					, 
					formal_parameter particleCallback
						type_identifier 
						identifier 
					, 
					formal_parameter aabb
						type_identifier 
						identifier 
					) 
				block wqwrapper
					{ 
					expression_statement wqwrapper
						assignment_expression wqwrapper
							field_access wqwrapper
								identifier 
								. 
								identifier 
							= 
							field_access m_contactManager
								identifier 
								. 
								identifier 
						; 
					expression_statement wqwrapper
						assignment_expression wqwrapper
							field_access wqwrapper
								identifier 
								. 
								identifier 
							= 
							identifier 
						; 
					expression_statement m_contactManager
						method_invocation m_contactManager
							field_access m_contactManager
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list wqwrapper
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list particleCallback
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration queryAABB
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters particleCallback
					( 
					formal_parameter particleCallback
						type_identifier 
						identifier 
					, 
					formal_parameter aabb
						type_identifier 
						identifier 
					) 
				block m_particleSystem
					{ 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list particleCallback
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					} 
			field_declaration wrcwrapper
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator wrcwrapper
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration input
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator input
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			block_comment 
			method_declaration raycast
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters callback
					( 
					formal_parameter callback
						type_identifier 
						identifier 
					, 
					formal_parameter point1
						type_identifier 
						identifier 
					, 
					formal_parameter point2
						type_identifier 
						identifier 
					) 
				block wrcwrapper
					{ 
					expression_statement wrcwrapper
						assignment_expression wrcwrapper
							field_access wrcwrapper
								identifier 
								. 
								identifier 
							= 
							field_access m_contactManager
								identifier 
								. 
								identifier 
						; 
					expression_statement wrcwrapper
						assignment_expression wrcwrapper
							field_access wrcwrapper
								identifier 
								. 
								identifier 
							= 
							identifier 
						; 
					expression_statement input
						assignment_expression input
							field_access input
								identifier 
								. 
								identifier 
							= 
							decimal_floating_point_literal 
						; 
					expression_statement input
						method_invocation input
							field_access input
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list point1
								( 
								identifier 
								) 
						; 
					expression_statement input
						method_invocation input
							field_access input
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list point2
								( 
								identifier 
								) 
						; 
					expression_statement m_contactManager
						method_invocation m_contactManager
							field_access m_contactManager
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list wrcwrapper
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration raycast
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters callback
					( 
					formal_parameter callback
						type_identifier 
						identifier 
					, 
					formal_parameter particleCallback
						type_identifier 
						identifier 
					, 
					formal_parameter point1
						type_identifier 
						identifier 
					, 
					formal_parameter point2
						type_identifier 
						identifier 
					) 
				block wrcwrapper
					{ 
					expression_statement wrcwrapper
						assignment_expression wrcwrapper
							field_access wrcwrapper
								identifier 
								. 
								identifier 
							= 
							field_access m_contactManager
								identifier 
								. 
								identifier 
						; 
					expression_statement wrcwrapper
						assignment_expression wrcwrapper
							field_access wrcwrapper
								identifier 
								. 
								identifier 
							= 
							identifier 
						; 
					expression_statement input
						assignment_expression input
							field_access input
								identifier 
								. 
								identifier 
							= 
							decimal_floating_point_literal 
						; 
					expression_statement input
						method_invocation input
							field_access input
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list point1
								( 
								identifier 
								) 
						; 
					expression_statement input
						method_invocation input
							field_access input
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list point2
								( 
								identifier 
								) 
						; 
					expression_statement m_contactManager
						method_invocation m_contactManager
							field_access m_contactManager
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list wrcwrapper
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list particleCallback
								( 
								identifier 
								, 
								identifier 
								, 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration raycast
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters particleCallback
					( 
					formal_parameter particleCallback
						type_identifier 
						identifier 
					, 
					formal_parameter point1
						type_identifier 
						identifier 
					, 
					formal_parameter point2
						type_identifier 
						identifier 
					) 
				block m_particleSystem
					{ 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list particleCallback
								( 
								identifier 
								, 
								identifier 
								, 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration getBodyList
				modifiers 
					public 
				type_identifier 
				identifier 
				formal_parameters 
					( 
					) 
				block m_bodyList
					{ 
					return_statement m_bodyList
						return 
						identifier 
						; 
					} 
			block_comment 
			method_declaration getJointList
				modifiers 
					public 
				type_identifier 
				identifier 
				formal_parameters 
					( 
					) 
				block m_jointList
					{ 
					return_statement m_jointList
						return 
						identifier 
						; 
					} 
			block_comment 
			method_declaration getContactList
				modifiers 
					public 
				type_identifier 
				identifier 
				formal_parameters 
					( 
					) 
				block m_contactManager
					{ 
					return_statement m_contactManager
						return 
						field_access m_contactManager
							identifier 
							. 
							identifier 
						; 
					} 
			method_declaration isSleepingAllowed
				modifiers 
					public 
				boolean_type 
				identifier 
				formal_parameters 
					( 
					) 
				block m_allowSleep
					{ 
					return_statement m_allowSleep
						return 
						identifier 
						; 
					} 
			method_declaration setSleepingAllowed
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters sleepingAllowed
					( 
					formal_parameter sleepingAllowed
						boolean_type 
						identifier 
					) 
				block m_allowSleep
					{ 
					expression_statement m_allowSleep
						assignment_expression m_allowSleep
							identifier 
							= 
							identifier 
						; 
					} 
			block_comment 
			method_declaration setWarmStarting
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters flag
					( 
					formal_parameter flag
						boolean_type 
						identifier 
					) 
				block m_warmStarting
					{ 
					expression_statement m_warmStarting
						assignment_expression m_warmStarting
							identifier 
							= 
							identifier 
						; 
					} 
			method_declaration isWarmStarting
				modifiers 
					public 
				boolean_type 
				identifier 
				formal_parameters 
					( 
					) 
				block m_warmStarting
					{ 
					return_statement m_warmStarting
						return 
						identifier 
						; 
					} 
			block_comment 
			method_declaration setContinuousPhysics
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters flag
					( 
					formal_parameter flag
						boolean_type 
						identifier 
					) 
				block m_continuousPhysics
					{ 
					expression_statement m_continuousPhysics
						assignment_expression m_continuousPhysics
							identifier 
							= 
							identifier 
						; 
					} 
			method_declaration isContinuousPhysics
				modifiers 
					public 
				boolean_type 
				identifier 
				formal_parameters 
					( 
					) 
				block m_continuousPhysics
					{ 
					return_statement m_continuousPhysics
						return 
						identifier 
						; 
					} 
			block_comment 
			method_declaration getProxyCount
				modifiers 
					public 
				integral_type 
					int 
				identifier 
				formal_parameters 
					( 
					) 
				block m_contactManager
					{ 
					return_statement m_contactManager
						return 
						method_invocation m_contactManager
							field_access m_contactManager
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			block_comment 
			method_declaration getBodyCount
				modifiers 
					public 
				integral_type 
					int 
				identifier 
				formal_parameters 
					( 
					) 
				block m_bodyCount
					{ 
					return_statement m_bodyCount
						return 
						identifier 
						; 
					} 
			block_comment 
			method_declaration getJointCount
				modifiers 
					public 
				integral_type 
					int 
				identifier 
				formal_parameters 
					( 
					) 
				block m_jointCount
					{ 
					return_statement m_jointCount
						return 
						identifier 
						; 
					} 
			block_comment 
			method_declaration getContactCount
				modifiers 
					public 
				integral_type 
					int 
				identifier 
				formal_parameters 
					( 
					) 
				block m_contactManager
					{ 
					return_statement m_contactManager
						return 
						field_access m_contactManager
							identifier 
							. 
							identifier 
						; 
					} 
			block_comment 
			method_declaration getTreeHeight
				modifiers 
					public 
				integral_type 
					int 
				identifier 
				formal_parameters 
					( 
					) 
				block m_contactManager
					{ 
					return_statement m_contactManager
						return 
						method_invocation m_contactManager
							field_access m_contactManager
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			block_comment 
			method_declaration getTreeBalance
				modifiers 
					public 
				integral_type 
					int 
				identifier 
				formal_parameters 
					( 
					) 
				block m_contactManager
					{ 
					return_statement m_contactManager
						return 
						method_invocation m_contactManager
							field_access m_contactManager
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			block_comment 
			method_declaration getTreeQuality
				modifiers 
					public 
				floating_point_type 
					float 
				identifier 
				formal_parameters 
					( 
					) 
				block m_contactManager
					{ 
					return_statement m_contactManager
						return 
						method_invocation m_contactManager
							field_access m_contactManager
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			block_comment 
			method_declaration setGravity
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters gravity
					( 
					formal_parameter gravity
						type_identifier 
						identifier 
					) 
				block m_gravity
					{ 
					expression_statement m_gravity
						method_invocation m_gravity
							identifier 
							. 
							identifier 
							argument_list gravity
								( 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration getGravity
				modifiers 
					public 
				type_identifier 
				identifier 
				formal_parameters 
					( 
					) 
				block m_gravity
					{ 
					return_statement m_gravity
						return 
						identifier 
						; 
					} 
			block_comment 
			method_declaration isLocked
				modifiers 
					public 
				boolean_type 
				identifier 
				formal_parameters 
					( 
					) 
				block m_flags
					{ 
					return_statement m_flags
						return 
						binary_expression m_flags
							parenthesized_expression m_flags
								( 
								binary_expression m_flags
									identifier 
									& 
									identifier 
								) 
							== 
							identifier 
						; 
					} 
			block_comment 
			method_declaration setAutoClearForces
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters flag
					( 
					formal_parameter flag
						boolean_type 
						identifier 
					) 
				block flag
					{ 
					if_statement flag
						if 
						parenthesized_expression flag
							( 
							identifier 
							) 
						block m_flags
							{ 
							expression_statement m_flags
								assignment_expression m_flags
									identifier 
									|= 
									identifier 
								; 
							} 
						else 
						block m_flags
							{ 
							expression_statement m_flags
								assignment_expression m_flags
									identifier 
									&= 
									unary_expression CLEAR_FORCES
										~ 
										identifier 
								; 
							} 
					} 
			block_comment 
			method_declaration getAutoClearForces
				modifiers 
					public 
				boolean_type 
				identifier 
				formal_parameters 
					( 
					) 
				block m_flags
					{ 
					return_statement m_flags
						return 
						binary_expression m_flags
							parenthesized_expression m_flags
								( 
								binary_expression m_flags
									identifier 
									& 
									identifier 
								) 
							== 
							identifier 
						; 
					} 
			block_comment 
			method_declaration getContactManager
				modifiers 
					public 
				type_identifier 
				identifier 
				formal_parameters 
					( 
					) 
				block m_contactManager
					{ 
					return_statement m_contactManager
						return 
						identifier 
						; 
					} 
			method_declaration getProfile
				modifiers 
					public 
				type_identifier 
				identifier 
				formal_parameters 
					( 
					) 
				block m_profile
					{ 
					return_statement m_profile
						return 
						identifier 
						; 
					} 
			field_declaration island
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator island
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration stack
				modifiers 
					private 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
				variable_declarator stack
					identifier 
					= 
					array_creation_expression 
						new 
						type_identifier 
						dimensions_expr 
							[ 
							decimal_integer_literal 
							] 
				; 
			line_comment 
			field_declaration broadphaseTimer
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator broadphaseTimer
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			method_declaration solve
				modifiers 
					private 
				void_type 
				identifier 
				formal_parameters step
					( 
					formal_parameter step
						type_identifier 
						identifier 
					) 
				block m_profile
					{ 
					expression_statement m_profile
						method_invocation m_profile
							field_access m_profile
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					expression_statement m_profile
						method_invocation m_profile
							field_access m_profile
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					expression_statement m_profile
						method_invocation m_profile
							field_access m_profile
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					line_comment 
					for_statement b
						for 
						( 
						local_variable_declaration b
							type_identifier 
							variable_declarator b
								identifier 
								= 
								identifier 
							; 
						binary_expression b
							identifier 
							!= 
							null_literal 
						; 
						assignment_expression b
							identifier 
							= 
							field_access b
								identifier 
								. 
								identifier 
						) 
						block b
							{ 
							expression_statement b
								method_invocation b
									field_access b
										identifier 
										. 
										identifier 
									. 
									identifier 
									argument_list b
										( 
										field_access b
											identifier 
											. 
											identifier 
										) 
								; 
							} 
					line_comment 
					expression_statement island
						method_invocation island
							identifier 
							. 
							identifier 
							argument_list m_bodyCount
								( 
								identifier 
								, 
								field_access m_contactManager
									identifier 
									. 
									identifier 
								, 
								identifier 
								, 
								field_access m_contactManager
									identifier 
									. 
									identifier 
								) 
						; 
					line_comment 
					for_statement b
						for 
						( 
						local_variable_declaration b
							type_identifier 
							variable_declarator b
								identifier 
								= 
								identifier 
							; 
						binary_expression b
							identifier 
							!= 
							null_literal 
						; 
						assignment_expression b
							identifier 
							= 
							field_access b
								identifier 
								. 
								identifier 
						) 
						block b
							{ 
							expression_statement b
								assignment_expression b
									field_access b
										identifier 
										. 
										identifier 
									&= 
									unary_expression Body
										~ 
										field_access Body
											identifier 
											. 
											identifier 
								; 
							} 
					for_statement c
						for 
						( 
						local_variable_declaration c
							type_identifier 
							variable_declarator c
								identifier 
								= 
								field_access m_contactManager
									identifier 
									. 
									identifier 
							; 
						binary_expression c
							identifier 
							!= 
							null_literal 
						; 
						assignment_expression c
							identifier 
							= 
							field_access c
								identifier 
								. 
								identifier 
						) 
						block c
							{ 
							expression_statement c
								assignment_expression c
									field_access c
										identifier 
										. 
										identifier 
									&= 
									unary_expression Contact
										~ 
										field_access Contact
											identifier 
											. 
											identifier 
								; 
							} 
					for_statement j
						for 
						( 
						local_variable_declaration j
							type_identifier 
							variable_declarator j
								identifier 
								= 
								identifier 
							; 
						binary_expression j
							identifier 
							!= 
							null_literal 
						; 
						assignment_expression j
							identifier 
							= 
							field_access j
								identifier 
								. 
								identifier 
						) 
						block j
							{ 
							expression_statement j
								assignment_expression j
									field_access j
										identifier 
										. 
										identifier 
									= 
									false 
								; 
							} 
					line_comment 
					local_variable_declaration stackSize
						integral_type 
							int 
						variable_declarator stackSize
							identifier 
							= 
							identifier 
						; 
					if_statement stack
						if 
						parenthesized_expression stack
							( 
							binary_expression stack
								field_access stack
									identifier 
									. 
									identifier 
								< 
								identifier 
							) 
						block stack
							{ 
							expression_statement stack
								assignment_expression stack
									identifier 
									= 
									array_creation_expression stackSize
										new 
										type_identifier 
										dimensions_expr stackSize
											[ 
											identifier 
											] 
								; 
							} 
					for_statement seed
						for 
						( 
						local_variable_declaration seed
							type_identifier 
							variable_declarator seed
								identifier 
								= 
								identifier 
							; 
						binary_expression seed
							identifier 
							!= 
							null_literal 
						; 
						assignment_expression seed
							identifier 
							= 
							field_access seed
								identifier 
								. 
								identifier 
						) 
						block seed
							{ 
							if_statement seed
								if 
								parenthesized_expression seed
									( 
									binary_expression seed
										parenthesized_expression seed
											( 
											binary_expression seed
												field_access seed
													identifier 
													. 
													identifier 
												& 
												field_access Body
													identifier 
													. 
													identifier 
											) 
										== 
										field_access Body
											identifier 
											. 
											identifier 
									) 
								block 
									{ 
									continue_statement 
										continue 
										; 
									} 
							if_statement seed
								if 
								parenthesized_expression seed
									( 
									binary_expression seed
										binary_expression seed
											method_invocation seed
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
											== 
											false 
										|| 
										binary_expression seed
											method_invocation seed
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
											== 
											false 
									) 
								block 
									{ 
									continue_statement 
										continue 
										; 
									} 
							line_comment 
							if_statement seed
								if 
								parenthesized_expression seed
									( 
									binary_expression seed
										method_invocation seed
											identifier 
											. 
											identifier 
											argument_list 
												( 
												) 
										== 
										field_access BodyType
											identifier 
											. 
											identifier 
									) 
								block 
									{ 
									continue_statement 
										continue 
										; 
									} 
							line_comment 
							expression_statement island
								method_invocation island
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								; 
							local_variable_declaration stackCount
								integral_type 
									int 
								variable_declarator stackCount
									identifier 
									= 
									decimal_integer_literal 
								; 
							expression_statement stack
								assignment_expression stack
									array_access stack
										identifier 
										[ 
										update_expression stackCount
											identifier 
											++ 
										] 
									= 
									identifier 
								; 
							expression_statement seed
								assignment_expression seed
									field_access seed
										identifier 
										. 
										identifier 
									|= 
									field_access Body
										identifier 
										. 
										identifier 
								; 
							line_comment 
							while_statement stackCount
								while 
								parenthesized_expression stackCount
									( 
									binary_expression stackCount
										identifier 
										> 
										decimal_integer_literal 
									) 
								block b
									{ 
									line_comment 
									local_variable_declaration b
										type_identifier 
										variable_declarator b
											identifier 
											= 
											array_access stack
												identifier 
												[ 
												update_expression stackCount
													-- 
													identifier 
												] 
										; 
									assert_statement b
										assert 
										parenthesized_expression b
											( 
											binary_expression b
												method_invocation b
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
												== 
												true 
											) 
										; 
									expression_statement island
										method_invocation island
											identifier 
											. 
											identifier 
											argument_list b
												( 
												identifier 
												) 
										; 
									line_comment 
									expression_statement b
										method_invocation b
											identifier 
											. 
											identifier 
											argument_list 
												( 
												true 
												) 
										; 
									line_comment 
									line_comment 
									if_statement b
										if 
										parenthesized_expression b
											( 
											binary_expression b
												method_invocation b
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
												== 
												field_access BodyType
													identifier 
													. 
													identifier 
											) 
										block 
											{ 
											continue_statement 
												continue 
												; 
											} 
									line_comment 
									for_statement ce
										for 
										( 
										local_variable_declaration ce
											type_identifier 
											variable_declarator ce
												identifier 
												= 
												field_access b
													identifier 
													. 
													identifier 
											; 
										binary_expression ce
											identifier 
											!= 
											null_literal 
										; 
										assignment_expression ce
											identifier 
											= 
											field_access ce
												identifier 
												. 
												identifier 
										) 
										block contact
											{ 
											local_variable_declaration contact
												type_identifier 
												variable_declarator contact
													identifier 
													= 
													field_access ce
														identifier 
														. 
														identifier 
												; 
											line_comment 
											if_statement contact
												if 
												parenthesized_expression contact
													( 
													binary_expression contact
														parenthesized_expression contact
															( 
															binary_expression contact
																field_access contact
																	identifier 
																	. 
																	identifier 
																& 
																field_access Contact
																	identifier 
																	. 
																	identifier 
															) 
														== 
														field_access Contact
															identifier 
															. 
															identifier 
													) 
												block 
													{ 
													continue_statement 
														continue 
														; 
													} 
											line_comment 
											if_statement contact
												if 
												parenthesized_expression contact
													( 
													binary_expression contact
														binary_expression contact
															method_invocation contact
																identifier 
																. 
																identifier 
																argument_list 
																	( 
																	) 
															== 
															false 
														|| 
														binary_expression contact
															method_invocation contact
																identifier 
																. 
																identifier 
																argument_list 
																	( 
																	) 
															== 
															false 
													) 
												block 
													{ 
													continue_statement 
														continue 
														; 
													} 
											line_comment 
											local_variable_declaration sensorA
												boolean_type 
												variable_declarator sensorA
													identifier 
													= 
													field_access contact
														field_access contact
															identifier 
															. 
															identifier 
														. 
														identifier 
												; 
											local_variable_declaration sensorB
												boolean_type 
												variable_declarator sensorB
													identifier 
													= 
													field_access contact
														field_access contact
															identifier 
															. 
															identifier 
														. 
														identifier 
												; 
											if_statement sensorA
												if 
												parenthesized_expression sensorA
													( 
													binary_expression sensorA
														identifier 
														|| 
														identifier 
													) 
												block 
													{ 
													continue_statement 
														continue 
														; 
													} 
											expression_statement island
												method_invocation island
													identifier 
													. 
													identifier 
													argument_list contact
														( 
														identifier 
														) 
												; 
											expression_statement contact
												assignment_expression contact
													field_access contact
														identifier 
														. 
														identifier 
													|= 
													field_access Contact
														identifier 
														. 
														identifier 
												; 
											local_variable_declaration other
												type_identifier 
												variable_declarator other
													identifier 
													= 
													field_access ce
														identifier 
														. 
														identifier 
												; 
											line_comment 
											if_statement other
												if 
												parenthesized_expression other
													( 
													binary_expression other
														parenthesized_expression other
															( 
															binary_expression other
																field_access other
																	identifier 
																	. 
																	identifier 
																& 
																field_access Body
																	identifier 
																	. 
																	identifier 
															) 
														== 
														field_access Body
															identifier 
															. 
															identifier 
													) 
												block 
													{ 
													continue_statement 
														continue 
														; 
													} 
											assert_statement stackCount
												assert 
												parenthesized_expression stackCount
													( 
													binary_expression stackCount
														identifier 
														< 
														identifier 
													) 
												; 
											expression_statement stack
												assignment_expression stack
													array_access stack
														identifier 
														[ 
														update_expression stackCount
															identifier 
															++ 
														] 
													= 
													identifier 
												; 
											expression_statement other
												assignment_expression other
													field_access other
														identifier 
														. 
														identifier 
													|= 
													field_access Body
														identifier 
														. 
														identifier 
												; 
											} 
									line_comment 
									for_statement je
										for 
										( 
										local_variable_declaration je
											type_identifier 
											variable_declarator je
												identifier 
												= 
												field_access b
													identifier 
													. 
													identifier 
											; 
										binary_expression je
											identifier 
											!= 
											null_literal 
										; 
										assignment_expression je
											identifier 
											= 
											field_access je
												identifier 
												. 
												identifier 
										) 
										block je
											{ 
											if_statement je
												if 
												parenthesized_expression je
													( 
													binary_expression je
														field_access je
															field_access je
																identifier 
																. 
																identifier 
															. 
															identifier 
														== 
														true 
													) 
												block 
													{ 
													continue_statement 
														continue 
														; 
													} 
											local_variable_declaration other
												type_identifier 
												variable_declarator other
													identifier 
													= 
													field_access je
														identifier 
														. 
														identifier 
												; 
											line_comment 
											if_statement other
												if 
												parenthesized_expression other
													( 
													binary_expression other
														method_invocation other
															identifier 
															. 
															identifier 
															argument_list 
																( 
																) 
														== 
														false 
													) 
												block 
													{ 
													continue_statement 
														continue 
														; 
													} 
											expression_statement island
												method_invocation island
													identifier 
													. 
													identifier 
													argument_list je
														( 
														field_access je
															identifier 
															. 
															identifier 
														) 
												; 
											expression_statement je
												assignment_expression je
													field_access je
														field_access je
															identifier 
															. 
															identifier 
														. 
														identifier 
													= 
													true 
												; 
											if_statement other
												if 
												parenthesized_expression other
													( 
													binary_expression other
														parenthesized_expression other
															( 
															binary_expression other
																field_access other
																	identifier 
																	. 
																	identifier 
																& 
																field_access Body
																	identifier 
																	. 
																	identifier 
															) 
														== 
														field_access Body
															identifier 
															. 
															identifier 
													) 
												block 
													{ 
													continue_statement 
														continue 
														; 
													} 
											assert_statement stackCount
												assert 
												parenthesized_expression stackCount
													( 
													binary_expression stackCount
														identifier 
														< 
														identifier 
													) 
												; 
											expression_statement stack
												assignment_expression stack
													array_access stack
														identifier 
														[ 
														update_expression stackCount
															identifier 
															++ 
														] 
													= 
													identifier 
												; 
											expression_statement other
												assignment_expression other
													field_access other
														identifier 
														. 
														identifier 
													|= 
													field_access Body
														identifier 
														. 
														identifier 
												; 
											} 
									} 
							expression_statement island
								method_invocation island
									identifier 
									. 
									identifier 
									argument_list m_profile
										( 
										identifier 
										, 
										identifier 
										, 
										identifier 
										, 
										identifier 
										) 
								; 
							line_comment 
							for_statement i
								for 
								( 
								local_variable_declaration i
									integral_type 
										int 
									variable_declarator i
										identifier 
										= 
										decimal_integer_literal 
									; 
								binary_expression i
									identifier 
									< 
									field_access island
										identifier 
										. 
										identifier 
								; 
								update_expression i
									++ 
									identifier 
								) 
								block b
									{ 
									line_comment 
									local_variable_declaration b
										type_identifier 
										variable_declarator b
											identifier 
											= 
											array_access island
												field_access island
													identifier 
													. 
													identifier 
												[ 
												identifier 
												] 
										; 
									if_statement b
										if 
										parenthesized_expression b
											( 
											binary_expression b
												method_invocation b
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
												== 
												field_access BodyType
													identifier 
													. 
													identifier 
											) 
										block b
											{ 
											expression_statement b
												assignment_expression b
													field_access b
														identifier 
														. 
														identifier 
													&= 
													unary_expression Body
														~ 
														field_access Body
															identifier 
															. 
															identifier 
												; 
											} 
									} 
							} 
					expression_statement m_profile
						method_invocation m_profile
							field_access m_profile
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					expression_statement m_profile
						method_invocation m_profile
							field_access m_profile
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					expression_statement m_profile
						method_invocation m_profile
							field_access m_profile
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					expression_statement broadphaseTimer
						method_invocation broadphaseTimer
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					line_comment 
					for_statement b
						for 
						( 
						local_variable_declaration b
							type_identifier 
							variable_declarator b
								identifier 
								= 
								identifier 
							; 
						binary_expression b
							identifier 
							!= 
							null_literal 
						; 
						assignment_expression b
							identifier 
							= 
							method_invocation b
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						) 
						block b
							{ 
							line_comment 
							if_statement b
								if 
								parenthesized_expression b
									( 
									binary_expression b
										parenthesized_expression b
											( 
											binary_expression b
												field_access b
													identifier 
													. 
													identifier 
												& 
												field_access Body
													identifier 
													. 
													identifier 
											) 
										== 
										decimal_integer_literal 
									) 
								block 
									{ 
									continue_statement 
										continue 
										; 
									} 
							if_statement b
								if 
								parenthesized_expression b
									( 
									binary_expression b
										method_invocation b
											identifier 
											. 
											identifier 
											argument_list 
												( 
												) 
										== 
										field_access BodyType
											identifier 
											. 
											identifier 
									) 
								block 
									{ 
									continue_statement 
										continue 
										; 
									} 
							line_comment 
							expression_statement b
								method_invocation b
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								; 
							} 
					line_comment 
					expression_statement m_contactManager
						method_invocation m_contactManager
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					expression_statement m_profile
						method_invocation m_profile
							field_access m_profile
								identifier 
								. 
								identifier 
							. 
							identifier 
							argument_list broadphaseTimer
								( 
								method_invocation broadphaseTimer
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								) 
						; 
					} 
			field_declaration toiIsland
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator toiIsland
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration toiInput
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator toiInput
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration toiOutput
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator toiOutput
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration subStep
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator subStep
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration tempBodies
				modifiers 
					private 
					final 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
				variable_declarator tempBodies
					identifier 
					= 
					array_creation_expression 
						new 
						type_identifier 
						dimensions_expr 
							[ 
							decimal_integer_literal 
							] 
				; 
			field_declaration backup1
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator backup1
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration backup2
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator backup2
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			method_declaration solveTOI
				modifiers 
					private 
				void_type 
				identifier 
				formal_parameters step
					( 
					formal_parameter step
						modifiers 
							final 
						type_identifier 
						identifier 
					) 
				block island
					{ 
					local_variable_declaration island
						modifiers 
							final 
						type_identifier 
						variable_declarator island
							identifier 
							= 
							identifier 
						; 
					expression_statement island
						method_invocation island
							identifier 
							. 
							identifier 
							argument_list Settings
								( 
								binary_expression Settings
									decimal_integer_literal 
									* 
									field_access Settings
										identifier 
										. 
										identifier 
								, 
								field_access Settings
									identifier 
									. 
									identifier 
								, 
								decimal_integer_literal 
								, 
								field_access m_contactManager
									identifier 
									. 
									identifier 
								) 
						; 
					if_statement m_stepComplete
						if 
						parenthesized_expression m_stepComplete
							( 
							identifier 
							) 
						block b
							{ 
							for_statement b
								for 
								( 
								local_variable_declaration b
									type_identifier 
									variable_declarator b
										identifier 
										= 
										identifier 
									; 
								binary_expression b
									identifier 
									!= 
									null_literal 
								; 
								assignment_expression b
									identifier 
									= 
									field_access b
										identifier 
										. 
										identifier 
								) 
								block b
									{ 
									expression_statement b
										assignment_expression b
											field_access b
												identifier 
												. 
												identifier 
											&= 
											unary_expression Body
												~ 
												field_access Body
													identifier 
													. 
													identifier 
										; 
									expression_statement b
										assignment_expression b
											field_access b
												field_access b
													identifier 
													. 
													identifier 
												. 
												identifier 
											= 
											decimal_floating_point_literal 
										; 
									} 
							for_statement c
								for 
								( 
								local_variable_declaration c
									type_identifier 
									variable_declarator c
										identifier 
										= 
										field_access m_contactManager
											identifier 
											. 
											identifier 
									; 
								binary_expression c
									identifier 
									!= 
									null_literal 
								; 
								assignment_expression c
									identifier 
									= 
									field_access c
										identifier 
										. 
										identifier 
								) 
								block c
									{ 
									line_comment 
									expression_statement c
										assignment_expression c
											field_access c
												identifier 
												. 
												identifier 
											&= 
											unary_expression Contact
												~ 
												parenthesized_expression Contact
													( 
													binary_expression Contact
														field_access Contact
															identifier 
															. 
															identifier 
														| 
														field_access Contact
															identifier 
															. 
															identifier 
													) 
										; 
									expression_statement c
										assignment_expression c
											field_access c
												identifier 
												. 
												identifier 
											= 
											decimal_integer_literal 
										; 
									expression_statement c
										assignment_expression c
											field_access c
												identifier 
												. 
												identifier 
											= 
											decimal_floating_point_literal 
										; 
									} 
							} 
					line_comment 
					for_statement minContact
						for 
						( 
						; 
						; 
						) 
						block minContact
							{ 
							line_comment 
							local_variable_declaration minContact
								type_identifier 
								variable_declarator minContact
									identifier 
									= 
									null_literal 
								; 
							local_variable_declaration minAlpha
								floating_point_type 
									float 
								variable_declarator minAlpha
									identifier 
									= 
									decimal_floating_point_literal 
								; 
							for_statement c
								for 
								( 
								local_variable_declaration c
									type_identifier 
									variable_declarator c
										identifier 
										= 
										field_access m_contactManager
											identifier 
											. 
											identifier 
									; 
								binary_expression c
									identifier 
									!= 
									null_literal 
								; 
								assignment_expression c
									identifier 
									= 
									field_access c
										identifier 
										. 
										identifier 
								) 
								block c
									{ 
									line_comment 
									if_statement c
										if 
										parenthesized_expression c
											( 
											binary_expression c
												method_invocation c
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
												== 
												false 
											) 
										block 
											{ 
											continue_statement 
												continue 
												; 
											} 
									line_comment 
									if_statement c
										if 
										parenthesized_expression c
											( 
											binary_expression c
												field_access c
													identifier 
													. 
													identifier 
												> 
												field_access Settings
													identifier 
													. 
													identifier 
											) 
										block 
											{ 
											continue_statement 
												continue 
												; 
											} 
									local_variable_declaration alpha
										floating_point_type 
											float 
										variable_declarator alpha
											identifier 
											= 
											decimal_floating_point_literal 
										; 
									if_statement c
										if 
										parenthesized_expression c
											( 
											binary_expression c
												parenthesized_expression c
													( 
													binary_expression c
														field_access c
															identifier 
															. 
															identifier 
														& 
														field_access Contact
															identifier 
															. 
															identifier 
													) 
												!= 
												decimal_integer_literal 
											) 
										block alpha
											{ 
											line_comment 
											expression_statement alpha
												assignment_expression alpha
													identifier 
													= 
													field_access c
														identifier 
														. 
														identifier 
												; 
											} 
										else 
										block fA
											{ 
											local_variable_declaration fA
												type_identifier 
												variable_declarator fA
													identifier 
													= 
													method_invocation c
														identifier 
														. 
														identifier 
														argument_list 
															( 
															) 
												; 
											local_variable_declaration fB
												type_identifier 
												variable_declarator fB
													identifier 
													= 
													method_invocation c
														identifier 
														. 
														identifier 
														argument_list 
															( 
															) 
												; 
											line_comment 
											if_statement fA
												if 
												parenthesized_expression fA
													( 
													binary_expression fA
														method_invocation fA
															identifier 
															. 
															identifier 
															argument_list 
																( 
																) 
														|| 
														method_invocation fB
															identifier 
															. 
															identifier 
															argument_list 
																( 
																) 
													) 
												block 
													{ 
													continue_statement 
														continue 
														; 
													} 
											local_variable_declaration bA
												type_identifier 
												variable_declarator bA
													identifier 
													= 
													method_invocation fA
														identifier 
														. 
														identifier 
														argument_list 
															( 
															) 
												; 
											local_variable_declaration bB
												type_identifier 
												variable_declarator bB
													identifier 
													= 
													method_invocation fB
														identifier 
														. 
														identifier 
														argument_list 
															( 
															) 
												; 
											local_variable_declaration typeA
												type_identifier 
												variable_declarator typeA
													identifier 
													= 
													field_access bA
														identifier 
														. 
														identifier 
												; 
											local_variable_declaration typeB
												type_identifier 
												variable_declarator typeB
													identifier 
													= 
													field_access bB
														identifier 
														. 
														identifier 
												; 
											assert_statement typeA
												assert 
												parenthesized_expression typeA
													( 
													binary_expression typeA
														binary_expression typeA
															identifier 
															== 
															field_access BodyType
																identifier 
																. 
																identifier 
														|| 
														binary_expression typeB
															identifier 
															== 
															field_access BodyType
																identifier 
																. 
																identifier 
													) 
												; 
											local_variable_declaration activeA
												boolean_type 
												variable_declarator activeA
													identifier 
													= 
													binary_expression bA
														method_invocation bA
															identifier 
															. 
															identifier 
															argument_list 
																( 
																) 
														&& 
														binary_expression typeA
															identifier 
															!= 
															field_access BodyType
																identifier 
																. 
																identifier 
												; 
											local_variable_declaration activeB
												boolean_type 
												variable_declarator activeB
													identifier 
													= 
													binary_expression bB
														method_invocation bB
															identifier 
															. 
															identifier 
															argument_list 
																( 
																) 
														&& 
														binary_expression typeB
															identifier 
															!= 
															field_access BodyType
																identifier 
																. 
																identifier 
												; 
											line_comment 
											if_statement activeA
												if 
												parenthesized_expression activeA
													( 
													binary_expression activeA
														binary_expression activeA
															identifier 
															== 
															false 
														&& 
														binary_expression activeB
															identifier 
															== 
															false 
													) 
												block 
													{ 
													continue_statement 
														continue 
														; 
													} 
											local_variable_declaration collideA
												boolean_type 
												variable_declarator collideA
													identifier 
													= 
													binary_expression bA
														method_invocation bA
															identifier 
															. 
															identifier 
															argument_list 
																( 
																) 
														|| 
														binary_expression typeA
															identifier 
															!= 
															field_access BodyType
																identifier 
																. 
																identifier 
												; 
											local_variable_declaration collideB
												boolean_type 
												variable_declarator collideB
													identifier 
													= 
													binary_expression bB
														method_invocation bB
															identifier 
															. 
															identifier 
															argument_list 
																( 
																) 
														|| 
														binary_expression typeB
															identifier 
															!= 
															field_access BodyType
																identifier 
																. 
																identifier 
												; 
											line_comment 
											if_statement collideA
												if 
												parenthesized_expression collideA
													( 
													binary_expression collideA
														binary_expression collideA
															identifier 
															== 
															false 
														&& 
														binary_expression collideB
															identifier 
															== 
															false 
													) 
												block 
													{ 
													continue_statement 
														continue 
														; 
													} 
											line_comment 
											line_comment 
											local_variable_declaration alpha0
												floating_point_type 
													float 
												variable_declarator alpha0
													identifier 
													= 
													field_access bA
														field_access bA
															identifier 
															. 
															identifier 
														. 
														identifier 
												; 
											if_statement bA
												if 
												parenthesized_expression bA
													( 
													binary_expression bA
														field_access bA
															field_access bA
																identifier 
																. 
																identifier 
															. 
															identifier 
														< 
														field_access bB
															field_access bB
																identifier 
																. 
																identifier 
															. 
															identifier 
													) 
												block alpha0
													{ 
													expression_statement alpha0
														assignment_expression alpha0
															identifier 
															= 
															field_access bB
																field_access bB
																	identifier 
																	. 
																	identifier 
																. 
																identifier 
														; 
													expression_statement bA
														method_invocation bA
															field_access bA
																identifier 
																. 
																identifier 
															. 
															identifier 
															argument_list alpha0
																( 
																identifier 
																) 
														; 
													} 
												else 
												if_statement bB
													if 
													parenthesized_expression bB
														( 
														binary_expression bB
															field_access bB
																field_access bB
																	identifier 
																	. 
																	identifier 
																. 
																identifier 
															< 
															field_access bA
																field_access bA
																	identifier 
																	. 
																	identifier 
																. 
																identifier 
														) 
													block alpha0
														{ 
														expression_statement alpha0
															assignment_expression alpha0
																identifier 
																= 
																field_access bA
																	field_access bA
																		identifier 
																		. 
																		identifier 
																	. 
																	identifier 
															; 
														expression_statement bB
															method_invocation bB
																field_access bB
																	identifier 
																	. 
																	identifier 
																. 
																identifier 
																argument_list alpha0
																	( 
																	identifier 
																	) 
															; 
														} 
											assert_statement alpha0
												assert 
												parenthesized_expression alpha0
													( 
													binary_expression alpha0
														identifier 
														< 
														decimal_floating_point_literal 
													) 
												; 
											local_variable_declaration indexA
												integral_type 
													int 
												variable_declarator indexA
													identifier 
													= 
													method_invocation c
														identifier 
														. 
														identifier 
														argument_list 
															( 
															) 
												; 
											local_variable_declaration indexB
												integral_type 
													int 
												variable_declarator indexB
													identifier 
													= 
													method_invocation c
														identifier 
														. 
														identifier 
														argument_list 
															( 
															) 
												; 
											line_comment 
											local_variable_declaration input
												modifiers 
													final 
												type_identifier 
												variable_declarator input
													identifier 
													= 
													identifier 
												; 
											expression_statement input
												method_invocation input
													field_access input
														identifier 
														. 
														identifier 
													. 
													identifier 
													argument_list fA
														( 
														method_invocation fA
															identifier 
															. 
															identifier 
															argument_list 
																( 
																) 
														, 
														identifier 
														) 
												; 
											expression_statement input
												method_invocation input
													field_access input
														identifier 
														. 
														identifier 
													. 
													identifier 
													argument_list fB
														( 
														method_invocation fB
															identifier 
															. 
															identifier 
															argument_list 
																( 
																) 
														, 
														identifier 
														) 
												; 
											expression_statement input
												method_invocation input
													field_access input
														identifier 
														. 
														identifier 
													. 
													identifier 
													argument_list bA
														( 
														field_access bA
															identifier 
															. 
															identifier 
														) 
												; 
											expression_statement input
												method_invocation input
													field_access input
														identifier 
														. 
														identifier 
													. 
													identifier 
													argument_list bB
														( 
														field_access bB
															identifier 
															. 
															identifier 
														) 
												; 
											expression_statement input
												assignment_expression input
													field_access input
														identifier 
														. 
														identifier 
													= 
													decimal_floating_point_literal 
												; 
											expression_statement pool
												method_invocation pool
													method_invocation pool
														identifier 
														. 
														identifier 
														argument_list 
															( 
															) 
													. 
													identifier 
													argument_list toiOutput
														( 
														identifier 
														, 
														identifier 
														) 
												; 
											line_comment 
											local_variable_declaration beta
												floating_point_type 
													float 
												variable_declarator beta
													identifier 
													= 
													field_access toiOutput
														identifier 
														. 
														identifier 
												; 
											if_statement toiOutput
												if 
												parenthesized_expression toiOutput
													( 
													binary_expression toiOutput
														field_access toiOutput
															identifier 
															. 
															identifier 
														== 
														field_access TOIOutputState
															identifier 
															. 
															identifier 
													) 
												block alpha
													{ 
													expression_statement alpha
														assignment_expression alpha
															identifier 
															= 
															method_invocation MathUtils
																identifier 
																. 
																identifier 
																argument_list alpha0
																	( 
																	binary_expression alpha0
																		identifier 
																		+ 
																		binary_expression alpha0
																			parenthesized_expression alpha0
																				( 
																				binary_expression alpha0
																					decimal_floating_point_literal 
																					- 
																					identifier 
																				) 
																			* 
																			identifier 
																	, 
																	decimal_floating_point_literal 
																	) 
														; 
													} 
												else 
												block alpha
													{ 
													expression_statement alpha
														assignment_expression alpha
															identifier 
															= 
															decimal_floating_point_literal 
														; 
													} 
											expression_statement c
												assignment_expression c
													field_access c
														identifier 
														. 
														identifier 
													= 
													identifier 
												; 
											expression_statement c
												assignment_expression c
													field_access c
														identifier 
														. 
														identifier 
													|= 
													field_access Contact
														identifier 
														. 
														identifier 
												; 
											} 
									if_statement alpha
										if 
										parenthesized_expression alpha
											( 
											binary_expression alpha
												identifier 
												< 
												identifier 
											) 
										block minContact
											{ 
											line_comment 
											expression_statement minContact
												assignment_expression minContact
													identifier 
													= 
													identifier 
												; 
											expression_statement minAlpha
												assignment_expression minAlpha
													identifier 
													= 
													identifier 
												; 
											} 
									} 
							if_statement minContact
								if 
								parenthesized_expression minContact
									( 
									binary_expression minContact
										binary_expression minContact
											identifier 
											== 
											null_literal 
										|| 
										binary_expression Settings
											binary_expression Settings
												decimal_floating_point_literal 
												- 
												binary_expression Settings
													decimal_floating_point_literal 
													* 
													field_access Settings
														identifier 
														. 
														identifier 
											< 
											identifier 
									) 
								block m_stepComplete
									{ 
									line_comment 
									expression_statement m_stepComplete
										assignment_expression m_stepComplete
											identifier 
											= 
											true 
										; 
									break_statement 
										break 
										; 
									} 
							line_comment 
							local_variable_declaration fA
								type_identifier 
								variable_declarator fA
									identifier 
									= 
									method_invocation minContact
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
								; 
							local_variable_declaration fB
								type_identifier 
								variable_declarator fB
									identifier 
									= 
									method_invocation minContact
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
								; 
							local_variable_declaration bA
								type_identifier 
								variable_declarator bA
									identifier 
									= 
									method_invocation fA
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
								; 
							local_variable_declaration bB
								type_identifier 
								variable_declarator bB
									identifier 
									= 
									method_invocation fB
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
								; 
							expression_statement backup1
								method_invocation backup1
									identifier 
									. 
									identifier 
									argument_list bA
										( 
										field_access bA
											identifier 
											. 
											identifier 
										) 
								; 
							expression_statement backup2
								method_invocation backup2
									identifier 
									. 
									identifier 
									argument_list bB
										( 
										field_access bB
											identifier 
											. 
											identifier 
										) 
								; 
							expression_statement bA
								method_invocation bA
									identifier 
									. 
									identifier 
									argument_list minAlpha
										( 
										identifier 
										) 
								; 
							expression_statement bB
								method_invocation bB
									identifier 
									. 
									identifier 
									argument_list minAlpha
										( 
										identifier 
										) 
								; 
							line_comment 
							expression_statement minContact
								method_invocation minContact
									identifier 
									. 
									identifier 
									argument_list m_contactManager
										( 
										field_access m_contactManager
											identifier 
											. 
											identifier 
										) 
								; 
							expression_statement minContact
								assignment_expression minContact
									field_access minContact
										identifier 
										. 
										identifier 
									&= 
									unary_expression Contact
										~ 
										field_access Contact
											identifier 
											. 
											identifier 
								; 
							expression_statement minContact
								update_expression minContact
									++ 
									field_access minContact
										identifier 
										. 
										identifier 
								; 
							line_comment 
							if_statement minContact
								if 
								parenthesized_expression minContact
									( 
									binary_expression minContact
										binary_expression minContact
											method_invocation minContact
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
											== 
											false 
										|| 
										binary_expression minContact
											method_invocation minContact
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
											== 
											false 
									) 
								block minContact
									{ 
									line_comment 
									expression_statement minContact
										method_invocation minContact
											identifier 
											. 
											identifier 
											argument_list 
												( 
												false 
												) 
										; 
									expression_statement bA
										method_invocation bA
											field_access bA
												identifier 
												. 
												identifier 
											. 
											identifier 
											argument_list backup1
												( 
												identifier 
												) 
										; 
									expression_statement bB
										method_invocation bB
											field_access bB
												identifier 
												. 
												identifier 
											. 
											identifier 
											argument_list backup2
												( 
												identifier 
												) 
										; 
									expression_statement bA
										method_invocation bA
											identifier 
											. 
											identifier 
											argument_list 
												( 
												) 
										; 
									expression_statement bB
										method_invocation bB
											identifier 
											. 
											identifier 
											argument_list 
												( 
												) 
										; 
									continue_statement 
										continue 
										; 
									} 
							expression_statement bA
								method_invocation bA
									identifier 
									. 
									identifier 
									argument_list 
										( 
										true 
										) 
								; 
							expression_statement bB
								method_invocation bB
									identifier 
									. 
									identifier 
									argument_list 
										( 
										true 
										) 
								; 
							line_comment 
							expression_statement island
								method_invocation island
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								; 
							expression_statement island
								method_invocation island
									identifier 
									. 
									identifier 
									argument_list bA
										( 
										identifier 
										) 
								; 
							expression_statement island
								method_invocation island
									identifier 
									. 
									identifier 
									argument_list bB
										( 
										identifier 
										) 
								; 
							expression_statement island
								method_invocation island
									identifier 
									. 
									identifier 
									argument_list minContact
										( 
										identifier 
										) 
								; 
							expression_statement bA
								assignment_expression bA
									field_access bA
										identifier 
										. 
										identifier 
									|= 
									field_access Body
										identifier 
										. 
										identifier 
								; 
							expression_statement bB
								assignment_expression bB
									field_access bB
										identifier 
										. 
										identifier 
									|= 
									field_access Body
										identifier 
										. 
										identifier 
								; 
							expression_statement minContact
								assignment_expression minContact
									field_access minContact
										identifier 
										. 
										identifier 
									|= 
									field_access Contact
										identifier 
										. 
										identifier 
								; 
							line_comment 
							expression_statement tempBodies
								assignment_expression tempBodies
									array_access tempBodies
										identifier 
										[ 
										decimal_integer_literal 
										] 
									= 
									identifier 
								; 
							expression_statement tempBodies
								assignment_expression tempBodies
									array_access tempBodies
										identifier 
										[ 
										decimal_integer_literal 
										] 
									= 
									identifier 
								; 
							for_statement i
								for 
								( 
								local_variable_declaration i
									integral_type 
										int 
									variable_declarator i
										identifier 
										= 
										decimal_integer_literal 
									; 
								binary_expression i
									identifier 
									< 
									decimal_integer_literal 
								; 
								update_expression i
									++ 
									identifier 
								) 
								block body
									{ 
									local_variable_declaration body
										type_identifier 
										variable_declarator body
											identifier 
											= 
											array_access tempBodies
												identifier 
												[ 
												identifier 
												] 
										; 
									if_statement body
										if 
										parenthesized_expression body
											( 
											binary_expression body
												field_access body
													identifier 
													. 
													identifier 
												== 
												field_access BodyType
													identifier 
													. 
													identifier 
											) 
										block ce
											{ 
											for_statement ce
												for 
												( 
												local_variable_declaration ce
													type_identifier 
													variable_declarator ce
														identifier 
														= 
														field_access body
															identifier 
															. 
															identifier 
													; 
												binary_expression ce
													identifier 
													!= 
													null_literal 
												; 
												assignment_expression ce
													identifier 
													= 
													field_access ce
														identifier 
														. 
														identifier 
												) 
												block island
													{ 
													if_statement island
														if 
														parenthesized_expression island
															( 
															binary_expression island
																field_access island
																	identifier 
																	. 
																	identifier 
																== 
																field_access island
																	identifier 
																	. 
																	identifier 
															) 
														block 
															{ 
															break_statement 
																break 
																; 
															} 
													if_statement island
														if 
														parenthesized_expression island
															( 
															binary_expression island
																field_access island
																	identifier 
																	. 
																	identifier 
																== 
																field_access island
																	identifier 
																	. 
																	identifier 
															) 
														block 
															{ 
															break_statement 
																break 
																; 
															} 
													local_variable_declaration contact
														type_identifier 
														variable_declarator contact
															identifier 
															= 
															field_access ce
																identifier 
																. 
																identifier 
														; 
													line_comment 
													if_statement contact
														if 
														parenthesized_expression contact
															( 
															binary_expression contact
																parenthesized_expression contact
																	( 
																	binary_expression contact
																		field_access contact
																			identifier 
																			. 
																			identifier 
																		& 
																		field_access Contact
																			identifier 
																			. 
																			identifier 
																	) 
																!= 
																decimal_integer_literal 
															) 
														block 
															{ 
															continue_statement 
																continue 
																; 
															} 
													line_comment 
													local_variable_declaration other
														type_identifier 
														variable_declarator other
															identifier 
															= 
															field_access ce
																identifier 
																. 
																identifier 
														; 
													if_statement other
														if 
														parenthesized_expression other
															( 
															binary_expression other
																binary_expression other
																	binary_expression other
																		field_access other
																			identifier 
																			. 
																			identifier 
																		== 
																		field_access BodyType
																			identifier 
																			. 
																			identifier 
																	&& 
																	binary_expression body
																		method_invocation body
																			identifier 
																			. 
																			identifier 
																			argument_list 
																				( 
																				) 
																		== 
																		false 
																&& 
																binary_expression other
																	method_invocation other
																		identifier 
																		. 
																		identifier 
																		argument_list 
																			( 
																			) 
																	== 
																	false 
															) 
														block 
															{ 
															continue_statement 
																continue 
																; 
															} 
													line_comment 
													local_variable_declaration sensorA
														boolean_type 
														variable_declarator sensorA
															identifier 
															= 
															field_access contact
																field_access contact
																	identifier 
																	. 
																	identifier 
																. 
																identifier 
														; 
													local_variable_declaration sensorB
														boolean_type 
														variable_declarator sensorB
															identifier 
															= 
															field_access contact
																field_access contact
																	identifier 
																	. 
																	identifier 
																. 
																identifier 
														; 
													if_statement sensorA
														if 
														parenthesized_expression sensorA
															( 
															binary_expression sensorA
																identifier 
																|| 
																identifier 
															) 
														block 
															{ 
															continue_statement 
																continue 
																; 
															} 
													line_comment 
													expression_statement backup1
														method_invocation backup1
															identifier 
															. 
															identifier 
															argument_list other
																( 
																field_access other
																	identifier 
																	. 
																	identifier 
																) 
														; 
													if_statement other
														if 
														parenthesized_expression other
															( 
															binary_expression other
																parenthesized_expression other
																	( 
																	binary_expression other
																		field_access other
																			identifier 
																			. 
																			identifier 
																		& 
																		field_access Body
																			identifier 
																			. 
																			identifier 
																	) 
																== 
																decimal_integer_literal 
															) 
														block other
															{ 
															expression_statement other
																method_invocation other
																	identifier 
																	. 
																	identifier 
																	argument_list minAlpha
																		( 
																		identifier 
																		) 
																; 
															} 
													line_comment 
													expression_statement contact
														method_invocation contact
															identifier 
															. 
															identifier 
															argument_list m_contactManager
																( 
																field_access m_contactManager
																	identifier 
																	. 
																	identifier 
																) 
														; 
													line_comment 
													if_statement contact
														if 
														parenthesized_expression contact
															( 
															binary_expression contact
																method_invocation contact
																	identifier 
																	. 
																	identifier 
																	argument_list 
																		( 
																		) 
																== 
																false 
															) 
														block other
															{ 
															expression_statement other
																method_invocation other
																	field_access other
																		identifier 
																		. 
																		identifier 
																	. 
																	identifier 
																	argument_list backup1
																		( 
																		identifier 
																		) 
																; 
															expression_statement other
																method_invocation other
																	identifier 
																	. 
																	identifier 
																	argument_list 
																		( 
																		) 
																; 
															continue_statement 
																continue 
																; 
															} 
													line_comment 
													if_statement contact
														if 
														parenthesized_expression contact
															( 
															binary_expression contact
																method_invocation contact
																	identifier 
																	. 
																	identifier 
																	argument_list 
																		( 
																		) 
																== 
																false 
															) 
														block other
															{ 
															expression_statement other
																method_invocation other
																	field_access other
																		identifier 
																		. 
																		identifier 
																	. 
																	identifier 
																	argument_list backup1
																		( 
																		identifier 
																		) 
																; 
															expression_statement other
																method_invocation other
																	identifier 
																	. 
																	identifier 
																	argument_list 
																		( 
																		) 
																; 
															continue_statement 
																continue 
																; 
															} 
													line_comment 
													expression_statement contact
														assignment_expression contact
															field_access contact
																identifier 
																. 
																identifier 
															|= 
															field_access Contact
																identifier 
																. 
																identifier 
														; 
													expression_statement island
														method_invocation island
															identifier 
															. 
															identifier 
															argument_list contact
																( 
																identifier 
																) 
														; 
													line_comment 
													if_statement other
														if 
														parenthesized_expression other
															( 
															binary_expression other
																parenthesized_expression other
																	( 
																	binary_expression other
																		field_access other
																			identifier 
																			. 
																			identifier 
																		& 
																		field_access Body
																			identifier 
																			. 
																			identifier 
																	) 
																!= 
																decimal_integer_literal 
															) 
														block 
															{ 
															continue_statement 
																continue 
																; 
															} 
													line_comment 
													expression_statement other
														assignment_expression other
															field_access other
																identifier 
																. 
																identifier 
															|= 
															field_access Body
																identifier 
																. 
																identifier 
														; 
													if_statement other
														if 
														parenthesized_expression other
															( 
															binary_expression other
																field_access other
																	identifier 
																	. 
																	identifier 
																!= 
																field_access BodyType
																	identifier 
																	. 
																	identifier 
															) 
														block other
															{ 
															expression_statement other
																method_invocation other
																	identifier 
																	. 
																	identifier 
																	argument_list 
																		( 
																		true 
																		) 
																; 
															} 
													expression_statement island
														method_invocation island
															identifier 
															. 
															identifier 
															argument_list other
																( 
																identifier 
																) 
														; 
													} 
											} 
									} 
							expression_statement subStep
								assignment_expression subStep
									field_access subStep
										identifier 
										. 
										identifier 
									= 
									binary_expression minAlpha
										parenthesized_expression minAlpha
											( 
											binary_expression minAlpha
												decimal_floating_point_literal 
												- 
												identifier 
											) 
										* 
										field_access step
											identifier 
											. 
											identifier 
								; 
							expression_statement subStep
								assignment_expression subStep
									field_access subStep
										identifier 
										. 
										identifier 
									= 
									binary_expression subStep
										decimal_floating_point_literal 
										/ 
										field_access subStep
											identifier 
											. 
											identifier 
								; 
							expression_statement subStep
								assignment_expression subStep
									field_access subStep
										identifier 
										. 
										identifier 
									= 
									decimal_floating_point_literal 
								; 
							expression_statement subStep
								assignment_expression subStep
									field_access subStep
										identifier 
										. 
										identifier 
									= 
									decimal_integer_literal 
								; 
							expression_statement subStep
								assignment_expression subStep
									field_access subStep
										identifier 
										. 
										identifier 
									= 
									field_access step
										identifier 
										. 
										identifier 
								; 
							expression_statement subStep
								assignment_expression subStep
									field_access subStep
										identifier 
										. 
										identifier 
									= 
									false 
								; 
							expression_statement island
								method_invocation island
									identifier 
									. 
									identifier 
									argument_list subStep
										( 
										identifier 
										, 
										field_access bA
											identifier 
											. 
											identifier 
										, 
										field_access bB
											identifier 
											. 
											identifier 
										) 
								; 
							line_comment 
							for_statement i
								for 
								( 
								local_variable_declaration i
									integral_type 
										int 
									variable_declarator i
										identifier 
										= 
										decimal_integer_literal 
									; 
								binary_expression i
									identifier 
									< 
									field_access island
										identifier 
										. 
										identifier 
								; 
								update_expression i
									++ 
									identifier 
								) 
								block body
									{ 
									local_variable_declaration body
										type_identifier 
										variable_declarator body
											identifier 
											= 
											array_access island
												field_access island
													identifier 
													. 
													identifier 
												[ 
												identifier 
												] 
										; 
									expression_statement body
										assignment_expression body
											field_access body
												identifier 
												. 
												identifier 
											&= 
											unary_expression Body
												~ 
												field_access Body
													identifier 
													. 
													identifier 
										; 
									if_statement body
										if 
										parenthesized_expression body
											( 
											binary_expression body
												field_access body
													identifier 
													. 
													identifier 
												!= 
												field_access BodyType
													identifier 
													. 
													identifier 
											) 
										block 
											{ 
											continue_statement 
												continue 
												; 
											} 
									expression_statement body
										method_invocation body
											identifier 
											. 
											identifier 
											argument_list 
												( 
												) 
										; 
									line_comment 
									for_statement ce
										for 
										( 
										local_variable_declaration ce
											type_identifier 
											variable_declarator ce
												identifier 
												= 
												field_access body
													identifier 
													. 
													identifier 
											; 
										binary_expression ce
											identifier 
											!= 
											null_literal 
										; 
										assignment_expression ce
											identifier 
											= 
											field_access ce
												identifier 
												. 
												identifier 
										) 
										block ce
											{ 
											expression_statement ce
												assignment_expression ce
													field_access ce
														field_access ce
															identifier 
															. 
															identifier 
														. 
														identifier 
													&= 
													unary_expression Contact
														~ 
														parenthesized_expression Contact
															( 
															binary_expression Contact
																field_access Contact
																	identifier 
																	. 
																	identifier 
																| 
																field_access Contact
																	identifier 
																	. 
																	identifier 
															) 
												; 
											} 
									} 
							line_comment 
							line_comment 
							expression_statement m_contactManager
								method_invocation m_contactManager
									identifier 
									. 
									identifier 
									argument_list 
										( 
										) 
								; 
							if_statement m_subStepping
								if 
								parenthesized_expression m_subStepping
									( 
									identifier 
									) 
								block m_stepComplete
									{ 
									expression_statement m_stepComplete
										assignment_expression m_stepComplete
											identifier 
											= 
											false 
										; 
									break_statement 
										break 
										; 
									} 
							} 
					} 
			method_declaration drawJoint
				modifiers 
					private 
				void_type 
				identifier 
				formal_parameters joint
					( 
					formal_parameter joint
						type_identifier 
						identifier 
					) 
				block bodyA
					{ 
					local_variable_declaration bodyA
						type_identifier 
						variable_declarator bodyA
							identifier 
							= 
							method_invocation joint
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					local_variable_declaration bodyB
						type_identifier 
						variable_declarator bodyB
							identifier 
							= 
							method_invocation joint
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					local_variable_declaration xf1
						type_identifier 
						variable_declarator xf1
							identifier 
							= 
							method_invocation bodyA
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					local_variable_declaration xf2
						type_identifier 
						variable_declarator xf2
							identifier 
							= 
							method_invocation bodyB
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					local_variable_declaration x1
						type_identifier 
						variable_declarator x1
							identifier 
							= 
							field_access xf1
								identifier 
								. 
								identifier 
						; 
					local_variable_declaration x2
						type_identifier 
						variable_declarator x2
							identifier 
							= 
							field_access xf2
								identifier 
								. 
								identifier 
						; 
					local_variable_declaration p1
						type_identifier 
						variable_declarator p1
							identifier 
							= 
							method_invocation pool
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					local_variable_declaration p2
						type_identifier 
						variable_declarator p2
							identifier 
							= 
							method_invocation pool
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					expression_statement joint
						method_invocation joint
							identifier 
							. 
							identifier 
							argument_list p1
								( 
								identifier 
								) 
						; 
					expression_statement joint
						method_invocation joint
							identifier 
							. 
							identifier 
							argument_list p2
								( 
								identifier 
								) 
						; 
					expression_statement color
						method_invocation color
							identifier 
							. 
							identifier 
							argument_list 
								( 
								decimal_floating_point_literal 
								, 
								decimal_floating_point_literal 
								, 
								decimal_floating_point_literal 
								) 
						; 
					switch_expression joint
						switch 
						parenthesized_expression joint
							( 
							method_invocation joint
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
							) 
						switch_block DISTANCE
							{ 
							line_comment 
							switch_block_statement_group DISTANCE
								switch_label DISTANCE
									case 
									identifier 
								: 
								expression_statement m_debugDraw
									method_invocation m_debugDraw
										identifier 
										. 
										identifier 
										argument_list p1
											( 
											identifier 
											, 
											identifier 
											, 
											identifier 
											) 
									; 
								break_statement 
									break 
									; 
							switch_block_statement_group PULLEY
								switch_label PULLEY
									case 
									identifier 
								: 
								block pulley
									{ 
									local_variable_declaration pulley
										type_identifier 
										variable_declarator pulley
											identifier 
											= 
											cast_expression joint
												( 
												type_identifier 
												) 
												identifier 
										; 
									local_variable_declaration s1
										type_identifier 
										variable_declarator s1
											identifier 
											= 
											method_invocation pulley
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
										; 
									local_variable_declaration s2
										type_identifier 
										variable_declarator s2
											identifier 
											= 
											method_invocation pulley
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
										; 
									expression_statement m_debugDraw
										method_invocation m_debugDraw
											identifier 
											. 
											identifier 
											argument_list s1
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									expression_statement m_debugDraw
										method_invocation m_debugDraw
											identifier 
											. 
											identifier 
											argument_list s2
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									expression_statement m_debugDraw
										method_invocation m_debugDraw
											identifier 
											. 
											identifier 
											argument_list s1
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									} 
								break_statement 
									break 
									; 
							switch_block_statement_group CONSTANT_VOLUME
								switch_label CONSTANT_VOLUME
									case 
									identifier 
								: 
							switch_block_statement_group MOUSE
								switch_label MOUSE
									case 
									identifier 
								: 
								line_comment 
								break_statement 
									break 
									; 
							switch_block_statement_group m_debugDraw
								switch_label 
									default 
								: 
								expression_statement m_debugDraw
									method_invocation m_debugDraw
										identifier 
										. 
										identifier 
										argument_list x1
											( 
											identifier 
											, 
											identifier 
											, 
											identifier 
											) 
									; 
								expression_statement m_debugDraw
									method_invocation m_debugDraw
										identifier 
										. 
										identifier 
										argument_list p1
											( 
											identifier 
											, 
											identifier 
											, 
											identifier 
											) 
									; 
								expression_statement m_debugDraw
									method_invocation m_debugDraw
										identifier 
										. 
										identifier 
										argument_list x2
											( 
											identifier 
											, 
											identifier 
											, 
											identifier 
											) 
									; 
							} 
					expression_statement pool
						method_invocation pool
							identifier 
							. 
							identifier 
							argument_list 
								( 
								decimal_integer_literal 
								) 
						; 
					} 
			line_comment 
			line_comment 
			field_declaration LIQUID_INT
				modifiers 
					private 
					static 
				type_identifier 
				variable_declarator LIQUID_INT
					identifier 
					= 
					decimal_integer_literal 
				; 
			field_declaration liquidLength
				modifiers 
					private 
				floating_point_type 
					float 
				variable_declarator liquidLength
					identifier 
					= 
					decimal_floating_point_literal 
				; 
			field_declaration averageLinearVel
				modifiers 
					private 
				floating_point_type 
					float 
				variable_declarator averageLinearVel
					identifier 
					= 
					unary_expression 
						- 
						decimal_integer_literal 
				; 
			field_declaration liquidOffset
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator liquidOffset
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration circCenterMoved
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator circCenterMoved
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration liquidColor
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator liquidColor
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							decimal_floating_point_literal 
							, 
							decimal_floating_point_literal 
							, 
							decimal_floating_point_literal 
							) 
				; 
			field_declaration center
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator center
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration axis
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator axis
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration v1
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator v1
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration v2
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator v2
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration tlvertices
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator tlvertices
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			method_declaration drawShape
				modifiers 
					private 
				void_type 
				identifier 
				formal_parameters fixture
					( 
					formal_parameter fixture
						type_identifier 
						identifier 
					, 
					formal_parameter xf
						type_identifier 
						identifier 
					, 
					formal_parameter color
						type_identifier 
						identifier 
					, 
					formal_parameter wireframe
						boolean_type 
						identifier 
					) 
				block fixture
					{ 
					switch_expression fixture
						switch 
						parenthesized_expression fixture
							( 
							method_invocation fixture
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
							) 
						switch_block CIRCLE
							{ 
							switch_block_statement_group CIRCLE
								switch_label CIRCLE
									case 
									identifier 
								: 
								block circle
									{ 
									local_variable_declaration circle
										type_identifier 
										variable_declarator circle
											identifier 
											= 
											cast_expression fixture
												( 
												type_identifier 
												) 
												method_invocation fixture
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
										; 
									line_comment 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xf
												( 
												identifier 
												, 
												field_access circle
													identifier 
													. 
													identifier 
												, 
												identifier 
												) 
										; 
									local_variable_declaration radius
										floating_point_type 
											float 
										variable_declarator radius
											identifier 
											= 
											field_access circle
												identifier 
												. 
												identifier 
										; 
									expression_statement xf
										method_invocation xf
											field_access xf
												identifier 
												. 
												identifier 
											. 
											identifier 
											argument_list axis
												( 
												identifier 
												) 
										; 
									if_statement fixture
										if 
										parenthesized_expression fixture
											( 
											binary_expression fixture
												binary_expression fixture
													method_invocation fixture
														identifier 
														. 
														identifier 
														argument_list 
															( 
															) 
													!= 
													null_literal 
												&& 
												method_invocation fixture
													method_invocation fixture
														identifier 
														. 
														identifier 
														argument_list 
															( 
															) 
													. 
													identifier 
													argument_list LIQUID_INT
														( 
														identifier 
														) 
											) 
										block b
											{ 
											local_variable_declaration b
												type_identifier 
												variable_declarator b
													identifier 
													= 
													method_invocation fixture
														identifier 
														. 
														identifier 
														argument_list 
															( 
															) 
												; 
											expression_statement liquidOffset
												method_invocation liquidOffset
													identifier 
													. 
													identifier 
													argument_list b
														( 
														field_access b
															identifier 
															. 
															identifier 
														) 
												; 
											local_variable_declaration linVelLength
												floating_point_type 
													float 
												variable_declarator linVelLength
													identifier 
													= 
													method_invocation b
														field_access b
															identifier 
															. 
															identifier 
														. 
														identifier 
														argument_list 
															( 
															) 
												; 
											if_statement averageLinearVel
												if 
												parenthesized_expression averageLinearVel
													( 
													binary_expression averageLinearVel
														identifier 
														== 
														unary_expression 
															- 
															decimal_integer_literal 
													) 
												block averageLinearVel
													{ 
													expression_statement averageLinearVel
														assignment_expression averageLinearVel
															identifier 
															= 
															identifier 
														; 
													} 
												else 
												block averageLinearVel
													{ 
													expression_statement averageLinearVel
														assignment_expression averageLinearVel
															identifier 
															= 
															binary_expression averageLinearVel
																binary_expression averageLinearVel
																	decimal_floating_point_literal 
																	* 
																	identifier 
																+ 
																binary_expression linVelLength
																	decimal_floating_point_literal 
																	* 
																	identifier 
														; 
													} 
											expression_statement liquidOffset
												method_invocation liquidOffset
													identifier 
													. 
													identifier 
													argument_list liquidLength
														( 
														binary_expression liquidLength
															binary_expression liquidLength
																identifier 
																/ 
																identifier 
															/ 
															decimal_integer_literal 
														) 
												; 
											expression_statement circCenterMoved
												method_invocation circCenterMoved
													method_invocation circCenterMoved
														identifier 
														. 
														identifier 
														argument_list center
															( 
															identifier 
															) 
													. 
													identifier 
													argument_list liquidOffset
														( 
														identifier 
														) 
												; 
											expression_statement center
												method_invocation center
													identifier 
													. 
													identifier 
													argument_list liquidOffset
														( 
														identifier 
														) 
												; 
											expression_statement m_debugDraw
												method_invocation m_debugDraw
													identifier 
													. 
													identifier 
													argument_list center
														( 
														identifier 
														, 
														identifier 
														, 
														identifier 
														) 
												; 
											return_statement 
												return 
												; 
											} 
									if_statement wireframe
										if 
										parenthesized_expression wireframe
											( 
											identifier 
											) 
										block m_debugDraw
											{ 
											expression_statement m_debugDraw
												method_invocation m_debugDraw
													identifier 
													. 
													identifier 
													argument_list center
														( 
														identifier 
														, 
														identifier 
														, 
														identifier 
														, 
														identifier 
														) 
												; 
											} 
										else 
										block m_debugDraw
											{ 
											expression_statement m_debugDraw
												method_invocation m_debugDraw
													identifier 
													. 
													identifier 
													argument_list center
														( 
														identifier 
														, 
														identifier 
														, 
														identifier 
														, 
														identifier 
														) 
												; 
											} 
									} 
								break_statement 
									break 
									; 
							switch_block_statement_group POLYGON
								switch_label POLYGON
									case 
									identifier 
								: 
								block poly
									{ 
									local_variable_declaration poly
										type_identifier 
										variable_declarator poly
											identifier 
											= 
											cast_expression fixture
												( 
												type_identifier 
												) 
												method_invocation fixture
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
										; 
									local_variable_declaration vertexCount
										integral_type 
											int 
										variable_declarator vertexCount
											identifier 
											= 
											field_access poly
												identifier 
												. 
												identifier 
										; 
									assert_statement vertexCount
										assert 
										parenthesized_expression vertexCount
											( 
											binary_expression vertexCount
												identifier 
												<= 
												field_access Settings
													identifier 
													. 
													identifier 
											) 
										; 
									local_variable_declaration vertices
										array_type 
											type_identifier 
											dimensions 
												[ 
												] 
										variable_declarator vertices
											identifier 
											= 
											method_invocation tlvertices
												identifier 
												. 
												identifier 
												argument_list Settings
													( 
													field_access Settings
														identifier 
														. 
														identifier 
													) 
										; 
									for_statement i
										for 
										( 
										local_variable_declaration i
											integral_type 
												int 
											variable_declarator i
												identifier 
												= 
												decimal_integer_literal 
											; 
										binary_expression i
											identifier 
											< 
											identifier 
										; 
										update_expression i
											++ 
											identifier 
										) 
										block Transform
											{ 
											line_comment 
											expression_statement Transform
												method_invocation Transform
													identifier 
													. 
													identifier 
													argument_list xf
														( 
														identifier 
														, 
														array_access poly
															field_access poly
																identifier 
																. 
																identifier 
															[ 
															identifier 
															] 
														, 
														array_access vertices
															identifier 
															[ 
															identifier 
															] 
														) 
												; 
											} 
									if_statement wireframe
										if 
										parenthesized_expression wireframe
											( 
											identifier 
											) 
										block m_debugDraw
											{ 
											expression_statement m_debugDraw
												method_invocation m_debugDraw
													identifier 
													. 
													identifier 
													argument_list vertices
														( 
														identifier 
														, 
														identifier 
														, 
														identifier 
														) 
												; 
											} 
										else 
										block m_debugDraw
											{ 
											expression_statement m_debugDraw
												method_invocation m_debugDraw
													identifier 
													. 
													identifier 
													argument_list vertices
														( 
														identifier 
														, 
														identifier 
														, 
														identifier 
														) 
												; 
											} 
									} 
								break_statement 
									break 
									; 
							switch_block_statement_group EDGE
								switch_label EDGE
									case 
									identifier 
								: 
								block edge
									{ 
									local_variable_declaration edge
										type_identifier 
										variable_declarator edge
											identifier 
											= 
											cast_expression fixture
												( 
												type_identifier 
												) 
												method_invocation fixture
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
										; 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xf
												( 
												identifier 
												, 
												field_access edge
													identifier 
													. 
													identifier 
												, 
												identifier 
												) 
										; 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xf
												( 
												identifier 
												, 
												field_access edge
													identifier 
													. 
													identifier 
												, 
												identifier 
												) 
										; 
									expression_statement m_debugDraw
										method_invocation m_debugDraw
											identifier 
											. 
											identifier 
											argument_list v1
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									} 
								break_statement 
									break 
									; 
							switch_block_statement_group CHAIN
								switch_label CHAIN
									case 
									identifier 
								: 
								block chain
									{ 
									local_variable_declaration chain
										type_identifier 
										variable_declarator chain
											identifier 
											= 
											cast_expression fixture
												( 
												type_identifier 
												) 
												method_invocation fixture
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
										; 
									local_variable_declaration count
										integral_type 
											int 
										variable_declarator count
											identifier 
											= 
											field_access chain
												identifier 
												. 
												identifier 
										; 
									local_variable_declaration vertices
										array_type 
											type_identifier 
											dimensions 
												[ 
												] 
										variable_declarator vertices
											identifier 
											= 
											field_access chain
												identifier 
												. 
												identifier 
										; 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xf
												( 
												identifier 
												, 
												array_access vertices
													identifier 
													[ 
													decimal_integer_literal 
													] 
												, 
												identifier 
												) 
										; 
									for_statement i
										for 
										( 
										local_variable_declaration i
											integral_type 
												int 
											variable_declarator i
												identifier 
												= 
												decimal_integer_literal 
											; 
										binary_expression i
											identifier 
											< 
											identifier 
										; 
										update_expression i
											++ 
											identifier 
										) 
										block Transform
											{ 
											expression_statement Transform
												method_invocation Transform
													identifier 
													. 
													identifier 
													argument_list xf
														( 
														identifier 
														, 
														array_access vertices
															identifier 
															[ 
															identifier 
															] 
														, 
														identifier 
														) 
												; 
											expression_statement m_debugDraw
												method_invocation m_debugDraw
													identifier 
													. 
													identifier 
													argument_list v1
														( 
														identifier 
														, 
														identifier 
														, 
														identifier 
														) 
												; 
											expression_statement m_debugDraw
												method_invocation m_debugDraw
													identifier 
													. 
													identifier 
													argument_list v1
														( 
														identifier 
														, 
														decimal_floating_point_literal 
														, 
														identifier 
														) 
												; 
											expression_statement v1
												method_invocation v1
													identifier 
													. 
													identifier 
													argument_list v2
														( 
														identifier 
														) 
												; 
											} 
									} 
								break_statement 
									break 
									; 
							switch_block_statement_group 
								switch_label 
									default 
								: 
								break_statement 
									break 
									; 
							} 
					} 
			method_declaration drawParticleSystem
				modifiers 
					private 
				void_type 
				identifier 
				formal_parameters system
					( 
					formal_parameter system
						type_identifier 
						identifier 
					) 
				block wireframe
					{ 
					local_variable_declaration wireframe
						boolean_type 
						variable_declarator wireframe
							identifier 
							= 
							binary_expression m_debugDraw
								parenthesized_expression m_debugDraw
									( 
									binary_expression m_debugDraw
										method_invocation m_debugDraw
											identifier 
											. 
											identifier 
											argument_list 
												( 
												) 
										& 
										field_access DebugDraw
											identifier 
											. 
											identifier 
									) 
								!= 
								decimal_integer_literal 
						; 
					local_variable_declaration particleCount
						integral_type 
							int 
						variable_declarator particleCount
							identifier 
							= 
							method_invocation system
								identifier 
								. 
								identifier 
								argument_list 
									( 
									) 
						; 
					if_statement particleCount
						if 
						parenthesized_expression particleCount
							( 
							binary_expression particleCount
								identifier 
								!= 
								decimal_integer_literal 
							) 
						block particleRadius
							{ 
							local_variable_declaration particleRadius
								floating_point_type 
									float 
								variable_declarator particleRadius
									identifier 
									= 
									method_invocation system
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
								; 
							local_variable_declaration positionBuffer
								array_type 
									type_identifier 
									dimensions 
										[ 
										] 
								variable_declarator positionBuffer
									identifier 
									= 
									method_invocation system
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
								; 
							local_variable_declaration colorBuffer
								array_type 
									type_identifier 
									dimensions 
										[ 
										] 
								variable_declarator colorBuffer
									identifier 
									= 
									null_literal 
								; 
							if_statement system
								if 
								parenthesized_expression system
									( 
									binary_expression system
										field_access system
											field_access system
												identifier 
												. 
												identifier 
											. 
											identifier 
										!= 
										null_literal 
									) 
								block colorBuffer
									{ 
									expression_statement colorBuffer
										assignment_expression colorBuffer
											identifier 
											= 
											method_invocation system
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
										; 
									} 
							if_statement wireframe
								if 
								parenthesized_expression wireframe
									( 
									identifier 
									) 
								block m_debugDraw
									{ 
									expression_statement m_debugDraw
										method_invocation m_debugDraw
											identifier 
											. 
											identifier 
											argument_list positionBuffer
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									} 
								else 
								block m_debugDraw
									{ 
									expression_statement m_debugDraw
										method_invocation m_debugDraw
											identifier 
											. 
											identifier 
											argument_list positionBuffer
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									} 
							} 
					} 
			block_comment 
			method_declaration createParticle
				modifiers 
					public 
				integral_type 
					int 
				identifier 
				formal_parameters def
					( 
					formal_parameter def
						type_identifier 
						identifier 
					) 
				block isLocked
					{ 
					assert_statement isLocked
						assert 
						parenthesized_expression isLocked
							( 
							binary_expression isLocked
								method_invocation isLocked
									identifier 
									argument_list 
										( 
										) 
								== 
								false 
							) 
						; 
					if_statement isLocked
						if 
						parenthesized_expression isLocked
							( 
							method_invocation isLocked
								identifier 
								argument_list 
									( 
									) 
							) 
						block 
							{ 
							return_statement 
								return 
								decimal_integer_literal 
								; 
							} 
					local_variable_declaration p
						integral_type 
							int 
						variable_declarator p
							identifier 
							= 
							method_invocation m_particleSystem
								identifier 
								. 
								identifier 
								argument_list def
									( 
									identifier 
									) 
						; 
					return_statement p
						return 
						identifier 
						; 
					} 
			block_comment 
			method_declaration destroyParticle
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters index
					( 
					formal_parameter index
						integral_type 
							int 
						identifier 
					) 
				block destroyParticle
					{ 
					expression_statement destroyParticle
						method_invocation destroyParticle
							identifier 
							argument_list index
								( 
								identifier 
								, 
								false 
								) 
						; 
					} 
			block_comment 
			method_declaration destroyParticle
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters index
					( 
					formal_parameter index
						integral_type 
							int 
						identifier 
					, 
					formal_parameter callDestructionListener
						boolean_type 
						identifier 
					) 
				block m_particleSystem
					{ 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list index
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration destroyParticlesInShape
				modifiers 
					public 
				integral_type 
					int 
				identifier 
				formal_parameters shape
					( 
					formal_parameter shape
						type_identifier 
						identifier 
					, 
					formal_parameter xf
						type_identifier 
						identifier 
					) 
				block destroyParticlesInShape
					{ 
					return_statement destroyParticlesInShape
						return 
						method_invocation destroyParticlesInShape
							identifier 
							argument_list shape
								( 
								identifier 
								, 
								identifier 
								, 
								false 
								) 
						; 
					} 
			block_comment 
			method_declaration destroyParticlesInShape
				modifiers 
					public 
				integral_type 
					int 
				identifier 
				formal_parameters shape
					( 
					formal_parameter shape
						type_identifier 
						identifier 
					, 
					formal_parameter xf
						type_identifier 
						identifier 
					, 
					formal_parameter callDestructionListener
						boolean_type 
						identifier 
					) 
				block isLocked
					{ 
					assert_statement isLocked
						assert 
						parenthesized_expression isLocked
							( 
							binary_expression isLocked
								method_invocation isLocked
									identifier 
									argument_list 
										( 
										) 
								== 
								false 
							) 
						; 
					if_statement isLocked
						if 
						parenthesized_expression isLocked
							( 
							method_invocation isLocked
								identifier 
								argument_list 
									( 
									) 
							) 
						block 
							{ 
							return_statement 
								return 
								decimal_integer_literal 
								; 
							} 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list shape
								( 
								identifier 
								, 
								identifier 
								, 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration createParticleGroup
				modifiers 
					public 
				type_identifier 
				identifier 
				formal_parameters def
					( 
					formal_parameter def
						type_identifier 
						identifier 
					) 
				block isLocked
					{ 
					assert_statement isLocked
						assert 
						parenthesized_expression isLocked
							( 
							binary_expression isLocked
								method_invocation isLocked
									identifier 
									argument_list 
										( 
										) 
								== 
								false 
							) 
						; 
					if_statement isLocked
						if 
						parenthesized_expression isLocked
							( 
							method_invocation isLocked
								identifier 
								argument_list 
									( 
									) 
							) 
						block 
							{ 
							return_statement 
								return 
								null_literal 
								; 
							} 
					local_variable_declaration g
						type_identifier 
						variable_declarator g
							identifier 
							= 
							method_invocation m_particleSystem
								identifier 
								. 
								identifier 
								argument_list def
									( 
									identifier 
									) 
						; 
					return_statement g
						return 
						identifier 
						; 
					} 
			block_comment 
			method_declaration joinParticleGroups
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters groupA
					( 
					formal_parameter groupA
						type_identifier 
						identifier 
					, 
					formal_parameter groupB
						type_identifier 
						identifier 
					) 
				block isLocked
					{ 
					assert_statement isLocked
						assert 
						parenthesized_expression isLocked
							( 
							binary_expression isLocked
								method_invocation isLocked
									identifier 
									argument_list 
										( 
										) 
								== 
								false 
							) 
						; 
					if_statement isLocked
						if 
						parenthesized_expression isLocked
							( 
							method_invocation isLocked
								identifier 
								argument_list 
									( 
									) 
							) 
						block 
							{ 
							return_statement 
								return 
								; 
							} 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list groupA
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration destroyParticlesInGroup
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters group
					( 
					formal_parameter group
						type_identifier 
						identifier 
					, 
					formal_parameter callDestructionListener
						boolean_type 
						identifier 
					) 
				block isLocked
					{ 
					assert_statement isLocked
						assert 
						parenthesized_expression isLocked
							( 
							binary_expression isLocked
								method_invocation isLocked
									identifier 
									argument_list 
										( 
										) 
								== 
								false 
							) 
						; 
					if_statement isLocked
						if 
						parenthesized_expression isLocked
							( 
							method_invocation isLocked
								identifier 
								argument_list 
									( 
									) 
							) 
						block 
							{ 
							return_statement 
								return 
								; 
							} 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list group
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration destroyParticlesInGroup
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters group
					( 
					formal_parameter group
						type_identifier 
						identifier 
					) 
				block destroyParticlesInGroup
					{ 
					expression_statement destroyParticlesInGroup
						method_invocation destroyParticlesInGroup
							identifier 
							argument_list group
								( 
								identifier 
								, 
								false 
								) 
						; 
					} 
			block_comment 
			method_declaration getParticleGroupList
				modifiers 
					public 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			block_comment 
			method_declaration getParticleGroupCount
				modifiers 
					public 
				integral_type 
					int 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			block_comment 
			method_declaration getParticleCount
				modifiers 
					public 
				integral_type 
					int 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			block_comment 
			method_declaration getParticleMaxCount
				modifiers 
					public 
				integral_type 
					int 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			block_comment 
			method_declaration setParticleMaxCount
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters count
					( 
					formal_parameter count
						integral_type 
							int 
						identifier 
					) 
				block m_particleSystem
					{ 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list count
								( 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration setParticleDensity
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters density
					( 
					formal_parameter density
						floating_point_type 
							float 
						identifier 
					) 
				block m_particleSystem
					{ 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list density
								( 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration getParticleDensity
				modifiers 
					public 
				floating_point_type 
					float 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			block_comment 
			method_declaration setParticleGravityScale
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters gravityScale
					( 
					formal_parameter gravityScale
						floating_point_type 
							float 
						identifier 
					) 
				block m_particleSystem
					{ 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list gravityScale
								( 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration getParticleGravityScale
				modifiers 
					public 
				floating_point_type 
					float 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			block_comment 
			method_declaration setParticleDamping
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters damping
					( 
					formal_parameter damping
						floating_point_type 
							float 
						identifier 
					) 
				block m_particleSystem
					{ 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list damping
								( 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration getParticleDamping
				modifiers 
					public 
				floating_point_type 
					float 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			block_comment 
			method_declaration setParticleRadius
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters radius
					( 
					formal_parameter radius
						floating_point_type 
							float 
						identifier 
					) 
				block m_particleSystem
					{ 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list radius
								( 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration getParticleRadius
				modifiers 
					public 
				floating_point_type 
					float 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			block_comment 
			method_declaration getParticleFlagsBuffer
				modifiers 
					public 
				array_type 
					integral_type 
						int 
					dimensions 
						[ 
						] 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			method_declaration getParticlePositionBuffer
				modifiers 
					public 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			method_declaration getParticleVelocityBuffer
				modifiers 
					public 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			method_declaration getParticleColorBuffer
				modifiers 
					public 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			method_declaration getParticleGroupBuffer
				modifiers 
					public 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			method_declaration getParticleUserDataBuffer
				modifiers 
					public 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			block_comment 
			method_declaration setParticleFlagsBuffer
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters buffer
					( 
					formal_parameter buffer
						array_type 
							integral_type 
								int 
							dimensions 
								[ 
								] 
						identifier 
					, 
					formal_parameter capacity
						integral_type 
							int 
						identifier 
					) 
				block m_particleSystem
					{ 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list buffer
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					} 
			method_declaration setParticlePositionBuffer
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters buffer
					( 
					formal_parameter buffer
						array_type 
							type_identifier 
							dimensions 
								[ 
								] 
						identifier 
					, 
					formal_parameter capacity
						integral_type 
							int 
						identifier 
					) 
				block m_particleSystem
					{ 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list buffer
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					} 
			method_declaration setParticleVelocityBuffer
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters buffer
					( 
					formal_parameter buffer
						array_type 
							type_identifier 
							dimensions 
								[ 
								] 
						identifier 
					, 
					formal_parameter capacity
						integral_type 
							int 
						identifier 
					) 
				block m_particleSystem
					{ 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list buffer
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					} 
			method_declaration setParticleColorBuffer
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters buffer
					( 
					formal_parameter buffer
						array_type 
							type_identifier 
							dimensions 
								[ 
								] 
						identifier 
					, 
					formal_parameter capacity
						integral_type 
							int 
						identifier 
					) 
				block m_particleSystem
					{ 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list buffer
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					} 
			method_declaration setParticleUserDataBuffer
				modifiers 
					public 
				void_type 
				identifier 
				formal_parameters buffer
					( 
					formal_parameter buffer
						array_type 
							type_identifier 
							dimensions 
								[ 
								] 
						identifier 
					, 
					formal_parameter capacity
						integral_type 
							int 
						identifier 
					) 
				block m_particleSystem
					{ 
					expression_statement m_particleSystem
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list buffer
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					} 
			block_comment 
			method_declaration getParticleContacts
				modifiers 
					public 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						field_access m_particleSystem
							identifier 
							. 
							identifier 
						; 
					} 
			method_declaration getParticleContactCount
				modifiers 
					public 
				integral_type 
					int 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						field_access m_particleSystem
							identifier 
							. 
							identifier 
						; 
					} 
			block_comment 
			method_declaration getParticleBodyContacts
				modifiers 
					public 
				array_type 
					type_identifier 
					dimensions 
						[ 
						] 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						field_access m_particleSystem
							identifier 
							. 
							identifier 
						; 
					} 
			method_declaration getParticleBodyContactCount
				modifiers 
					public 
				integral_type 
					int 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						field_access m_particleSystem
							identifier 
							. 
							identifier 
						; 
					} 
			block_comment 
			method_declaration computeParticleCollisionEnergy
				modifiers 
					public 
				floating_point_type 
					float 
				identifier 
				formal_parameters 
					( 
					) 
				block m_particleSystem
					{ 
					return_statement m_particleSystem
						return 
						method_invocation m_particleSystem
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					} 
			} 
	class_declaration WorldQueryWrapper
		class 
		identifier 
		super_interfaces 
			implements 
			type_list 
				type_identifier 
		class_body treeCallback
			{ 
			method_declaration treeCallback
				modifiers 
					public 
				boolean_type 
				identifier 
				formal_parameters nodeId
					( 
					formal_parameter nodeId
						integral_type 
							int 
						identifier 
					) 
				block proxy
					{ 
					local_variable_declaration proxy
						type_identifier 
						variable_declarator proxy
							identifier 
							= 
							cast_expression broadPhase
								( 
								type_identifier 
								) 
								method_invocation broadPhase
									identifier 
									. 
									identifier 
									argument_list nodeId
										( 
										identifier 
										) 
						; 
					return_statement callback
						return 
						method_invocation callback
							identifier 
							. 
							identifier 
							argument_list proxy
								( 
								field_access proxy
									identifier 
									. 
									identifier 
								) 
						; 
					} 
			field_declaration broadPhase
				type_identifier 
				variable_declarator broadPhase
					identifier 
				; 
			field_declaration callback
				type_identifier 
				variable_declarator callback
					identifier 
				; 
			} 
	; 
	class_declaration WorldRayCastWrapper
		class 
		identifier 
		super_interfaces 
			implements 
			type_list 
				type_identifier 
		class_body output
			{ 
			line_comment 
			field_declaration output
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator output
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration temp
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator temp
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration point
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator point
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			method_declaration raycastCallback
				modifiers 
					public 
				floating_point_type 
					float 
				identifier 
				formal_parameters input
					( 
					formal_parameter input
						type_identifier 
						identifier 
					, 
					formal_parameter nodeId
						integral_type 
							int 
						identifier 
					) 
				block userData
					{ 
					local_variable_declaration userData
						type_identifier 
						variable_declarator userData
							identifier 
							= 
							method_invocation broadPhase
								identifier 
								. 
								identifier 
								argument_list nodeId
									( 
									identifier 
									) 
						; 
					local_variable_declaration proxy
						type_identifier 
						variable_declarator proxy
							identifier 
							= 
							cast_expression userData
								( 
								type_identifier 
								) 
								identifier 
						; 
					local_variable_declaration fixture
						type_identifier 
						variable_declarator fixture
							identifier 
							= 
							field_access proxy
								identifier 
								. 
								identifier 
						; 
					local_variable_declaration index
						integral_type 
							int 
						variable_declarator index
							identifier 
							= 
							field_access proxy
								identifier 
								. 
								identifier 
						; 
					local_variable_declaration hit
						boolean_type 
						variable_declarator hit
							identifier 
							= 
							method_invocation fixture
								identifier 
								. 
								identifier 
								argument_list output
									( 
									identifier 
									, 
									identifier 
									, 
									identifier 
									) 
						; 
					if_statement hit
						if 
						parenthesized_expression hit
							( 
							identifier 
							) 
						block fraction
							{ 
							local_variable_declaration fraction
								floating_point_type 
									float 
								variable_declarator fraction
									identifier 
									= 
									field_access output
										identifier 
										. 
										identifier 
								; 
							line_comment 
							expression_statement temp
								method_invocation temp
									method_invocation temp
										identifier 
										. 
										identifier 
										argument_list input
											( 
											field_access input
												identifier 
												. 
												identifier 
											) 
									. 
									identifier 
									argument_list fraction
										( 
										identifier 
										) 
								; 
							expression_statement point
								method_invocation point
									method_invocation point
										method_invocation point
											identifier 
											. 
											identifier 
											argument_list input
												( 
												field_access input
													identifier 
													. 
													identifier 
												) 
										. 
										identifier 
										argument_list fraction
											( 
											binary_expression fraction
												decimal_integer_literal 
												- 
												identifier 
											) 
									. 
									identifier 
									argument_list temp
										( 
										identifier 
										) 
								; 
							return_statement callback
								return 
								method_invocation callback
									identifier 
									. 
									identifier 
									argument_list fixture
										( 
										identifier 
										, 
										identifier 
										, 
										field_access output
											identifier 
											. 
											identifier 
										, 
										identifier 
										) 
								; 
							} 
					return_statement input
						return 
						field_access input
							identifier 
							. 
							identifier 
						; 
					} 
			field_declaration broadPhase
				type_identifier 
				variable_declarator broadPhase
					identifier 
				; 
			field_declaration callback
				type_identifier 
				variable_declarator callback
					identifier 
				; 
			} 
	; 

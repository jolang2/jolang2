program org
	block_comment 
	package_declaration org
		package 
		scoped_identifier org
			scoped_identifier org
				identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					scoped_identifier org
						identifier 
						. 
						identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	import_declaration org
		import 
		scoped_identifier org
			scoped_identifier org
				scoped_identifier org
					identifier 
					. 
					identifier 
				. 
				identifier 
			. 
			identifier 
		; 
	block_comment 
	class_declaration TimeOfImpact
		modifiers 
			public 
		class 
		identifier 
		class_body MAX_ITERATIONS
			{ 
			field_declaration MAX_ITERATIONS
				modifiers 
					public 
					static 
					final 
				integral_type 
					int 
				variable_declarator MAX_ITERATIONS
					identifier 
					= 
					decimal_integer_literal 
				; 
			field_declaration MAX_ROOT_ITERATIONS
				modifiers 
					public 
					static 
					final 
				integral_type 
					int 
				variable_declarator MAX_ROOT_ITERATIONS
					identifier 
					= 
					decimal_integer_literal 
				; 
			field_declaration toiCalls
				modifiers 
					public 
					static 
				integral_type 
					int 
				variable_declarator toiCalls
					identifier 
					= 
					decimal_integer_literal 
				; 
			field_declaration toiIters
				modifiers 
					public 
					static 
				integral_type 
					int 
				variable_declarator toiIters
					identifier 
					= 
					decimal_integer_literal 
				; 
			field_declaration toiMaxIters
				modifiers 
					public 
					static 
				integral_type 
					int 
				variable_declarator toiMaxIters
					identifier 
					= 
					decimal_integer_literal 
				; 
			field_declaration toiRootIters
				modifiers 
					public 
					static 
				integral_type 
					int 
				variable_declarator toiRootIters
					identifier 
					= 
					decimal_integer_literal 
				; 
			field_declaration toiMaxRootIters
				modifiers 
					public 
					static 
				integral_type 
					int 
				variable_declarator toiMaxRootIters
					identifier 
					= 
					decimal_integer_literal 
				; 
			block_comment 
			class_declaration TOIInput
				modifiers 
					public 
					static 
				class 
				identifier 
				class_body proxyA
					{ 
					field_declaration proxyA
						modifiers 
							public 
							final 
						type_identifier 
						variable_declarator proxyA
							identifier 
							= 
							object_creation_expression 
								new 
								type_identifier 
								argument_list 
									( 
									) 
						; 
					field_declaration proxyB
						modifiers 
							public 
							final 
						type_identifier 
						variable_declarator proxyB
							identifier 
							= 
							object_creation_expression 
								new 
								type_identifier 
								argument_list 
									( 
									) 
						; 
					field_declaration sweepA
						modifiers 
							public 
							final 
						type_identifier 
						variable_declarator sweepA
							identifier 
							= 
							object_creation_expression 
								new 
								type_identifier 
								argument_list 
									( 
									) 
						; 
					field_declaration sweepB
						modifiers 
							public 
							final 
						type_identifier 
						variable_declarator sweepB
							identifier 
							= 
							object_creation_expression 
								new 
								type_identifier 
								argument_list 
									( 
									) 
						; 
					block_comment 
					field_declaration tMax
						modifiers 
							public 
						floating_point_type 
							float 
						variable_declarator tMax
							identifier 
						; 
					} 
			enum_declaration TOIOutputState
				modifiers 
					public 
					static 
				enum 
				identifier 
				enum_body UNKNOWN
					{ 
					enum_constant UNKNOWN
						identifier 
					, 
					enum_constant FAILED
						identifier 
					, 
					enum_constant OVERLAPPED
						identifier 
					, 
					enum_constant TOUCHING
						identifier 
					, 
					enum_constant SEPARATED
						identifier 
					} 
			block_comment 
			class_declaration TOIOutput
				modifiers 
					public 
					static 
				class 
				identifier 
				class_body state
					{ 
					field_declaration state
						modifiers 
							public 
						type_identifier 
						variable_declarator state
							identifier 
						; 
					field_declaration t
						modifiers 
							public 
						floating_point_type 
							float 
						variable_declarator t
							identifier 
						; 
					} 
			line_comment 
			field_declaration cache
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator cache
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration distanceInput
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator distanceInput
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration xfA
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator xfA
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration xfB
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator xfB
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration distanceOutput
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator distanceOutput
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration fcn
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator fcn
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration indexes
				modifiers 
					private 
					final 
				array_type 
					integral_type 
						int 
					dimensions 
						[ 
						] 
				variable_declarator indexes
					identifier 
					= 
					array_creation_expression 
						new 
						integral_type 
							int 
						dimensions_expr 
							[ 
							decimal_integer_literal 
							] 
				; 
			field_declaration sweepA
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator sweepA
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration sweepB
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator sweepB
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration pool
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator pool
					identifier 
				; 
			constructor_declaration TimeOfImpact
				modifiers 
					public 
				identifier 
				formal_parameters argPool
					( 
					formal_parameter argPool
						type_identifier 
						identifier 
					) 
				constructor_body pool
					{ 
					expression_statement pool
						assignment_expression pool
							identifier 
							= 
							identifier 
						; 
					} 
			block_comment 
			method_declaration timeOfImpact
				modifiers 
					public 
					final 
				void_type 
				identifier 
				formal_parameters output
					( 
					formal_parameter output
						type_identifier 
						identifier 
					, 
					formal_parameter input
						type_identifier 
						identifier 
					) 
				block toiCalls
					{ 
					line_comment 
					line_comment 
					expression_statement toiCalls
						update_expression toiCalls
							++ 
							identifier 
						; 
					expression_statement output
						assignment_expression output
							field_access output
								identifier 
								. 
								identifier 
							= 
							field_access TOIOutputState
								identifier 
								. 
								identifier 
						; 
					expression_statement output
						assignment_expression output
							field_access output
								identifier 
								. 
								identifier 
							= 
							field_access input
								identifier 
								. 
								identifier 
						; 
					local_variable_declaration proxyA
						modifiers 
							final 
						type_identifier 
						variable_declarator proxyA
							identifier 
							= 
							field_access input
								identifier 
								. 
								identifier 
						; 
					local_variable_declaration proxyB
						modifiers 
							final 
						type_identifier 
						variable_declarator proxyB
							identifier 
							= 
							field_access input
								identifier 
								. 
								identifier 
						; 
					expression_statement sweepA
						method_invocation sweepA
							identifier 
							. 
							identifier 
							argument_list input
								( 
								field_access input
									identifier 
									. 
									identifier 
								) 
						; 
					expression_statement sweepB
						method_invocation sweepB
							identifier 
							. 
							identifier 
							argument_list input
								( 
								field_access input
									identifier 
									. 
									identifier 
								) 
						; 
					line_comment 
					line_comment 
					expression_statement sweepA
						method_invocation sweepA
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					expression_statement sweepB
						method_invocation sweepB
							identifier 
							. 
							identifier 
							argument_list 
								( 
								) 
						; 
					local_variable_declaration tMax
						floating_point_type 
							float 
						variable_declarator tMax
							identifier 
							= 
							field_access input
								identifier 
								. 
								identifier 
						; 
					local_variable_declaration totalRadius
						floating_point_type 
							float 
						variable_declarator totalRadius
							identifier 
							= 
							binary_expression proxyA
								field_access proxyA
									identifier 
									. 
									identifier 
								+ 
								field_access proxyB
									identifier 
									. 
									identifier 
						; 
					line_comment 
					local_variable_declaration target
						floating_point_type 
							float 
						variable_declarator target
							identifier 
							= 
							method_invocation MathUtils
								identifier 
								. 
								identifier 
								argument_list Settings
									( 
									field_access Settings
										identifier 
										. 
										identifier 
									, 
									binary_expression totalRadius
										identifier 
										- 
										binary_expression Settings
											decimal_floating_point_literal 
											* 
											field_access Settings
												identifier 
												. 
												identifier 
									) 
						; 
					local_variable_declaration tolerance
						floating_point_type 
							float 
						variable_declarator tolerance
							identifier 
							= 
							binary_expression Settings
								decimal_floating_point_literal 
								* 
								field_access Settings
									identifier 
									. 
									identifier 
						; 
					assert_statement target
						assert 
						parenthesized_expression target
							( 
							binary_expression target
								identifier 
								> 
								identifier 
							) 
						; 
					local_variable_declaration t1
						floating_point_type 
							float 
						variable_declarator t1
							identifier 
							= 
							decimal_floating_point_literal 
						; 
					local_variable_declaration iter
						integral_type 
							int 
						variable_declarator iter
							identifier 
							= 
							decimal_integer_literal 
						; 
					expression_statement cache
						assignment_expression cache
							field_access cache
								identifier 
								. 
								identifier 
							= 
							decimal_integer_literal 
						; 
					expression_statement distanceInput
						assignment_expression distanceInput
							field_access distanceInput
								identifier 
								. 
								identifier 
							= 
							field_access input
								identifier 
								. 
								identifier 
						; 
					expression_statement distanceInput
						assignment_expression distanceInput
							field_access distanceInput
								identifier 
								. 
								identifier 
							= 
							field_access input
								identifier 
								. 
								identifier 
						; 
					expression_statement distanceInput
						assignment_expression distanceInput
							field_access distanceInput
								identifier 
								. 
								identifier 
							= 
							false 
						; 
					line_comment 
					line_comment 
					for_statement sweepA
						for 
						( 
						; 
						; 
						) 
						block sweepA
							{ 
							expression_statement sweepA
								method_invocation sweepA
									identifier 
									. 
									identifier 
									argument_list xfA
										( 
										identifier 
										, 
										identifier 
										) 
								; 
							expression_statement sweepB
								method_invocation sweepB
									identifier 
									. 
									identifier 
									argument_list xfB
										( 
										identifier 
										, 
										identifier 
										) 
								; 
							line_comment 
							line_comment 
							line_comment 
							line_comment 
							expression_statement distanceInput
								assignment_expression distanceInput
									field_access distanceInput
										identifier 
										. 
										identifier 
									= 
									identifier 
								; 
							expression_statement distanceInput
								assignment_expression distanceInput
									field_access distanceInput
										identifier 
										. 
										identifier 
									= 
									identifier 
								; 
							expression_statement pool
								method_invocation pool
									method_invocation pool
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
									. 
									identifier 
									argument_list distanceOutput
										( 
										identifier 
										, 
										identifier 
										, 
										identifier 
										) 
								; 
							line_comment 
							line_comment 
							line_comment 
							line_comment 
							line_comment 
							if_statement distanceOutput
								if 
								parenthesized_expression distanceOutput
									( 
									binary_expression distanceOutput
										field_access distanceOutput
											identifier 
											. 
											identifier 
										<= 
										decimal_floating_point_literal 
									) 
								block output
									{ 
									line_comment 
									expression_statement output
										assignment_expression output
											field_access output
												identifier 
												. 
												identifier 
											= 
											field_access TOIOutputState
												identifier 
												. 
												identifier 
										; 
									expression_statement output
										assignment_expression output
											field_access output
												identifier 
												. 
												identifier 
											= 
											decimal_floating_point_literal 
										; 
									break_statement 
										break 
										; 
									} 
							if_statement distanceOutput
								if 
								parenthesized_expression distanceOutput
									( 
									binary_expression distanceOutput
										field_access distanceOutput
											identifier 
											. 
											identifier 
										< 
										binary_expression target
											identifier 
											+ 
											identifier 
									) 
								block output
									{ 
									line_comment 
									expression_statement output
										assignment_expression output
											field_access output
												identifier 
												. 
												identifier 
											= 
											field_access TOIOutputState
												identifier 
												. 
												identifier 
										; 
									expression_statement output
										assignment_expression output
											field_access output
												identifier 
												. 
												identifier 
											= 
											identifier 
										; 
									break_statement 
										break 
										; 
									} 
							line_comment 
							expression_statement fcn
								method_invocation fcn
									identifier 
									. 
									identifier 
									argument_list cache
										( 
										identifier 
										, 
										identifier 
										, 
										identifier 
										, 
										identifier 
										, 
										identifier 
										, 
										identifier 
										) 
								; 
							line_comment 
							line_comment 
							line_comment 
							local_variable_declaration done
								boolean_type 
								variable_declarator done
									identifier 
									= 
									false 
								; 
							local_variable_declaration t2
								floating_point_type 
									float 
								variable_declarator t2
									identifier 
									= 
									identifier 
								; 
							local_variable_declaration pushBackIter
								integral_type 
									int 
								variable_declarator pushBackIter
									identifier 
									= 
									decimal_integer_literal 
								; 
							for_statement s2
								for 
								( 
								; 
								; 
								) 
								block s2
									{ 
									line_comment 
									local_variable_declaration s2
										floating_point_type 
											float 
										variable_declarator s2
											identifier 
											= 
											method_invocation fcn
												identifier 
												. 
												identifier 
												argument_list indexes
													( 
													identifier 
													, 
													identifier 
													) 
										; 
									line_comment 
									line_comment 
									if_statement s2
										if 
										parenthesized_expression s2
											( 
											binary_expression s2
												identifier 
												> 
												binary_expression target
													identifier 
													+ 
													identifier 
											) 
										block output
											{ 
											line_comment 
											expression_statement output
												assignment_expression output
													field_access output
														identifier 
														. 
														identifier 
													= 
													field_access TOIOutputState
														identifier 
														. 
														identifier 
												; 
											expression_statement output
												assignment_expression output
													field_access output
														identifier 
														. 
														identifier 
													= 
													identifier 
												; 
											expression_statement done
												assignment_expression done
													identifier 
													= 
													true 
												; 
											break_statement 
												break 
												; 
											} 
									line_comment 
									if_statement s2
										if 
										parenthesized_expression s2
											( 
											binary_expression s2
												identifier 
												> 
												binary_expression target
													identifier 
													- 
													identifier 
											) 
										block t1
											{ 
											line_comment 
											expression_statement t1
												assignment_expression t1
													identifier 
													= 
													identifier 
												; 
											break_statement 
												break 
												; 
											} 
									line_comment 
									local_variable_declaration s1
										floating_point_type 
											float 
										variable_declarator s1
											identifier 
											= 
											method_invocation fcn
												identifier 
												. 
												identifier 
												argument_list indexes
													( 
													array_access indexes
														identifier 
														[ 
														decimal_integer_literal 
														] 
													, 
													array_access indexes
														identifier 
														[ 
														decimal_integer_literal 
														] 
													, 
													identifier 
													) 
										; 
									line_comment 
									line_comment 
									line_comment 
									line_comment 
									if_statement s1
										if 
										parenthesized_expression s1
											( 
											binary_expression s1
												identifier 
												< 
												binary_expression target
													identifier 
													- 
													identifier 
											) 
										block output
											{ 
											expression_statement output
												assignment_expression output
													field_access output
														identifier 
														. 
														identifier 
													= 
													field_access TOIOutputState
														identifier 
														. 
														identifier 
												; 
											expression_statement output
												assignment_expression output
													field_access output
														identifier 
														. 
														identifier 
													= 
													identifier 
												; 
											expression_statement done
												assignment_expression done
													identifier 
													= 
													true 
												; 
											break_statement 
												break 
												; 
											} 
									line_comment 
									if_statement s1
										if 
										parenthesized_expression s1
											( 
											binary_expression s1
												identifier 
												<= 
												binary_expression target
													identifier 
													+ 
													identifier 
											) 
										block output
											{ 
											line_comment 
											expression_statement output
												assignment_expression output
													field_access output
														identifier 
														. 
														identifier 
													= 
													field_access TOIOutputState
														identifier 
														. 
														identifier 
												; 
											expression_statement output
												assignment_expression output
													field_access output
														identifier 
														. 
														identifier 
													= 
													identifier 
												; 
											expression_statement done
												assignment_expression done
													identifier 
													= 
													true 
												; 
											break_statement 
												break 
												; 
											} 
									line_comment 
									local_variable_declaration rootIterCount
										integral_type 
											int 
										variable_declarator rootIterCount
											identifier 
											= 
											decimal_integer_literal 
										; 
									local_variable_declaration a1
										floating_point_type 
											float 
										variable_declarator a1
											identifier 
											= 
											identifier 
										, 
										variable_declarator a2
											identifier 
											= 
											identifier 
										; 
									for_statement t
										for 
										( 
										; 
										; 
										) 
										block t
											{ 
											line_comment 
											local_variable_declaration t
												floating_point_type 
													float 
												variable_declarator t
													identifier 
												; 
											if_statement rootIterCount
												if 
												parenthesized_expression rootIterCount
													( 
													binary_expression rootIterCount
														parenthesized_expression rootIterCount
															( 
															binary_expression rootIterCount
																identifier 
																& 
																decimal_integer_literal 
															) 
														== 
														decimal_integer_literal 
													) 
												block t
													{ 
													line_comment 
													expression_statement t
														assignment_expression t
															identifier 
															= 
															binary_expression a1
																identifier 
																+ 
																binary_expression target
																	binary_expression target
																		parenthesized_expression target
																			( 
																			binary_expression target
																				identifier 
																				- 
																				identifier 
																			) 
																		* 
																		parenthesized_expression a2
																			( 
																			binary_expression a2
																				identifier 
																				- 
																				identifier 
																			) 
																	/ 
																	parenthesized_expression s2
																		( 
																		binary_expression s2
																			identifier 
																			- 
																			identifier 
																		) 
														; 
													} 
												else 
												block t
													{ 
													line_comment 
													expression_statement t
														assignment_expression t
															identifier 
															= 
															binary_expression a1
																decimal_floating_point_literal 
																* 
																parenthesized_expression a1
																	( 
																	binary_expression a1
																		identifier 
																		+ 
																		identifier 
																	) 
														; 
													} 
											expression_statement rootIterCount
												update_expression rootIterCount
													++ 
													identifier 
												; 
											expression_statement toiRootIters
												update_expression toiRootIters
													++ 
													identifier 
												; 
											local_variable_declaration s
												floating_point_type 
													float 
												variable_declarator s
													identifier 
													= 
													method_invocation fcn
														identifier 
														. 
														identifier 
														argument_list indexes
															( 
															array_access indexes
																identifier 
																[ 
																decimal_integer_literal 
																] 
															, 
															array_access indexes
																identifier 
																[ 
																decimal_integer_literal 
																] 
															, 
															identifier 
															) 
												; 
											if_statement MathUtils
												if 
												parenthesized_expression MathUtils
													( 
													binary_expression MathUtils
														method_invocation MathUtils
															identifier 
															. 
															identifier 
															argument_list s
																( 
																binary_expression s
																	identifier 
																	- 
																	identifier 
																) 
														< 
														identifier 
													) 
												block t2
													{ 
													line_comment 
													expression_statement t2
														assignment_expression t2
															identifier 
															= 
															identifier 
														; 
													break_statement 
														break 
														; 
													} 
											line_comment 
											if_statement s
												if 
												parenthesized_expression s
													( 
													binary_expression s
														identifier 
														> 
														identifier 
													) 
												block a1
													{ 
													expression_statement a1
														assignment_expression a1
															identifier 
															= 
															identifier 
														; 
													expression_statement s1
														assignment_expression s1
															identifier 
															= 
															identifier 
														; 
													} 
												else 
												block a2
													{ 
													expression_statement a2
														assignment_expression a2
															identifier 
															= 
															identifier 
														; 
													expression_statement s2
														assignment_expression s2
															identifier 
															= 
															identifier 
														; 
													} 
											if_statement rootIterCount
												if 
												parenthesized_expression rootIterCount
													( 
													binary_expression rootIterCount
														identifier 
														== 
														identifier 
													) 
												block 
													{ 
													break_statement 
														break 
														; 
													} 
											} 
									expression_statement toiMaxRootIters
										assignment_expression toiMaxRootIters
											identifier 
											= 
											method_invocation MathUtils
												identifier 
												. 
												identifier 
												argument_list toiMaxRootIters
													( 
													identifier 
													, 
													identifier 
													) 
										; 
									expression_statement pushBackIter
										update_expression pushBackIter
											++ 
											identifier 
										; 
									if_statement pushBackIter
										if 
										parenthesized_expression pushBackIter
											( 
											binary_expression pushBackIter
												binary_expression pushBackIter
													identifier 
													== 
													field_access Settings
														identifier 
														. 
														identifier 
												|| 
												binary_expression rootIterCount
													identifier 
													== 
													identifier 
											) 
										block 
											{ 
											break_statement 
												break 
												; 
											} 
									} 
							expression_statement iter
								update_expression iter
									++ 
									identifier 
								; 
							expression_statement toiIters
								update_expression toiIters
									++ 
									identifier 
								; 
							if_statement done
								if 
								parenthesized_expression done
									( 
									identifier 
									) 
								block 
									{ 
									line_comment 
									break_statement 
										break 
										; 
									} 
							if_statement iter
								if 
								parenthesized_expression iter
									( 
									binary_expression iter
										identifier 
										== 
										identifier 
									) 
								block output
									{ 
									line_comment 
									line_comment 
									expression_statement output
										assignment_expression output
											field_access output
												identifier 
												. 
												identifier 
											= 
											field_access TOIOutputState
												identifier 
												. 
												identifier 
										; 
									expression_statement output
										assignment_expression output
											field_access output
												identifier 
												. 
												identifier 
											= 
											identifier 
										; 
									break_statement 
										break 
										; 
									} 
							} 
					line_comment 
					expression_statement toiMaxIters
						assignment_expression toiMaxIters
							identifier 
							= 
							method_invocation MathUtils
								identifier 
								. 
								identifier 
								argument_list toiMaxIters
									( 
									identifier 
									, 
									identifier 
									) 
						; 
					} 
			} 
	enum_declaration Type
		enum 
		identifier 
		enum_body POINTS
			{ 
			enum_constant POINTS
				identifier 
			, 
			enum_constant FACE_A
				identifier 
			, 
			enum_constant FACE_B
				identifier 
			enum_body_declarations 
				; 
			} 
	class_declaration SeparationFunction
		class 
		identifier 
		class_body m_proxyA
			{ 
			field_declaration m_proxyA
				modifiers 
					public 
				type_identifier 
				variable_declarator m_proxyA
					identifier 
				; 
			field_declaration m_proxyB
				modifiers 
					public 
				type_identifier 
				variable_declarator m_proxyB
					identifier 
				; 
			field_declaration m_type
				modifiers 
					public 
				type_identifier 
				variable_declarator m_type
					identifier 
				; 
			field_declaration m_localPoint
				modifiers 
					public 
					final 
				type_identifier 
				variable_declarator m_localPoint
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration m_axis
				modifiers 
					public 
					final 
				type_identifier 
				variable_declarator m_axis
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration m_sweepA
				modifiers 
					public 
				type_identifier 
				variable_declarator m_sweepA
					identifier 
				; 
			field_declaration m_sweepB
				modifiers 
					public 
				type_identifier 
				variable_declarator m_sweepB
					identifier 
				; 
			line_comment 
			field_declaration localPointA
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator localPointA
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration localPointB
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator localPointB
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration pointA
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator pointA
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration pointB
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator pointB
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration localPointA1
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator localPointA1
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration localPointA2
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator localPointA2
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration normal
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator normal
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration localPointB1
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator localPointB1
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration localPointB2
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator localPointB2
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration temp
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator temp
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration xfa
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator xfa
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration xfb
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator xfb
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			line_comment 
			method_declaration initialize
				modifiers 
					public 
				floating_point_type 
					float 
				identifier 
				formal_parameters cache
					( 
					formal_parameter cache
						modifiers 
							final 
						type_identifier 
						identifier 
					, 
					formal_parameter proxyA
						modifiers 
							final 
						type_identifier 
						identifier 
					, 
					formal_parameter sweepA
						modifiers 
							final 
						type_identifier 
						identifier 
					, 
					formal_parameter proxyB
						modifiers 
							final 
						type_identifier 
						identifier 
					, 
					formal_parameter sweepB
						modifiers 
							final 
						type_identifier 
						identifier 
					, 
					formal_parameter t1
						floating_point_type 
							float 
						identifier 
					) 
				block m_proxyA
					{ 
					expression_statement m_proxyA
						assignment_expression m_proxyA
							identifier 
							= 
							identifier 
						; 
					expression_statement m_proxyB
						assignment_expression m_proxyB
							identifier 
							= 
							identifier 
						; 
					local_variable_declaration count
						integral_type 
							int 
						variable_declarator count
							identifier 
							= 
							field_access cache
								identifier 
								. 
								identifier 
						; 
					assert_statement count
						assert 
						parenthesized_expression count
							( 
							binary_expression count
								binary_expression count
									decimal_integer_literal 
									< 
									identifier 
								&& 
								binary_expression count
									identifier 
									< 
									decimal_integer_literal 
							) 
						; 
					expression_statement m_sweepA
						assignment_expression m_sweepA
							identifier 
							= 
							identifier 
						; 
					expression_statement m_sweepB
						assignment_expression m_sweepB
							identifier 
							= 
							identifier 
						; 
					expression_statement m_sweepA
						method_invocation m_sweepA
							identifier 
							. 
							identifier 
							argument_list xfa
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					expression_statement m_sweepB
						method_invocation m_sweepB
							identifier 
							. 
							identifier 
							argument_list xfb
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					line_comment 
					line_comment 
					line_comment 
					if_statement count
						if 
						parenthesized_expression count
							( 
							binary_expression count
								identifier 
								== 
								decimal_integer_literal 
							) 
						block m_type
							{ 
							expression_statement m_type
								assignment_expression m_type
									identifier 
									= 
									field_access Type
										identifier 
										. 
										identifier 
								; 
							block_comment 
							expression_statement localPointA
								method_invocation localPointA
									identifier 
									. 
									identifier 
									argument_list m_proxyA
										( 
										method_invocation m_proxyA
											identifier 
											. 
											identifier 
											argument_list cache
												( 
												array_access cache
													field_access cache
														identifier 
														. 
														identifier 
													[ 
													decimal_integer_literal 
													] 
												) 
										) 
								; 
							expression_statement localPointB
								method_invocation localPointB
									identifier 
									. 
									identifier 
									argument_list m_proxyB
										( 
										method_invocation m_proxyB
											identifier 
											. 
											identifier 
											argument_list cache
												( 
												array_access cache
													field_access cache
														identifier 
														. 
														identifier 
													[ 
													decimal_integer_literal 
													] 
												) 
										) 
								; 
							expression_statement Transform
								method_invocation Transform
									identifier 
									. 
									identifier 
									argument_list xfa
										( 
										identifier 
										, 
										identifier 
										, 
										identifier 
										) 
								; 
							expression_statement Transform
								method_invocation Transform
									identifier 
									. 
									identifier 
									argument_list xfb
										( 
										identifier 
										, 
										identifier 
										, 
										identifier 
										) 
								; 
							expression_statement m_axis
								method_invocation m_axis
									method_invocation m_axis
										identifier 
										. 
										identifier 
										argument_list pointB
											( 
											identifier 
											) 
									. 
									identifier 
									argument_list pointA
										( 
										identifier 
										) 
								; 
							local_variable_declaration s
								floating_point_type 
									float 
								variable_declarator s
									identifier 
									= 
									method_invocation m_axis
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
								; 
							return_statement s
								return 
								identifier 
								; 
							} 
						else 
						if_statement cache
							if 
							parenthesized_expression cache
								( 
								binary_expression cache
									array_access cache
										field_access cache
											identifier 
											. 
											identifier 
										[ 
										decimal_integer_literal 
										] 
									== 
									array_access cache
										field_access cache
											identifier 
											. 
											identifier 
										[ 
										decimal_integer_literal 
										] 
								) 
							block m_type
								{ 
								line_comment 
								expression_statement m_type
									assignment_expression m_type
										identifier 
										= 
										field_access Type
											identifier 
											. 
											identifier 
									; 
								expression_statement localPointB1
									method_invocation localPointB1
										identifier 
										. 
										identifier 
										argument_list m_proxyB
											( 
											method_invocation m_proxyB
												identifier 
												. 
												identifier 
												argument_list cache
													( 
													array_access cache
														field_access cache
															identifier 
															. 
															identifier 
														[ 
														decimal_integer_literal 
														] 
													) 
											) 
									; 
								expression_statement localPointB2
									method_invocation localPointB2
										identifier 
										. 
										identifier 
										argument_list m_proxyB
											( 
											method_invocation m_proxyB
												identifier 
												. 
												identifier 
												argument_list cache
													( 
													array_access cache
														field_access cache
															identifier 
															. 
															identifier 
														[ 
														decimal_integer_literal 
														] 
													) 
											) 
									; 
								expression_statement temp
									method_invocation temp
										method_invocation temp
											identifier 
											. 
											identifier 
											argument_list localPointB2
												( 
												identifier 
												) 
										. 
										identifier 
										argument_list localPointB1
											( 
											identifier 
											) 
									; 
								expression_statement Vec2
									method_invocation Vec2
										identifier 
										. 
										identifier 
										argument_list temp
											( 
											identifier 
											, 
											decimal_floating_point_literal 
											, 
											identifier 
											) 
									; 
								expression_statement m_axis
									method_invocation m_axis
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
									; 
								expression_statement Rot
									method_invocation Rot
										identifier 
										. 
										identifier 
										argument_list xfb
											( 
											field_access xfb
												identifier 
												. 
												identifier 
											, 
											identifier 
											, 
											identifier 
											) 
									; 
								expression_statement m_localPoint
									method_invocation m_localPoint
										method_invocation m_localPoint
											method_invocation m_localPoint
												identifier 
												. 
												identifier 
												argument_list localPointB1
													( 
													identifier 
													) 
											. 
											identifier 
											argument_list localPointB2
												( 
												identifier 
												) 
										. 
										identifier 
										argument_list 
											( 
											decimal_floating_point_literal 
											) 
									; 
								expression_statement Transform
									method_invocation Transform
										identifier 
										. 
										identifier 
										argument_list xfb
											( 
											identifier 
											, 
											identifier 
											, 
											identifier 
											) 
									; 
								expression_statement localPointA
									method_invocation localPointA
										identifier 
										. 
										identifier 
										argument_list proxyA
											( 
											method_invocation proxyA
												identifier 
												. 
												identifier 
												argument_list cache
													( 
													array_access cache
														field_access cache
															identifier 
															. 
															identifier 
														[ 
														decimal_integer_literal 
														] 
													) 
											) 
									; 
								expression_statement Transform
									method_invocation Transform
										identifier 
										. 
										identifier 
										argument_list xfa
											( 
											identifier 
											, 
											identifier 
											, 
											identifier 
											) 
									; 
								expression_statement temp
									method_invocation temp
										method_invocation temp
											identifier 
											. 
											identifier 
											argument_list pointA
												( 
												identifier 
												) 
										. 
										identifier 
										argument_list pointB
											( 
											identifier 
											) 
									; 
								local_variable_declaration s
									floating_point_type 
										float 
									variable_declarator s
										identifier 
										= 
										method_invocation Vec2
											identifier 
											. 
											identifier 
											argument_list temp
												( 
												identifier 
												, 
												identifier 
												) 
									; 
								if_statement s
									if 
									parenthesized_expression s
										( 
										binary_expression s
											identifier 
											< 
											decimal_floating_point_literal 
										) 
									block m_axis
										{ 
										expression_statement m_axis
											method_invocation m_axis
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
											; 
										expression_statement s
											assignment_expression s
												identifier 
												= 
												unary_expression s
													- 
													identifier 
											; 
										} 
								return_statement s
									return 
									identifier 
									; 
								} 
							else 
							block m_type
								{ 
								line_comment 
								expression_statement m_type
									assignment_expression m_type
										identifier 
										= 
										field_access Type
											identifier 
											. 
											identifier 
									; 
								expression_statement localPointA1
									method_invocation localPointA1
										identifier 
										. 
										identifier 
										argument_list m_proxyA
											( 
											method_invocation m_proxyA
												identifier 
												. 
												identifier 
												argument_list cache
													( 
													array_access cache
														field_access cache
															identifier 
															. 
															identifier 
														[ 
														decimal_integer_literal 
														] 
													) 
											) 
									; 
								expression_statement localPointA2
									method_invocation localPointA2
										identifier 
										. 
										identifier 
										argument_list m_proxyA
											( 
											method_invocation m_proxyA
												identifier 
												. 
												identifier 
												argument_list cache
													( 
													array_access cache
														field_access cache
															identifier 
															. 
															identifier 
														[ 
														decimal_integer_literal 
														] 
													) 
											) 
									; 
								expression_statement temp
									method_invocation temp
										method_invocation temp
											identifier 
											. 
											identifier 
											argument_list localPointA2
												( 
												identifier 
												) 
										. 
										identifier 
										argument_list localPointA1
											( 
											identifier 
											) 
									; 
								expression_statement Vec2
									method_invocation Vec2
										identifier 
										. 
										identifier 
										argument_list temp
											( 
											identifier 
											, 
											decimal_floating_point_literal 
											, 
											identifier 
											) 
									; 
								expression_statement m_axis
									method_invocation m_axis
										identifier 
										. 
										identifier 
										argument_list 
											( 
											) 
									; 
								expression_statement Rot
									method_invocation Rot
										identifier 
										. 
										identifier 
										argument_list xfa
											( 
											field_access xfa
												identifier 
												. 
												identifier 
											, 
											identifier 
											, 
											identifier 
											) 
									; 
								expression_statement m_localPoint
									method_invocation m_localPoint
										method_invocation m_localPoint
											method_invocation m_localPoint
												identifier 
												. 
												identifier 
												argument_list localPointA1
													( 
													identifier 
													) 
											. 
											identifier 
											argument_list localPointA2
												( 
												identifier 
												) 
										. 
										identifier 
										argument_list 
											( 
											decimal_floating_point_literal 
											) 
									; 
								expression_statement Transform
									method_invocation Transform
										identifier 
										. 
										identifier 
										argument_list xfa
											( 
											identifier 
											, 
											identifier 
											, 
											identifier 
											) 
									; 
								expression_statement localPointB
									method_invocation localPointB
										identifier 
										. 
										identifier 
										argument_list m_proxyB
											( 
											method_invocation m_proxyB
												identifier 
												. 
												identifier 
												argument_list cache
													( 
													array_access cache
														field_access cache
															identifier 
															. 
															identifier 
														[ 
														decimal_integer_literal 
														] 
													) 
											) 
									; 
								expression_statement Transform
									method_invocation Transform
										identifier 
										. 
										identifier 
										argument_list xfb
											( 
											identifier 
											, 
											identifier 
											, 
											identifier 
											) 
									; 
								expression_statement temp
									method_invocation temp
										method_invocation temp
											identifier 
											. 
											identifier 
											argument_list pointB
												( 
												identifier 
												) 
										. 
										identifier 
										argument_list pointA
											( 
											identifier 
											) 
									; 
								local_variable_declaration s
									floating_point_type 
										float 
									variable_declarator s
										identifier 
										= 
										method_invocation Vec2
											identifier 
											. 
											identifier 
											argument_list temp
												( 
												identifier 
												, 
												identifier 
												) 
									; 
								if_statement s
									if 
									parenthesized_expression s
										( 
										binary_expression s
											identifier 
											< 
											decimal_floating_point_literal 
										) 
									block m_axis
										{ 
										expression_statement m_axis
											method_invocation m_axis
												identifier 
												. 
												identifier 
												argument_list 
													( 
													) 
											; 
										expression_statement s
											assignment_expression s
												identifier 
												= 
												unary_expression s
													- 
													identifier 
											; 
										} 
								return_statement s
									return 
									identifier 
									; 
								} 
					} 
			field_declaration axisA
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator axisA
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			field_declaration axisB
				modifiers 
					private 
					final 
				type_identifier 
				variable_declarator axisB
					identifier 
					= 
					object_creation_expression 
						new 
						type_identifier 
						argument_list 
							( 
							) 
				; 
			line_comment 
			method_declaration findMinSeparation
				modifiers 
					public 
				floating_point_type 
					float 
				identifier 
				formal_parameters indexes
					( 
					formal_parameter indexes
						array_type 
							integral_type 
								int 
							dimensions 
								[ 
								] 
						identifier 
					, 
					formal_parameter t
						floating_point_type 
							float 
						identifier 
					) 
				block m_sweepA
					{ 
					expression_statement m_sweepA
						method_invocation m_sweepA
							identifier 
							. 
							identifier 
							argument_list xfa
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					expression_statement m_sweepB
						method_invocation m_sweepB
							identifier 
							. 
							identifier 
							argument_list xfb
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					switch_expression m_type
						switch 
						parenthesized_expression m_type
							( 
							identifier 
							) 
						switch_block POINTS
							{ 
							switch_block_statement_group POINTS
								switch_label POINTS
									case 
									identifier 
								: 
								block Rot
									{ 
									expression_statement Rot
										method_invocation Rot
											identifier 
											. 
											identifier 
											argument_list xfa
												( 
												field_access xfa
													identifier 
													. 
													identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									expression_statement Rot
										method_invocation Rot
											identifier 
											. 
											identifier 
											argument_list xfb
												( 
												field_access xfb
													identifier 
													. 
													identifier 
												, 
												method_invocation m_axis
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
												, 
												identifier 
												) 
										; 
									expression_statement m_axis
										method_invocation m_axis
											identifier 
											. 
											identifier 
											argument_list 
												( 
												) 
										; 
									expression_statement indexes
										assignment_expression indexes
											array_access indexes
												identifier 
												[ 
												decimal_integer_literal 
												] 
											= 
											method_invocation m_proxyA
												identifier 
												. 
												identifier 
												argument_list axisA
													( 
													identifier 
													) 
										; 
									expression_statement indexes
										assignment_expression indexes
											array_access indexes
												identifier 
												[ 
												decimal_integer_literal 
												] 
											= 
											method_invocation m_proxyB
												identifier 
												. 
												identifier 
												argument_list axisB
													( 
													identifier 
													) 
										; 
									expression_statement localPointA
										method_invocation localPointA
											identifier 
											. 
											identifier 
											argument_list m_proxyA
												( 
												method_invocation m_proxyA
													identifier 
													. 
													identifier 
													argument_list indexes
														( 
														array_access indexes
															identifier 
															[ 
															decimal_integer_literal 
															] 
														) 
												) 
										; 
									expression_statement localPointB
										method_invocation localPointB
											identifier 
											. 
											identifier 
											argument_list m_proxyB
												( 
												method_invocation m_proxyB
													identifier 
													. 
													identifier 
													argument_list indexes
														( 
														array_access indexes
															identifier 
															[ 
															decimal_integer_literal 
															] 
														) 
												) 
										; 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xfa
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xfb
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									local_variable_declaration separation
										floating_point_type 
											float 
										variable_declarator separation
											identifier 
											= 
											method_invocation Vec2
												identifier 
												. 
												identifier 
												argument_list pointB
													( 
													method_invocation pointB
														identifier 
														. 
														identifier 
														argument_list pointA
															( 
															identifier 
															) 
													, 
													identifier 
													) 
										; 
									return_statement separation
										return 
										identifier 
										; 
									} 
							switch_block_statement_group FACE_A
								switch_label FACE_A
									case 
									identifier 
								: 
								block Rot
									{ 
									expression_statement Rot
										method_invocation Rot
											identifier 
											. 
											identifier 
											argument_list xfa
												( 
												field_access xfa
													identifier 
													. 
													identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xfa
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									expression_statement Rot
										method_invocation Rot
											identifier 
											. 
											identifier 
											argument_list xfb
												( 
												field_access xfb
													identifier 
													. 
													identifier 
												, 
												method_invocation normal
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
												, 
												identifier 
												) 
										; 
									expression_statement normal
										method_invocation normal
											identifier 
											. 
											identifier 
											argument_list 
												( 
												) 
										; 
									expression_statement indexes
										assignment_expression indexes
											array_access indexes
												identifier 
												[ 
												decimal_integer_literal 
												] 
											= 
											unary_expression 
												- 
												decimal_integer_literal 
										; 
									expression_statement indexes
										assignment_expression indexes
											array_access indexes
												identifier 
												[ 
												decimal_integer_literal 
												] 
											= 
											method_invocation m_proxyB
												identifier 
												. 
												identifier 
												argument_list axisB
													( 
													identifier 
													) 
										; 
									expression_statement localPointB
										method_invocation localPointB
											identifier 
											. 
											identifier 
											argument_list m_proxyB
												( 
												method_invocation m_proxyB
													identifier 
													. 
													identifier 
													argument_list indexes
														( 
														array_access indexes
															identifier 
															[ 
															decimal_integer_literal 
															] 
														) 
												) 
										; 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xfb
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									local_variable_declaration separation
										floating_point_type 
											float 
										variable_declarator separation
											identifier 
											= 
											method_invocation Vec2
												identifier 
												. 
												identifier 
												argument_list pointB
													( 
													method_invocation pointB
														identifier 
														. 
														identifier 
														argument_list pointA
															( 
															identifier 
															) 
													, 
													identifier 
													) 
										; 
									return_statement separation
										return 
										identifier 
										; 
									} 
							switch_block_statement_group FACE_B
								switch_label FACE_B
									case 
									identifier 
								: 
								block Rot
									{ 
									expression_statement Rot
										method_invocation Rot
											identifier 
											. 
											identifier 
											argument_list xfb
												( 
												field_access xfb
													identifier 
													. 
													identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xfb
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									expression_statement Rot
										method_invocation Rot
											identifier 
											. 
											identifier 
											argument_list xfa
												( 
												field_access xfa
													identifier 
													. 
													identifier 
												, 
												method_invocation normal
													identifier 
													. 
													identifier 
													argument_list 
														( 
														) 
												, 
												identifier 
												) 
										; 
									expression_statement normal
										method_invocation normal
											identifier 
											. 
											identifier 
											argument_list 
												( 
												) 
										; 
									expression_statement indexes
										assignment_expression indexes
											array_access indexes
												identifier 
												[ 
												decimal_integer_literal 
												] 
											= 
											unary_expression 
												- 
												decimal_integer_literal 
										; 
									expression_statement indexes
										assignment_expression indexes
											array_access indexes
												identifier 
												[ 
												decimal_integer_literal 
												] 
											= 
											method_invocation m_proxyA
												identifier 
												. 
												identifier 
												argument_list axisA
													( 
													identifier 
													) 
										; 
									expression_statement localPointA
										method_invocation localPointA
											identifier 
											. 
											identifier 
											argument_list m_proxyA
												( 
												method_invocation m_proxyA
													identifier 
													. 
													identifier 
													argument_list indexes
														( 
														array_access indexes
															identifier 
															[ 
															decimal_integer_literal 
															] 
														) 
												) 
										; 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xfa
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									local_variable_declaration separation
										floating_point_type 
											float 
										variable_declarator separation
											identifier 
											= 
											method_invocation Vec2
												identifier 
												. 
												identifier 
												argument_list pointA
													( 
													method_invocation pointA
														identifier 
														. 
														identifier 
														argument_list pointB
															( 
															identifier 
															) 
													, 
													identifier 
													) 
										; 
									return_statement separation
										return 
										identifier 
										; 
									} 
							switch_block_statement_group indexes
								switch_label 
									default 
								: 
								assert_statement 
									assert 
									parenthesized_expression 
										( 
										false 
										) 
									; 
								expression_statement indexes
									assignment_expression indexes
										array_access indexes
											identifier 
											[ 
											decimal_integer_literal 
											] 
										= 
										unary_expression 
											- 
											decimal_integer_literal 
									; 
								expression_statement indexes
									assignment_expression indexes
										array_access indexes
											identifier 
											[ 
											decimal_integer_literal 
											] 
										= 
										unary_expression 
											- 
											decimal_integer_literal 
									; 
								return_statement 
									return 
									decimal_floating_point_literal 
									; 
							} 
					} 
			method_declaration evaluate
				modifiers 
					public 
				floating_point_type 
					float 
				identifier 
				formal_parameters indexA
					( 
					formal_parameter indexA
						integral_type 
							int 
						identifier 
					, 
					formal_parameter indexB
						integral_type 
							int 
						identifier 
					, 
					formal_parameter t
						floating_point_type 
							float 
						identifier 
					) 
				block m_sweepA
					{ 
					expression_statement m_sweepA
						method_invocation m_sweepA
							identifier 
							. 
							identifier 
							argument_list xfa
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					expression_statement m_sweepB
						method_invocation m_sweepB
							identifier 
							. 
							identifier 
							argument_list xfb
								( 
								identifier 
								, 
								identifier 
								) 
						; 
					switch_expression m_type
						switch 
						parenthesized_expression m_type
							( 
							identifier 
							) 
						switch_block POINTS
							{ 
							switch_block_statement_group POINTS
								switch_label POINTS
									case 
									identifier 
								: 
								block localPointA
									{ 
									expression_statement localPointA
										method_invocation localPointA
											identifier 
											. 
											identifier 
											argument_list m_proxyA
												( 
												method_invocation m_proxyA
													identifier 
													. 
													identifier 
													argument_list indexA
														( 
														identifier 
														) 
												) 
										; 
									expression_statement localPointB
										method_invocation localPointB
											identifier 
											. 
											identifier 
											argument_list m_proxyB
												( 
												method_invocation m_proxyB
													identifier 
													. 
													identifier 
													argument_list indexB
														( 
														identifier 
														) 
												) 
										; 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xfa
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xfb
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									local_variable_declaration separation
										floating_point_type 
											float 
										variable_declarator separation
											identifier 
											= 
											method_invocation Vec2
												identifier 
												. 
												identifier 
												argument_list pointB
													( 
													method_invocation pointB
														identifier 
														. 
														identifier 
														argument_list pointA
															( 
															identifier 
															) 
													, 
													identifier 
													) 
										; 
									return_statement separation
										return 
										identifier 
										; 
									} 
							switch_block_statement_group FACE_A
								switch_label FACE_A
									case 
									identifier 
								: 
								block Rot
									{ 
									expression_statement Rot
										method_invocation Rot
											identifier 
											. 
											identifier 
											argument_list xfa
												( 
												field_access xfa
													identifier 
													. 
													identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xfa
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									expression_statement localPointB
										method_invocation localPointB
											identifier 
											. 
											identifier 
											argument_list m_proxyB
												( 
												method_invocation m_proxyB
													identifier 
													. 
													identifier 
													argument_list indexB
														( 
														identifier 
														) 
												) 
										; 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xfb
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									local_variable_declaration separation
										floating_point_type 
											float 
										variable_declarator separation
											identifier 
											= 
											method_invocation Vec2
												identifier 
												. 
												identifier 
												argument_list pointB
													( 
													method_invocation pointB
														identifier 
														. 
														identifier 
														argument_list pointA
															( 
															identifier 
															) 
													, 
													identifier 
													) 
										; 
									return_statement separation
										return 
										identifier 
										; 
									} 
							switch_block_statement_group FACE_B
								switch_label FACE_B
									case 
									identifier 
								: 
								block Rot
									{ 
									expression_statement Rot
										method_invocation Rot
											identifier 
											. 
											identifier 
											argument_list xfb
												( 
												field_access xfb
													identifier 
													. 
													identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xfb
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									expression_statement localPointA
										method_invocation localPointA
											identifier 
											. 
											identifier 
											argument_list m_proxyA
												( 
												method_invocation m_proxyA
													identifier 
													. 
													identifier 
													argument_list indexA
														( 
														identifier 
														) 
												) 
										; 
									expression_statement Transform
										method_invocation Transform
											identifier 
											. 
											identifier 
											argument_list xfa
												( 
												identifier 
												, 
												identifier 
												, 
												identifier 
												) 
										; 
									local_variable_declaration separation
										floating_point_type 
											float 
										variable_declarator separation
											identifier 
											= 
											method_invocation Vec2
												identifier 
												. 
												identifier 
												argument_list pointA
													( 
													method_invocation pointA
														identifier 
														. 
														identifier 
														argument_list pointB
															( 
															identifier 
															) 
													, 
													identifier 
													) 
										; 
									return_statement separation
										return 
										identifier 
										; 
									} 
							switch_block_statement_group 
								switch_label 
									default 
								: 
								assert_statement 
									assert 
									parenthesized_expression 
										( 
										false 
										) 
									; 
								return_statement 
									return 
									decimal_floating_point_literal 
									; 
							} 
					} 
			} 
